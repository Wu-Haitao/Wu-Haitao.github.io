<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>写在最前面</title>
    <url>/posts/2020-11-29-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>昨天查资料的时候，发现很多大牛会在自己的博客里分享一些干货，感觉很棒。</p>
<p>索性折腾一个下午，也给自己建了一个博客。</p>
<p>平时学点东西总是现学现用，之后大概就忘记了，再往后往往还得费时费力重新学习。这实在不是一个好习惯。应该做一些记录。</p>
<p>现在我是大二，想必之后会学许多新东西，接触许多新知识。</p>
<p>就把这个博客作为一个记录的平台吧，挺不错的。</p>
]]></content>
  </entry>
  <entry>
    <title>TextMesh Pro 显示中文字符的方法</title>
    <url>/posts/2020-12-05-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这两天在写一个用于 Unity 项目中的对话系统时，了解到了 TextMesh Pro 这个玩意儿。它相比于普通的 Text 组件强了不少，但是居然不默认支持中文。咋办呢？</p>
<img src="1.png" width="50%" height="50%">

<p>上网查了查，发现解决的方法很简单。这里我来做个演示。</p>
<h1 id="使用-Font-Asset-Creator"><a href="#使用-Font-Asset-Creator" class="headerlink" title="使用 Font Asset Creator"></a>使用 Font Asset Creator</h1><p>首先打开 Font Asset Creator 这个工具。</p>
<img src="2.png" width="50%" height="50%">

<img src="3.png" width="50%" height="50%">

<p><em>Source Font File</em> 字体文件。</p>
<p><em>Sampling Point Size</em> 可以自己选择数值，一般情况下选 Auto Sizing 就可以。</p>
<p><em>Padding</em> 这个数值会影响描边或者阴影的效果，一般保持默认。</p>
<p><em>Packing Method</em> 选快速就可以。</p>
<p><em>Atlas Resolution</em> 这个尺寸由字符数量等因素决定。中文字符比较多所以选择大一些。</p>
<p><em>Character Set</em> 根据需求选择用于生成的字符集。这里我有一个现成的文件（包含数千个中文字符的文本文件），所以选择 Characters from File 这个选项。假设项目中所需字符数量少，那么选择 Custom Characters 并直接填入字符集也行。</p>
<p><em>Render Mode</em> 渲染方式。</p>
<h1 id="生成并保存-Font-Asset"><a href="#生成并保存-Font-Asset" class="headerlink" title="生成并保存 Font Asset"></a>生成并保存 Font Asset</h1><p>这些选项选好了之后，点击 Generate Font Atlas 开始生成 Font Asset 文件。因为字数比较多，所以生成速度可能会有些慢，耐心等待。</p>
<p>结束后可以在右边看到生成的结果。</p>
<img src="4.png" width="50%" height="50%">

<p>值得注意的是，左下角的方框里包含了一些重要信息，其中 Point Size 这个数值会影响显示时的清晰度，还有 Missing characters 里统计了哪些字符生成失败（原因往往是字体里面不包含这些字符）。</p>
<p>确认无误后，点击 Save 或者 Save as 进行保存。</p>
<h1 id="应用-Font-Asset-至-TMP"><a href="#应用-Font-Asset-至-TMP" class="headerlink" title="应用 Font Asset 至 TMP"></a>应用 Font Asset 至 TMP</h1><p>保存之后，到 TMP 的 Inspector 里面修改 Font Asset 为刚刚保存的文件。</p>
<img src="5.png" width="50%" height="50%">

<p>成功显示中文。</p>
<img src="6.png" width="50%" height="50%">

<p>差不多就是这样¯(°_o)/¯</p>
]]></content>
      <categories>
        <category>Unity 学习</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>信号与系统学习笔记#1</title>
    <url>/posts/2021-02-06-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<h1 id="信号分类"><a href="#信号分类" class="headerlink" title="信号分类"></a>信号分类</h1><h2 id="Analog-and-Digital-signals"><a href="#Analog-and-Digital-signals" class="headerlink" title="Analog and Digital signals"></a>Analog and Digital signals</h2><h3 id="Continuous-time-signal"><a href="#Continuous-time-signal" class="headerlink" title="Continuous-time signal"></a>Continuous-time signal</h3><p>当\(t\)为一个连续变量时信号\(x(t)\)被称作连续时间信号。</p>
<p>通常用波形图来描述。</p>
<ul>
<li><p>Analog signal</p>
<p>A continuous-time signal that can take on any value in the continuous interval \((a, b)\), where \(a\) may be \(-\infty\) and \(b\) may be \(+\infty\).</p>
</li>
<li><p>Digital signal</p>
<p>A continuous-time signal that can take on only a finite number of distinct levels.</p>
</li>
</ul>
<h3 id="Discrete-time-signal"><a href="#Discrete-time-signal" class="headerlink" title="Discrete-time signal"></a>Discrete-time signal</h3><p>如果信号只在离散的时间戳上有定义，那么信号被称为离散时间信号。</p>
<p>一个离散时间信号通常写作\(x_n\), 其中\(n\)是一个整数，并且被描述为数字序列</p>
<p>\[<br>\{ \dots x_{-1},\ x_0,\  x_1,\dots,\ x_n,\dots \}<br>\]</p>
<p>离散时间信号可以是自然得到的，比如每日股票平均价格，或者是通过对连续时间信号进行采样得到的。</p>
<ul>
<li><p>Analog sequence</p>
<p>A discrete-time signal that can take any value in an interval \((a, b)\), where \(a\) may be \(-\infty\) and \(b\) may be \(+\infty\).</p>
</li>
<li><p>Digital sequence</p>
<p>A discrete-time signal that can take on only a finite number of distinct levels.</p>
</li>
</ul>
<h2 id="Periodic-and-Aperiodic-signals"><a href="#Periodic-and-Aperiodic-signals" class="headerlink" title="Periodic and Aperiodic signals"></a>Periodic and Aperiodic signals</h2><p>信号\(x(t)\)具有周期性如果存在一个正值\(T\)使得</p>
<p>\[<br>x(t)=x(t+T);\ \forall t<br>\]</p>
<p>使等式成立的最小的\(T\)值被称为“基本周期”（fundamental period），或者简单地说，就是\(x(t)\)的“周期”。</p>
<p>“基本周期”的倒数被称为“基本频率”（fundamental frequency）。</p>
<p>不具有周期性（periodic）的信号具有非周期性（aperiodic）。</p>
<h2 id="Real-and-Complex-signals"><a href="#Real-and-Complex-signals" class="headerlink" title="Real and Complex signals"></a>Real and Complex signals</h2><p>信号\(x(t)\)为复信号如果其可被表示为\(a(t)+jb(t)\)，其中\(a(t)\)和\(b(t)\)是实信号，\(j\)为虚数单位。</p>
<ul>
<li><p>Cartesian 的形式：</p>
<p>\[<br>x(t)=a(t)+jb(t)<br>\]</p>
<p>其中</p>
<p>\(a(t)=Re[x(t)]\)    Real part of \(x(t)\)</p>
<p>\(b(t)=Im[x(t)]\)    Imaginary part of \(x(t)\)</p>
</li>
<li><p>Polar 的形式：</p>
<p>\[<br>x(t)=r(t)\exp(j\theta(t))<br>\]</p>
<p>其中</p>
<p>\(r(t)=|x(t)|\)    Magnitude of \(x(t)\)</p>
<p>\(\theta(t)=\angle x(t)\)    Phase Angle of \(x(t)\)</p>
</li>
<li><p>Cartesian 和 Polar 之间的关系</p>
<p>\[<br>a(t)=r(t)\cos[\theta(t)]\quad b(t)=r(t)\sin[\theta(t)]<br>\]</p>
<p>\[<br>r(t)=\sqrt {a^2(t)+b^2(t)}\quad \theta(t)=\tan^{-1}(\frac{b(t)}{a(t)})<br>\]</p>
</li>
</ul>
<p>复信号\(x(t)\)的共轭信号写作\(x^*(t)\)，通过取\(x(t)\)虚部的相反数得到。即替换\(b(t)\)为\(-b(t)\)或替换\(\theta(t)\)为\(-\theta(t)\)。</p>
<p>\(x(t)\)为实信号如果对于任何\(t\)值它的取值都是实数。这是复信号在\(b(t)=0\)或者\(\theta(t)=\pm n\pi=\pm n180°\)的一个特殊情况。</p>
<h2 id="Energy-and-Power-signals"><a href="#Energy-and-Power-signals" class="headerlink" title="Energy and Power signals"></a>Energy and Power signals</h2><p>信号\(x(t)\)的总能量\(E\)定义为：</p>
<p>\[<br>E=\int_{-\infty}^{\infty}|x(t)|^2\mathrm{d}t<br>\]</p>
<p>\(x(t)\)被称为是一个能量信号当且仅当\(0&lt;E&lt;\infty\)。</p>
<p>信号\(x(t)\)的平均功率\(P\)定义为：</p>
<p>\[<br>P=\lim_{\tau\to\infty} (\frac{1}{2\tau}\int_{-\tau}^{\tau}|x(t)|^2\mathrm{d}t)<br>\]</p>
<p>\(x(t)\)被称为是一个功率信号当且仅当\(0&lt;P&lt;\infty\)。</p>
<p>\(E=\mbox{finite}\) → \(P=0\)</p>
<p>\(P=\mbox{finite}\) → \(E=0\)</p>
<p>如果两个条件都不满足那么信号不属于其中任何一种。</p>
<h1 id="基础信号"><a href="#基础信号" class="headerlink" title="基础信号"></a>基础信号</h1><h2 id="The-Unit-Step-function"><a href="#The-Unit-Step-function" class="headerlink" title="The Unit Step function"></a>The Unit Step function</h2><p>\[<br>u(t)=<br>\begin{cases}<br>1;\ t\geq 0<br>\newline<br>0;\ t&lt;0<br>\end{cases}<br>\]</p>
<p><img src="1.png"></p>
<h2 id="The-Sign-or-Signum-function"><a href="#The-Sign-or-Signum-function" class="headerlink" title="The Sign(or Signum) function"></a>The Sign(or Signum) function</h2><p>\[<br>\begin{split}<br>\mathrm{sgn}(t)&amp;=<br>\begin{cases}<br>+1;\ t\geq 0<br>\newline<br>-1;\ t&lt;0<br>\end{cases}<br>\newline<br>&amp;=2u(t)-1<br>\end{split}<br>\]</p>
<p><img src="2.png"></p>
<h2 id="The-Rectangle-function"><a href="#The-Rectangle-function" class="headerlink" title="The Rectangle function"></a>The Rectangle function</h2><p>\[<br>\mathrm{rect}(\frac{t}{T})=<br>\begin{cases}<br>1;\ -\frac{T}{2}\leq t &lt; \frac{T}{2}<br>\newline<br>0;\ \mbox{elsewhere}<br>\end{cases}<br>\]</p>
<p><img src="3.png"></p>
<h2 id="The-Triangle-function"><a href="#The-Triangle-function" class="headerlink" title="The Triangle function"></a>The Triangle function</h2><p>\[<br>\mathrm{tri}(\frac{t}{T})=<br>\begin{cases}<br>1-\frac{|t|}{T};\ |t|\leq T<br>\newline<br>0;\ |t|&gt;T<br>\end{cases}<br>\]</p>
<p><img src="4.png"></p>
<h2 id="The-Sinc-sine-Cardinal-function"><a href="#The-Sinc-sine-Cardinal-function" class="headerlink" title="The Sinc(sine Cardinal) function"></a>The Sinc(sine Cardinal) function</h2><p>\[<br>\mathrm{sinc}(\frac{t}{T})=<br>\begin{cases}<br>\frac{\sin(\pi t/T)}{\pi t/T};\ t\neq 0<br>\newline<br>1;\ t=0<br>\end{cases}<br>\]</p>
<p>\[<br>\mbox{Note: }<br>\mathrm{sinc}(x)=<br>\begin{cases}<br>0;\ x=\mbox{integer}\neq 0<br>\newline<br>1;\ x=0<br>\end{cases}<br>\]</p>
<p><img src="5.png"></p>
<h2 id="Real-Exponential-signal"><a href="#Real-Exponential-signal" class="headerlink" title="Real Exponential signal"></a>Real Exponential signal</h2><p>\[<br>x(t)=\exp(-\sigma t)<br>\]</p>
<p><img src="6.png"></p>
<h2 id="The-Unit-Impulse-or-Dirac-δ-function"><a href="#The-Unit-Impulse-or-Dirac-δ-function" class="headerlink" title="The Unit Impulse(or Dirac-δ) function"></a>The Unit Impulse(or Dirac-δ) function</h2><p>\[<br>\delta (t)=<br>\begin{cases}<br>\infty;\ t=0<br>\newline<br>0;\ t\neq 0<br>\end{cases}<br>\mbox{and}<br>\int_{-\varepsilon}^{\varepsilon}\delta (t)\mathrm{d}t=1; \forall \varepsilon &gt;0<br>\]</p>
<p><img src="7.png"></p>
<h2 id="The-Dirac-Comb-function"><a href="#The-Dirac-Comb-function" class="headerlink" title="The Dirac Comb function"></a>The Dirac Comb function</h2><p>\[<br>\xi_T(t)=\sum_{n=-\infty }^{\infty }\delta (t-nT)<br>\]</p>
<p><img src="8.png"></p>
<h2 id="Sinusoidal-Signals"><a href="#Sinusoidal-Signals" class="headerlink" title="Sinusoidal Signals"></a>Sinusoidal Signals</h2><p>Sinusoidal signals (or sinusoids) 指的是一类周期性函数：</p>
<p>\[<br>x(t)=\mu\cos(\omega_0t+\phi)=\frac{\mu}{2}[\exp[j(\omega_0t+\phi)]+\exp[-j(\omega_0t+\phi)]]<br>\]</p>
<p>\[<br>x(t)=\mu\sin(\omega_0t+\phi)=\frac{\mu}{j2}[\exp[j(\omega_0t+\phi)]-\exp[-j(\omega_0t+\phi)]]<br>\]</p>
<p>\[<br>x(t)=\mu\exp[j(\omega_0t+\phi)]=\mu[\cos(\omega_0t+\phi)+j\sin(\omega_0t+\phi)]<br>\]</p>
<p>其中</p>
<p>\(\mu (&gt;0)\)    magnitude (or amplitude)</p>
<p>\(\omega_0\)    angular frequency (rad/s)</p>
<p>\(\phi\)    phase (radians)</p>
<p>\(\omega_0t+\phi\)    instantaneous phase (radians)</p>
<p>一种常见的做法是将\(\omega_0\)替换为\(2\pi f_0\)，其中\(f_0\)是 cyclic frequency (in Hz)。</p>
<p>基本周期可通过\(T_0=\frac{2\pi}{\omega_0}=\frac{1}{f_0}\)求得。</p>
<h1 id="Time-Scaling-Reversal-and-Shifting-of-Signals"><a href="#Time-Scaling-Reversal-and-Shifting-of-Signals" class="headerlink" title="Time-Scaling, -Reversal and -Shifting of Signals"></a>Time-Scaling, -Reversal and -Shifting of Signals</h1><h2 id="Time-scaling"><a href="#Time-scaling" class="headerlink" title="Time-scaling"></a>Time-scaling</h2><p>对于一个信号\(x(t)\)的 time-scaling 是将时间变量\(t\)替换为\(\alpha t\)，其中\(\alpha\)为正实数。</p>
<p>当\(0&lt;\alpha &lt;1\)时，在时间轴进行扩张（expansion）。</p>
<p>当\(\alpha &gt;1\)时，在时间轴进行收缩（contraction）。</p>
<h2 id="Time-reversal"><a href="#Time-reversal" class="headerlink" title="Time-reversal"></a>Time-reversal</h2><p>对于一个信号\(x(t)\)的 time-reversal 是将时间变量\(t\)替换为\(-t\)。</p>
<h2 id="Time-shifting"><a href="#Time-shifting" class="headerlink" title="Time-shifting"></a>Time-shifting</h2><p>对于一个信号\(x(t)\)的 time-shifting 是将时间变量\(t\)替换为\(t-\beta\)，其中\(\beta\)为实数。</p>
<p>当\(\beta &gt;0\)时，延迟\(\beta\)个单位的时间。</p>
<p>当\(\beta &lt;0\)时，提前\(\beta\)个单位的时间。</p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>信号与系统</tag>
      </tags>
  </entry>
  <entry>
    <title>信号与系统学习笔记#2</title>
    <url>/posts/2021-02-09-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<h1 id="频谱定义"><a href="#频谱定义" class="headerlink" title="频谱定义"></a>频谱定义</h1><p>一个信号的频域的表示被称为它的频谱（spectrum）。</p>
<p>频谱的数学模型，简而言之，就是一个频率的复函数。因此频谱的图像表达就包含了两部分：量谱（magnitude spectrum）和相位谱（phase spectrum）。在某些情况下，可以将其结合为一个谱图。</p>
<h1 id="Sinusoid-的频谱"><a href="#Sinusoid-的频谱" class="headerlink" title="Sinusoid 的频谱"></a>Sinusoid 的频谱</h1><h2 id="Complex-exponential-signal-的频谱"><a href="#Complex-exponential-signal-的频谱" class="headerlink" title="Complex exponential signal 的频谱"></a>Complex exponential signal 的频谱</h2><p>信号模型：</p>
<p>\[<br>\tilde x = \mu\exp[j(2\pi f_pt+\phi)] = \mu\exp(j\phi)\exp(j2\pi f_pt)<br>\begin{cases}<br>\mbox{Magnitude Spectrum:}\quad&amp;\mu<br>\newline<br>\mbox{Phase Spectrum:}\quad&amp;\phi<br>\newline<br>\mbox{Frequency:}\quad &amp;f_p<br>\end{cases}<br>\]</p>
<p>频谱图：</p>
<p><img src="1.png"></p>
<h2 id="Cosine-signal-的频谱"><a href="#Cosine-signal-的频谱" class="headerlink" title="Cosine signal 的频谱"></a>Cosine signal 的频谱</h2><p>信号模型：</p>
<p>\[<br>\begin{split}<br>x_c(t) &amp;= \mu\cos(2\pi f_0t+\phi) = \frac{1}{2}\mu\exp[j(2\pi f_0t+\phi)]+\frac{1}{2}\mu\exp[-j(2\pi f_0t+\phi)] \\<br>&amp;= \frac{\mu}{2}\exp(j\phi)\exp(j2\pi f_0t)+\frac{\mu}{2}\exp(j(-\phi))\exp(j2\pi(-f_0)t)<br>\end{split}<br>\]</p>
<p>频谱图：</p>
<p><img src="2.png"></p>
<h2 id="Sine-signal-的频谱"><a href="#Sine-signal-的频谱" class="headerlink" title="Sine signal 的频谱"></a>Sine signal 的频谱</h2><p>信号模型：</p>
<p>\[<br>\begin{split}<br>x_s(t) &amp;= \mu\sin(2\pi f_0t+\phi) = \frac{1}{j2}\mu\exp[j(2\pi f_0t+\phi)]-\frac{1}{j2}\mu\exp[-j(2\pi f_0t+\phi)] \\<br>&amp;= \frac{\mu}{2}\exp[j(\phi - \frac{\pi}{2})]\exp(j2\pi f_0t)+\frac{\mu}{2}\exp[j(-\phi + \frac{\pi}{2})]\exp(j2\pi(-f_0)t)<br>\end{split}<br>\]</p>
<p>频谱图：</p>
<p><img src="3.png"></p>
<h1 id="傅里叶级数"><a href="#傅里叶级数" class="headerlink" title="傅里叶级数"></a>傅里叶级数</h1><p>不同于 sinusoids，non-sinusoids 的周期信号的频谱无法简单地通过观察得到。这些信号的频谱可以采用称为傅里叶级数的手段得到。</p>
<h2 id="Complex-Exponential-Fourier-Series"><a href="#Complex-Exponential-Fourier-Series" class="headerlink" title="Complex Exponential Fourier Series"></a>Complex Exponential Fourier Series</h2><p>任何一个 bounded periodic signal，\(x_p(t)\)，都可以表示为一组 harmonically related complex sinusoids 的加和：</p>
<p>\[<br>x_p(t) = \sum_{k=-\infty}^{\infty}c_k\exp(j2\pi kt / T_p) = \sum_{k=-\infty}^{\infty}c_k\exp(j2\pi kf_pt)<br>\]</p>
<p>其中\(1/T_p\)是基本频率，而\(k/T_p\)是信号\(x_p(t)\)的第\(k\)个谐波频率（harmonic frequency）。</p>
<p>\(c_k\)被称为傅里叶系数（Fourier series coefficients），它们构成了\(x_p(t)\)的离散频谱（discrete-frequency spectrum）。</p>
<p>给定一个\(x_p(t)\)，求第\(k\)个傅里叶系数：</p>
<p>\[<br>c_k = \frac{1}{T_p}\int_{t_0}^{t_0+T_p}x_p(t)\exp(-j2\pi kt / T_p)\mathrm{d}t,\ k=0,\ \pm 1,\ \pm 2,\dots<br>\]</p>
<h2 id="Trigonometric-Fourier-Series"><a href="#Trigonometric-Fourier-Series" class="headerlink" title="Trigonometric Fourier Series"></a>Trigonometric Fourier Series</h2><p>上面的式子也可以用 cosine 和 sine 函数来表示：</p>
<p>\[<br>x_p(t) = a_0+2\sum_{k=1}^{\infty}[a_k\cos(2\pi kt / T_p)+b_k\sin(2\pi kt / T_p)]<br>\]</p>
<p>其中</p>
<p>\[<br>\begin{split}<br>a_k=\frac{c_{-k}+c_k}{2}=\frac{1}{T_p}\int_{t_0}^{t_0+T_p}x_p(t)\cos(2\pi kt / T_p)\mathrm{d}t;\ k\geq 0 \\<br>b_k=\frac{c_{-k}-c_k}{2}=\frac{1}{T_p}\int_{t_0}^{t_0+T_p}x_p(t)\sin(2\pi kt / T_p)\mathrm{d}t;\ k&gt; 0<br>\end{split}<br>\]</p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>信号与系统</tag>
      </tags>
  </entry>
  <entry>
    <title>关于新加坡华人姓氏</title>
    <url>/posts/2021-02-09-02/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天上课的时候，突然对一些华人同学的姓氏产生了兴趣。他们的姓氏和咱们的拼音相差很远。</p>
<p>比如说我的“吴”姓，在这儿可不是 Wu 了，而是 Goh。</p>
<p>再比如上个学期教授我的 Tan，我先前一直以为他姓谭——很自然的想法。万万没想到，这个 Tan 居然是“陈”姓。还有 Ng 是“黄”姓，Teo 是“张”姓。这如果不去主动了解，是无论如何也没法把它们联系上呀。</p>
]]></content>
  </entry>
  <entry>
    <title>信号与系统学习笔记#3</title>
    <url>/posts/2021-02-20-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<h1 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h1><p>不同于周期信号，非周期信号具有连续的频谱。</p>
<p>一个非周期信号\(x(t)\)的连续频谱（continuous-frequency spectrum），可以用其傅里叶变换\(X(f)\)来表示。这是傅里叶级数在\(T_p\rightarrow\infty,\ k\rightarrow\infty\)和\(k/T_p\rightarrow f\)的极限情况。</p>
<ul>
<li><p>\(x(t)\)和\(X(f)\)的关系：</p>
<p>\[<br>\begin{split}<br>\mbox{Forward | t-domain to f-domain} \quad X(f)=\int_{-\infty}^{\infty}x(t)\exp(-j2\pi ft)\mathrm{d}t \\<br>\mbox{Inverse | f-domain to t-domain} \quad x(t)=\int_{-\infty}^{\infty}X(f)\exp(j2\pi ft)\mathrm{d}f<br>\end{split}<br>\]</p>
</li>
<li><p>Dirichlet’s Conditions</p>
<p>要使得\(x(t)\)的傅里叶变换存在，以下几个条件需要被满足：</p>
<ul>
<li><p>On any finite interval</p>
<ul>
<li><p>\(x(t)\) is bounded</p>
</li>
<li><p>\(x(t)\) has a finite number of minima and maxima</p>
</li>
<li><p>\(x(t)\) has a finite number of discontinuities</p>
</li>
</ul>
</li>
<li><p>\(x(t)\) is absolutely integrable</p>
</li>
</ul>
</li>
</ul>
<h1 id="傅里叶变换的性质"><a href="#傅里叶变换的性质" class="headerlink" title="傅里叶变换的性质"></a>傅里叶变换的性质</h1><p>规定</p>
<p>\[<br>\begin{cases}<br>X(f) = \Im \{x(t)\}\ &amp;\mbox{denote the Fourier transform of}\ x(t)<br>\newline<br>x(t) \rightleftarrows X(f)\ &amp;\mbox{denote a Fourier transform pair}<br>\end{cases}<br>\]</p>
<ul>
<li><p>Linearity</p>
<p>\[<br>\alpha x_1(t) + \beta x_2(t) \rightleftarrows \alpha X_1(f) + \beta X_2(f)<br>\]</p>
</li>
<li><p>Time Scaling</p>
<p>\[<br>x(\beta t) \rightleftarrows \frac{1}{\lvert \beta \rvert}X(\frac{f}{\beta})<br>\]</p>
</li>
<li><p>Duality</p>
<p>\[<br>X(t) \rightleftarrows x(-f)\ \mbox{or}\ X(-t) \rightleftarrows x(f)<br>\]</p>
</li>
<li><p>Time Shifting</p>
<p>\[<br>x(t-t_0) \rightleftarrows X(f)\exp(-j2\pi ft_0)<br>\]</p>
</li>
<li><p>Frequency Shifting (Modulation)</p>
<p>\[<br>x(t)\exp(j2\pi f_0t) \rightleftarrows X(f-f_0)<br>\]</p>
</li>
<li><p>Differentiation in the Time Domain</p>
<p>\[<br>\frac{\mathrm{d}}{\mathrm{d} t}x(t) \rightleftarrows j2\pi f\cdot X(f)<br>\]</p>
</li>
<li><p>Integration in the Time Domain</p>
<p>\[<br>\int_{-\infty}^tx(\tau)\mathrm{d}\tau \rightleftarrows \frac{1}{j2\pi f}X(f) + \frac{1}{2}X(0)\delta (f)<br>\]</p>
</li>
<li><p>Convolution in the Time Domain (or Multiplication in the Frequency Domain)</p>
<p>\[<br>\underbrace{\int_{-\infty}^{\infty} x_1(\zeta) x_2(t-\zeta) \mathrm{d} \zeta}_{x_1(t) * x_2(t)} \rightleftarrows X_1(f) X_2(f)<br>\]</p>
</li>
<li><p>Multiplication in the Time Domain (or Convolution in the Frequency Domain)</p>
<p>\[<br>x_1(t) x_2(t) \rightleftarrows \int_{-\infty}^{\infty} X_1(\zeta) X_2(f-\zeta)\mathrm{d} \zeta<br>\]</p>
</li>
</ul>
<h1 id="REAL-Signal-的频谱性质"><a href="#REAL-Signal-的频谱性质" class="headerlink" title="REAL Signal 的频谱性质"></a>REAL Signal 的频谱性质</h1><ul>
<li>\(x(t)\) is REAL:此时\(x^*(t) = x(t)\)，\[<br>\underbrace{X^*(f) = X(-f)}_{X(f)\ \mbox{is Conjugate Symmetric}}\quad \underbrace{\lvert X(f) \rvert = \lvert X(-f) \rvert }_{\mbox{EVEN Symmetry}}\quad \underbrace{\angle X(f) = -\angle X(-f)}_{\mbox{ODD Symmetry}}<br>\]</li>
</ul>
<p><img src="1.png"></p>
<ul>
<li>\(x(t)\) is REAL and EVEN:此时\(x^*(t) = x(t)\mbox{ and }x(t) = x(-t)\)，\[<br>\underbrace{\overbrace{X^*(f) = X(f)}^{\mbox{Real}}\ \mbox{and}\ \overbrace{X(f) = X(-f)}^{\mbox{Even}}}_{X(f)\ \mbox{is REAL and EVEN}}<br>\]</li>
</ul>
<p><img src="2.png"></p>
<ul>
<li>\(x(t)\) is REAL and ODD:此时\(x^*(t) = x(t)\mbox{ and }x(-t) = -x(t)\)，\[<br>\underbrace{\overbrace{X^*(f) = -X(f)}^{\mbox{Imaginary}}\ \mbox{and}\ \overbrace{X(f) = -X(-f)}^{\mbox{Odd}}}_{X(f)\ \mbox{is IMAGINARY and ODD}}<br>\]</li>
</ul>
<p><img src="3.png"></p>
<p>上述这些结论同样适用于傅里叶级数的系数。</p>
<h1 id="Dirac-δ-和周期信号的频谱"><a href="#Dirac-δ-和周期信号的频谱" class="headerlink" title="Dirac-δ 和周期信号的频谱"></a>Dirac-δ 和周期信号的频谱</h1><h2 id="The-Continuous-time-Unit-Impulse-Dirac-δ-function"><a href="#The-Continuous-time-Unit-Impulse-Dirac-δ-function" class="headerlink" title="The Continuous-time Unit Impulse (Dirac-δ function)"></a>The Continuous-time Unit Impulse (Dirac-δ function)</h2><p>定义：</p>
<p>\[<br>\delta (t) =<br>\begin{cases}<br>\infty;\ t=0<br>\newline<br>0;\ t\neq 0<br>\end{cases}<br>\ \mbox{and}\<br>\int_{-\varepsilon}^{\varepsilon}\delta (t) \mathrm{d}t = 1;\ \forall \varepsilon &gt; 0<br>\]</p>
<p>\(\delta (t)\)的性质：</p>
<ol>
<li><p>Symmetry: </p>
<p>\[<br>\delta (t) = \delta (-t)<br>\]</p>
</li>
<li><p>Sampling:</p>
<p>\[<br>x(t)\delta (t-\lambda ) = x(\lambda)\delta (t-\lambda )<br>\]</p>
</li>
</ol>
<p><img src="4.png"></p>
<ol start="3">
<li><p>Sifting: </p>
<p>\[<br>\int_{-\infty}^{\infty}x(t)\delta (t-\lambda )\mathrm{d} t = x(\lambda )\int_{-\infty}^{\infty}\delta (t-\lambda )\mathrm{d} t = x(\lambda)<br>\]</p>
</li>
<li><p>Replication: </p>
<p>\[<br>\begin{split}<br>&amp;x(t)*\delta (t-\xi ) = \int_{-\infty}^{\infty}x(\xi )\delta (t-\zeta -\xi )\mathrm{d}\zeta = \int_{-\infty}^{\infty}x(\zeta) \delta (\zeta - (t - \xi ))\mathrm{d}\zeta = x(t-\xi ) \\<br>&amp;\mbox{Note: }x(t)*\delta (t) = x(t)<br>\end{split}<br>\]</p>
</li>
</ol>
<p><img src="5.png"></p>
<ol start="5">
<li>White Spectrum: \[<br>\Im \{\delta (t)\} = \int_{-\infty}^{\infty}\delta (t)\exp (-j2\pi ft) \mathrm{d} t = 1<br>\]</li>
</ol>
<p><img src="6.png"></p>
<h2 id="周期信号的频谱"><a href="#周期信号的频谱" class="headerlink" title="周期信号的频谱"></a>周期信号的频谱</h2><p>在 unit impulse function 的帮助下，可以在周期信号上使用傅里叶变换来获取它的连续频谱。</p>
<ul>
<li><p>DC</p>
<p>\[<br>[x(t) = K] \rightleftarrows [X(f) = K\delta (f)]<br>\]</p>
</li>
<li><p>Complex Exponential</p>
<p>\[<br>[x(t) = K\exp (j2\pi f_0 t)] \rightleftarrows [X(f) = K \delta (f - f_0)]<br>\]</p>
</li>
<li><p>Cosine</p>
<p>\[<br>[x(t) = K\cos (2\pi f_0 t)] \rightleftarrows \left [X(f) = \frac{K}{2} \delta (f - f_0) + \frac{K}{2} \delta (f + f_0) \right ]<br>\]</p>
</li>
<li><p>Sine</p>
<p>\[<br>[x(t) = K\sin (2\pi f_0 t)] \rightleftarrows \left [\begin{split}X(f) &amp;= \frac{K}{j2}\delta (f - f_0) - \frac{K}{j2}\delta(f+f_0)]\\&amp;=\frac{K}{2}\exp(-j\frac{\pi}{2})\delta (f - f_0) + \frac{K}{2}\exp(j\frac{\pi}{2}\delta (f + f_0))\end{split} \right ]<br>\]</p>
</li>
<li><p>Arbitrary periodic signals</p>
<p>\[<br>\left [x_p(t) = \sum_{k=-\infty}^{\infty}c_k\exp(j2\pi\frac{k}{T_p}t) \right ] \rightleftarrows \left [X_p(f) = \sum_{k=-\infty}^{\infty}c_k\delta (f - \frac{k}{T_p}) \right ]<br>\]</p>
<p>要求得周期信号\(x_p(t)\)的傅里叶变换\(X_p(f)\)，可以先求得其傅里叶系数，然后代入上面的式子。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>信号与系统</tag>
      </tags>
  </entry>
  <entry>
    <title>音乐播放器测试</title>
    <url>/posts/2021-02-24-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <div id="aplayer-JzMdjtjD" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-JzMdjtjD"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "Never Gonna Give You Up",
              author: "Rick Astley",
              url: "Rick_Astley_-_Never_Gonna_Give_You_Up.mp3",
              pic: "/posts/2021-02-24-01/rick-astley-never-gonna-give-you-up.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>信号与系统学习笔记#4</title>
    <url>/posts/2021-02-25-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<h1 id="能量谱密度"><a href="#能量谱密度" class="headerlink" title="能量谱密度"></a>能量谱密度</h1><p>能量谱密度（energy spectral density）描述了信号的能量在其频率上的分布情况。在时域中，信号\(x(t)\)的能量可通过下面这个公式计算：</p>
<p>\[<br>E = \int_{-\infty}^{\infty} \lvert x(t) \rvert ^2 \mathrm{d}t<br>\]</p>
<p>Rayleigh’s energy theorem 提供了另一个在频域中计算能量的方式：</p>
<p>\[<br>E = \int_{-\infty}^{\infty} \lvert X(f) \rvert ^2 \mathrm{d}f<br>\]</p>
<p>因为上述公式右部的积分是信号\(x(t)\)的总信号，我们可以把被积式\(\lvert X(f) \rvert ^2\)看作是该信号在频率\(f\)上的能量密度。由此可得能量谱密度的定义为：</p>
<p>\[<br>E_x(f) = \lvert X(f) \rvert ^2\ \mbox{(Joules/Hz)}<br>\]</p>
<p>\(E_x(f)\)的性质：</p>
<ul>
<li><p>\(E_x(f)\)是\(f\)的一个实函数。</p>
</li>
<li><p>对于任意\(f\)，\(E_x(f) \geq 0\)成立。</p>
</li>
<li><p>当\(x(t)\)为实函数时，\(E_x(f)\)是偶函数。</p>
</li>
</ul>
<h1 id="功率谱密度"><a href="#功率谱密度" class="headerlink" title="功率谱密度"></a>功率谱密度</h1><p>前面关于能量谱密度的内容仅在能量信号上有意义。类似的，对于功率信号，可以通过功率谱密度（power spectral density）来描述其功率在频率上的分布情况。</p>
<p>在时域中，功率被定义为信号幅度平方的平均量：</p>
<p>\[<br>P = \lim_{T \to \infty} \frac{1}{2T} \int_{-T}^{T} \lvert x(t) \rvert ^2 \mathrm{d}t<br>\]</p>
<p>Rayleigh’s power theorem 提供了另一个在频域中计算功率的方式：</p>
<p>\[<br>P = \int_{-\infty}^{\infty} \lim_{T \to \infty} \frac{1}{2T} \lvert X_T(f) \rvert ^2 \mathrm{d}f<br>\]</p>
<p>因为上述公式右部的积分是信号\(x(t)\)的平均功率，我们可以把被积式\(\lim_{T \to \infty} \frac{1}{2T} \lvert X_T(f) \rvert ^2\)看作是该信号在频率\(f\)上的功率密度。由此可得功率谱密度（Energy Spectral Density）的定义为：</p>
<p>\[<br>P_x(f) = \lim_{T \to \infty} \frac{1}{2T} \lvert X_T(f) \rvert ^2\ \mbox{(Watts/Hz)}<br>\]</p>
<p>\(P_x(f)\)的性质：</p>
<ul>
<li><p>\(P_x(f)\)是\(f\)的一个实函数。</p>
</li>
<li><p>对于任意\(f\)，\(P_x(f) \geq 0\)成立。</p>
</li>
<li><p>当\(x(t)\)为实函数时，\(P_x(f)\)是偶函数。</p>
</li>
</ul>
<h2 id="周期信号的功率谱密度"><a href="#周期信号的功率谱密度" class="headerlink" title="周期信号的功率谱密度"></a>周期信号的功率谱密度</h2><p>上述计算功率谱密度的公式比较复杂，然而在周期函数中，结果会更加直观一些。</p>
<p>令\(f_p\)，\(T_p\)和\(c_k\)分别为周期信号\(x_p(t)\)的基本频率，周期和傅里叶系数。</p>
<p>\(x_p(t)\)的功率谱密度：</p>
<p>\[<br>P_x(f) = \sum_{k=-\infty}^{\infty} \lvert c_k \rvert ^2 \delta (f- \frac{k}{T_p})<br>\]</p>
<p>\(x_p(t)\)的平均功率：</p>
<p>\[<br>P = \int_{-\infty}^{\infty} P_x(f) \mathrm{d}f = \sum_{k=-\infty}^{\infty} \lvert c_k \rvert ^2<br>\]</p>
<h1 id="频带宽度"><a href="#频带宽度" class="headerlink" title="频带宽度"></a>频带宽度</h1><p>信号\(x(t)\)的频带宽度（bandwidth）是对其频率范围的衡量。</p>
<h2 id="Bandlimited-Signals"><a href="#Bandlimited-Signals" class="headerlink" title="Bandlimited Signals"></a>Bandlimited Signals</h2><ul>
<li>Lowpass Signal如果一个信号的频率成分在一个确定的有限频率之上都为零，那么这个信号被称为 bandlimited lowpass signal。\[<br>\lvert X(f) \rvert = 0;\quad \lvert f \rvert &gt; B<br>\]其中\(B\)是信号的频带宽度。</li>
</ul>
<p><img src="1.png"></p>
<ul>
<li>Bandpass Signal如果一个信号的频率成分在一个确定的有限频率范围之外都为零，那么这个信号被称作 bandlimited bandpass signal。\[<br>\lvert X(f) \rvert = 0;\quad \lvert f \rvert &lt; f_c - B/2 \ \mbox{or}\ \lvert f \rvert &gt; f_c + B/2<br>\]其中\(f_c\)和\(B\)分别为该信号的中心频率（center frequency）和频带宽度。</li>
</ul>
<p><img src="2.png"></p>
<h2 id="Signals-with-Unrestricted-Band"><a href="#Signals-with-Unrestricted-Band" class="headerlink" title="Signals with Unrestricted Band"></a>Signals with Unrestricted Band</h2><h3 id="3dB-Bandwidth"><a href="#3dB-Bandwidth" class="headerlink" title="3dB Bandwidth"></a>3dB Bandwidth</h3><ul>
<li>Lowpass SignalThe 3dB bandwidth of a lowpass signal \(x(t)\) is defined as the frequency at which \(\lvert X(f) \rvert = \lvert X(0) \rvert / \sqrt{2}\) first occurs when \(f\) is increased from 0.\(f_B\) is called the 3dB frequency because: \[<br>\begin{split}<br>20\log_{10}(\lvert X(f_B) / X(0)\rvert) &amp;= 20\log_{10}(1/\sqrt{2}) \\<br>&amp;\approx -3.01\ \mbox{dB}<br>\end{split}<br>\]</li>
</ul>
<p><img src="3.png"></p>
<ul>
<li>Bandpass SignalLikewise, the 3dB bandwidth of a bandpass signal \(x(t)\) with center frequency \(f_c\) is defined as illustrated below:</li>
</ul>
<p><img src="4.png"></p>
<h3 id="1st-null-Bandwidth"><a href="#1st-null-Bandwidth" class="headerlink" title="1st-null Bandwidth"></a>1<sup>st</sup>-null Bandwidth</h3><ul>
<li>Lowpass SignalThe 1<sup>st</sup>-null bandwidth of a lowpass signal \(x(t)\) is defined as the frequency at which \(\lvert X(f) \rvert = 0\) first occurs when \(f\) is increased from 0:</li>
</ul>
<p><img src="5.png"></p>
<ul>
<li>Bandpass SignalLikewise, the 1<sup>st</sup>-null (a.k.a. null-to-null) bandwidth of a bandpass signal \(x(t)\) with center frequency \(f_c\) is defined as illustrated below:</li>
</ul>
<p><img src="6.png"></p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>信号与系统</tag>
      </tags>
  </entry>
  <entry>
    <title>平摊分析笔记</title>
    <url>/posts/2021-03-20-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" async
  src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/latest.js?config=TeX-MML-AM_CHTML">
</script>

<p><strong>平摊分析（amortized analysis）</strong>是用于分析一系列操作的平均花费的方法。在一些情况下，采用最坏的单次操作表现来衡量整体情况是不合适的，这时就需要对其进行平摊分析。</p>
<p>平摊分析不涉及概率。也要将其与平均情况分析（average-case analysis）区分开来。</p>
<p>平摊分析保证的是最坏情况下，单次操作的平均表现。</p>
<h1 id="聚集法-Aggregate-method"><a href="#聚集法-Aggregate-method" class="headerlink" title="聚集法 Aggregate method"></a>聚集法 Aggregate method</h1><p>计算\(n\)个操作的时间复杂度上限\(T(n)\)，平摊\(T(n)\)至每一个操作，每一个操作的平摊成本是\(T(n)/n\)。</p>
<p>考虑一个二进制计数器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Increment(A)</span><br><span class="line">  i←0</span><br><span class="line">  while i&lt;length[A] and A[i]=1 do</span><br><span class="line">    A[i]←0    //flip 1→0</span><br><span class="line">    i←i+1</span><br><span class="line">  if i&lt;length[A] then</span><br><span class="line">    A[i]←1    //flip 0→1</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">Ctr</th>
<th align="center">A[3]</th>
<th align="center">A[2]</th>
<th align="center">A[1]</th>
<th align="center">A[0]</th>
<th align="center">Cost</th>
<th align="center">Total Cost</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center"><strong>0</strong></td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center"><strong>0</strong></td>
<td align="center"><strong>1</strong></td>
<td align="center">1</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center"><strong>0</strong></td>
<td align="center">2</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">0</td>
<td align="center"><strong>0</strong></td>
<td align="center"><strong>1</strong></td>
<td align="center"><strong>1</strong></td>
<td align="center">1</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center"><strong>0</strong></td>
<td align="center">3</td>
<td align="center">7</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center"><strong>0</strong></td>
<td align="center"><strong>1</strong></td>
<td align="center">1</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center"><strong>0</strong></td>
<td align="center">2</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center"><strong>0</strong></td>
<td align="center"><strong>1</strong></td>
<td align="center"><strong>1</strong></td>
<td align="center"><strong>1</strong></td>
<td align="center">1</td>
<td align="center">11</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center"><strong>0</strong></td>
<td align="center">4</td>
<td align="center">15</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center"><strong>0</strong></td>
<td align="center"><strong>1</strong></td>
<td align="center">1</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center"><strong>0</strong></td>
<td align="center">2</td>
<td align="center">18</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">1</td>
<td align="center"><strong>0</strong></td>
<td align="center"><strong>1</strong></td>
<td align="center"><strong>1</strong></td>
<td align="center">1</td>
<td align="center">19</td>
</tr>
</tbody></table>
<p>\(T(n)\)是在\(n\)次增加中，数字反转的总次数。令\(f(i)\)等于在第\(i\)位的数字反转次数。那么显然\(T(n)=\sum_{i=0}^{k-1}f(i)\)。</p>
<p>通过观察可以发现：</p>
<ul>
<li>\(f(0)=n\)</li>
<li>\(f(1)=n/2\)</li>
<li>\(f(2)=n/4\)</li>
<li>\(f(i)=n/2^i\)</li>
</ul>
<p>由此可以得到\(T(n)=n\sum_{i=0}^{k-1}2^{-i}&lt;2n\)。</p>
<p>那么，每一次增加的平均花费，也就是平摊成本，等于\(\frac{T(n)}{n}&lt;2=O(1)\)。</p>
<h1 id="记账法-Accounting-Banker’s-method"><a href="#记账法-Accounting-Banker’s-method" class="headerlink" title="记账法 Accounting (Banker’s) method"></a>记账法 Accounting (Banker’s) method</h1><p>对第\(i\)次操作收取一个平摊成本\(c(i)\)（想象成一笔钱）。这笔钱会在这次操作中被消耗一部分，而没有被立即消耗的则会被存到银行中，供之后的操作使用。基本想法就是对“便宜”的操作收取额外的费用，多出来的部分被用于支付之后的“昂贵”操作。</p>
<p>注意：银行存款在任何时候都不能为负数。</p>
<p>还是以二进制计数器作为例子。</p>
<p>首先分析“昂贵”的情况：从011111到100000，总反转次数是6，其中5次是1→0，只有1次是0→1。也就是说，这次增加之所以“昂贵”，是因为在1→0上花费的太多。</p>
<p>那么，对每一个0→1收取￥2，其中￥1用于该操作本身，而另外￥1则被存入银行。不难看出，在任何时候，计数器中的“1”都在银行有￥1的存款。这存下来的￥1可用于支付1→0的操作，那么1→0本身的花费就被消除了。</p>
<p><img src="1.png"></p>
<p>由此可得出结论，每一次增加的平摊成本等于\(2\)，即\(O(1)\)。而\(n\)次增加的平摊成本等于\(2n\)，即\(O(n)\)。</p>
<p>练习：</p>
<blockquote>
<p><strong>Question</strong></p>
<p>Consider a data structure that is based on a queue with four operations:</p>
<p>– ENQUEUE(<em>a</em>): Add the element <em>a</em> into the queue<br>– DEQUEUE(): Dequeue a single element from the queue<br>– DELETE(<em>k</em>): Dequeue <em>k</em> elements from the queue<br>– ADD(<em>A</em>): Enqueue all elements in <em>A</em></p>
<p>Claim: ENQUEUE, DEQUEUE and DELETE run in amortized O(1) time while ADD runs in amortized O(|<em>A</em>|) time.</p>
<p>Using accounting method, can you show that these time complexities are correct?</p>
</blockquote>
<blockquote>
<p><strong>Solution</strong></p>
<p>ENQUEUE(<em>a</em>) is charged $2,<br>– $1 is for immediate insert<br>– $1 is stored in the bank for the future dequeue operation of <em>a</em></p>
<p>DEQUEUE() is charged $0<br>– The element is deleted using $1 from the bank</p>
<p>DELETE(<em>k</em>) is charged $0<br>– The <em>k</em> elements are deleted using $<em>k</em> from the bank</p>
<p>ADD(<em>A</em>) is charged $(2|<em>A</em>|)<br>– There are |<em>A</em>| enqueue. Each enqueue is charged $2<br> • $1 is for immediate insert<br> • $1 is stored in the bank for the future dequeue operation</p>
<p>After the insertion of element <em>x</em> (in ENQUEUE and ADD operations), $1 is associated to <em>x</em> in the bank. When we dequeue the element <em>x</em> (in DEQUEUE and DELETE operations), we can use $1 from the bank for dequeue of <em>x</em>. Hence, the bank never goes negative. </p>
</blockquote>
<h1 id="势能法-Potential-Method"><a href="#势能法-Potential-Method" class="headerlink" title="势能法 Potential Method"></a>势能法 Potential Method</h1><p>定义：</p>
<p>\(\phi\)为与算法（或数据结构）相关联的势能函数（potential function）。</p>
<p>\(\phi(i)\)为第\(i\)次操作后的势能。</p>
<ul>
<li>\(\phi(0)=0\)</li>
<li>\(\phi(i)\geq0\ \mbox{for all}\ i\)</li>
</ul>
<p>那么，第\(i\)次操作的平摊成本等于第\(i\)次操作的实际成本加上\((\phi(i)-\phi(i-1))\)（\(\triangle\phi_i\) 势能差）。</p>
<p>试着选择一个合适的\(\phi\)，使得对于高成本的操作，\(\triangle\phi_i\)是负值，从而抵消或减少实际成本的影响。仔细观察并找出高成本操作中<strong>减少的量</strong>，这将有助于\(\phi\)的选择。</p>
<p>还是以二进制计数器作为例子。</p>
<p>从011111到100000，不难发现计数器中“1”的数量减少了。因此，让\(\phi(i)\)等于经过第\(i\)次增加后计数器中“1”的数量。可得结论如下，其中\(l_i\)是计数器中由“1”组成的最长后缀长度。</p>
<table>
<thead>
<tr>
<th align="center">第\(i\)次操作的实际成本</th>
<th align="center">\(\triangle\phi_i\)</th>
<th align="center">第\(i\)次操作的平摊成本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\(l_i+1\)</td>
<td align="center">\(-l_i+1\)</td>
<td align="center">\(2\)</td>
</tr>
</tbody></table>
<p>练习：</p>
<blockquote>
<p><strong>Question</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Insert(x)</span><br><span class="line">  if (n=0)</span><br><span class="line">    T←createTable(1)</span><br><span class="line">  else</span><br><span class="line">    if (n=size(T))</span><br><span class="line">      T&#x27;←createTable(2n)</span><br><span class="line">      copy(T,T&#x27;)</span><br><span class="line">      free(T)</span><br><span class="line">      T←T&#x27;</span><br><span class="line">  insert x into T</span><br><span class="line">  n←n+1</span><br></pre></td></tr></table></figure>

<p>Dynamic tables:</p>
<p>Whenever the table overflows, “grow” it by allocating (via malloc or new) a new, larger table. Move all items from the old table into the new one, and free the storage for the old table.  </p>
<p>Using Potential method show that the amortized cost of each insertion operation is O(1).</p>
</blockquote>
<blockquote>
<p><strong>Solution</strong></p>
<p>\(\phi(i)=2i-\mathrm{size}(T)\)</p>
<p><img src="2.png"></p>
<table>
<thead>
<tr>
<th align="center">Operation Insert(x)</th>
<th align="center">Actual Cost</th>
<th align="center">\(\triangle\phi_i\)</th>
<th align="center">Amortized Cost</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Case 1: when table is not full</td>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">Case 2: when table is already full</td>
<td align="center">i</td>
<td align="center">3-i</td>
<td align="center">3</td>
</tr>
</tbody></table>
<p>Amortized cost of each insertion operation is 3 which is O(1).</p>
</blockquote>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>信号与系统学习笔记#5</title>
    <url>/posts/2021-03-28-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><p>系统，是一个关于输入信号（input/excitation signal）和输出信号（output/response signal）的数学模型。</p>
<p>定义输入为\(x(t)\)，输出为\(y(t)\)，那么系统可视作一个从\(x(t)\)到\(y(t)\)的一个转换，或者映射。用数学语言表达就是：</p>
<p>\[<br>y(t)=\mathrm{T}[x(t)]<br>\]</p>
<p>其中\(\mathrm{T}\)是一个表达了数个转换规则的算子。</p>
<h1 id="系统的分类"><a href="#系统的分类" class="headerlink" title="系统的分类"></a>系统的分类</h1><ul>
<li><p>有记忆（memory）系统与无记忆（memoryless）系统</p>
<p>如果一个系统在给定时间的的输出仅取决于该时间的输入，那么这个系统为无记忆系统。否则，这个系统为有记忆系统。</p>
<p>例子：</p>
<blockquote>
<p>An example of a memoryless system is a resistor \(R\) with the current \(i(t)\) flowing through it taken as the input and the voltage \(v(t)\) across it as output. The input-output relationship (Ohm’s law) of the resistor is</p>
<p>\[<br>v(t)=R\cdot i(t)<br>\]</p>
<p>Clearly, the output voltage at time \(t\) depends on only the value of the input current at time \(t\).</p>
<p>An example of a system with memory is a capacitor \(C\) with the current \(i(t)\) flowing through it taken as the input and the voltage \(v(t)\) across it as output. The input-output relationship of the capacitor is</p>
<p>\[<br>v(t)=\frac{1}{C}\int_{-\infty}^{t}i(\tau)\mathrm{d}\tau<br>\]</p>
<p>Clearly, the output voltage at time \(t\) depends on all values of the input current from time \(-\infty\) to \(t\).</p>
</blockquote>
</li>
<li><p>因果（causal）系统和非因果（noncausal）系统</p>
<p>如果一个系统当前的输出仅取决于当前与过去的输入，那么这个系统为因果系统。换言之，因果系统不可能在输入到达的时刻之前产生输出。</p>
<p>如果一个系统当前的输出与未来的输入有关，那么这个系统为非因果系统。</p>
</li>
<li><p>稳定（stable）系统和非稳定（unstable）系统</p>
<p>如果对于任何有界输入\(x(t)\)对应的输出\(y(t)\)同样是一个有界值，那么该系统是稳定（BIBO stable）系统。</p>
<p>如果不是所有有界输入都对应有界输出，那么该系统是非稳定系统。</p>
</li>
<li><p>线性（linear）系统和非线性（nonlinear）系统</p>
<p>满足下列条件的系统被称作线性系统：</p>
<p>\[<br>\begin{split}<br>\mbox{Additivity: }\quad &amp;\begin{split} \mathrm{T}[x_1(t)+x_2(t)] &amp;= \mathrm{T}[x_1(t)] + \mathrm{T}[x_2(t)] \newline &amp;=y_1(t) + y_2(t)\end{split}<br>\newline<br>\mbox{Homogeneity (or Scaling): }\quad &amp;\mathrm{T}[\alpha x(t)] = \alpha \mathrm{T}[x(t)] = \alpha y(t)<br>\end{split}<br>\]</p>
<p>上述两个条件可以合并为一个：</p>
<p>\[<br>\mathrm{T}[\alpha_1 x_1(t) + \alpha_2 x_2(t)] = \alpha_1 y_1(t) + \alpha_2 y_2(t)<br>\]</p>
<p>这被称为叠加性质（superposition property）。</p>
<p>另一个线性系统的重要性质是：零输入对应零输出。</p>
<p>不满足上述条件的系统即为非线性系统。</p>
<p>之前例子中关于电阻和电容的系统均为线性系统。</p>
</li>
<li><p>时变（time-varying）系统和非时变（time-invariant）系统</p>
<p>如果在一个系统中，对于输入信号的时移会造成相同的输出信号的时移，那么这个系统是非时变系统。即对于任意\(\tau\)：</p>
<p>\[<br>\mathrm{T}[x(t-\tau)] = y(t-\tau)<br>\]</p>
<p>不满足上述条件的系统是时变系统。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>信号与系统</tag>
      </tags>
  </entry>
  <entry>
    <title>信号与系统学习笔记#6</title>
    <url>/posts/2021-03-28-02/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<h1 id="LTI-系统"><a href="#LTI-系统" class="headerlink" title="LTI 系统"></a>LTI 系统</h1><p>连续时间线性时不变（LTI）系统中有重要的一类，可用线性常系数微分方程表示：</p>
<p>\[<br>\sum_{n=0}^{N}a_n\frac{\mathrm{d}^ny(t)}{\mathrm{d}t^n}=\sum_{m=0}^{M}b_m\frac{\mathrm{d}^mx(t)}{\mathrm{d}t^m}<br>\]</p>
<p>其中，\(x(t)\)和\(y(t)\)分别为输入和输出，\(a_n\)和\(b_m\)是实常数，并且\(a_N\neq 0\)。\(N\)是\(y(t)\)的 highest derivative，也被称为该系统的阶（order）。</p>
<h1 id="冲激响应（Impulse-Response）"><a href="#冲激响应（Impulse-Response）" class="headerlink" title="冲激响应（Impulse Response）"></a>冲激响应（Impulse Response）</h1><p><img src="1.png"></p>
<p>一个连续时间 LTI 系统的冲激响应，\(h(t)\)，被定义为当输入为 unit impulse 时系统的响应：</p>
<p>\[<br>h(t) = \mathrm{T}[\delta (t)]<br>\]</p>
<p>假设输入为一个任意的信号\(x(t)\)，根据\(\delta (t)\)的 replication property 以及 LTI 系统的性质，可得：</p>
<p>\[<br>y(t) = x(t) * h(t)<br>\]</p>
<p><img src="2.png"></p>
<p>不难看出，一个连续时间 LTI 系统可由它的冲激响应完全表征，其输出\(y(t)\)即为输入\(x(t)\)与冲激响应\(h(t)\)的卷积。</p>
<h1 id="频率响应（Frequency-Response）"><a href="#频率响应（Frequency-Response）" class="headerlink" title="频率响应（Frequency Response）"></a>频率响应（Frequency Response）</h1><p>对上述等式进行傅里叶变换，可以得到 LTI 系统在频域中输入和输出的关系：</p>
<p>\[<br>Y(f) = \Im \{x(t) * h(t)\} = X(f)\cdot H(f)<br>\]</p>
<p>其中：</p>
<p>\[<br>H(f) = \Im \{h(t)\} = \left| H(f) \right|\exp(j\angle H(f))<br>\]</p>
<p>\(H(f)\)被称为频率响应，\(\left| H(f) \right|\)和\(\angle H(f)\)分别是幅度响应（magnitude response）和相位响应（phase response）。</p>
<p><img src="4.png"></p>
<h2 id="傅里叶变换在-ω-domain-的表达"><a href="#傅里叶变换在-ω-domain-的表达" class="headerlink" title="傅里叶变换在 ω-domain 的表达"></a>傅里叶变换在 ω-domain 的表达</h2><p>在研究系统时，频率函数经常被表示为\(j\omega\)的函数（\(\omega = 2\pi f\)）。</p>
<p>\[<br>\mbox{f-domain: }\quad \Phi (f) = \Im \{\phi (t)\} \\<br>\mbox{ω-domain: }\quad \tilde{\Phi} (j\omega) = \Phi (f)|_{f=\omega / (2\pi)} = \Phi (\frac{\omega}{2\pi})<br>\]</p>
<p>根据前文的结论，可得：</p>
<p>\[<br>\tilde{Y}(j\omega) = \tilde{X}(j\omega)\cdot \tilde{H}(j\omega)<br>\]</p>
<p><img src="5.png"></p>
<p>\[<br>\tilde{H}(j\omega) = \left|\tilde{H}(j\omega)\right|\exp(j\angle (j\omega))<br>\]</p>
<p><img src="6.png"></p>
<h1 id="伯德图（Bode-Diagram）"><a href="#伯德图（Bode-Diagram）" class="headerlink" title="伯德图（Bode Diagram）"></a>伯德图（Bode Diagram）</h1><p>伯德图可用于描述一个 LTI 系统的频率响应，\(\tilde{H}(j\omega)\)。</p>
<p>伯德图包含两个图：</p>
<ul>
<li>幅度图（magnitude plot）：\(\left|\tilde{H}(j\omega)\right|_{\mbox{dB}} = 20\log_{10}\left|\tilde{H}(j\omega)\right|\ \mbox{dB}\)</li>
<li>相位图（phase plot）：\(\angle\tilde{H}(j\omega)\ \mbox{in degrees}\)</li>
</ul>
<p>这两张图通常被绘制在半对数图上（横轴为对数尺度）。</p>
<p>伯德图仅对正频率进行可视化。伯德图可用数条直线近似表示，这样的结果被称为直线伯德图。</p>
<h2 id="传递函数"><a href="#传递函数" class="headerlink" title="传递函数"></a>传递函数</h2><p>对本文开头的线性常系数微分方程进行傅里叶变换并进行变量代换可得频率响应：</p>
<p>\[<br>\tilde{H}(j\omega) = \frac{\tilde{Y}(j\omega)}{\tilde{X}(j\omega)} = \sum_{m=0}^{M} b_m(j\omega)^m / \sum_{n=0}^{N} a_n(j\omega)^n<br>\]</p>
<p>令\(\omega = s/j\)，那么：</p>
<p>\[<br>\tilde{H}(s) = K’\frac{(s+z_1)(s+z_2)\dots(s+z_M)}{(s+p_1)(s+p_2)\dots(s+p_N)}\ \mbox{where}\ K’ = \frac{b_0}{a_0}\frac{p_1 p_2\dots p_N}{z_1 z_2\dots z_M}<br>\]</p>
<p>有时也可这样表示：</p>
<p>\[<br>\tilde{H}(s) = \frac{b_0}{a_0}\frac{(s/z_1 + 1)(s/z_2 + 1)\dots (s/z_M + 1)}{(s/p_1 + 1)(s/p_2 + 1)\dots (s/p_N + 1)}<br>\]</p>
<p>实际上，对本文开头的线性常系数微分方程进行拉普拉斯变换可以得到相同的结果。并且等式中\(\tilde{X}(s)\)和\(\tilde{Y}(s)\)分别是\(x(t)\)和\(y(t)\)的拉普拉斯变换。</p>
<ul>
<li>\(\tilde{H}(d) = \frac{\tilde{Y}(s)}{\tilde{X}(s)}\)即为 LTI 系统的传递函数（transfer function）。</li>
<li>\((-z_m)\)被称为 zeros。</li>
<li>\((-p_n)\)被称为 poles。</li>
<li>\((N-M)\)被称为 pole excess。</li>
</ul>
<h2 id="构建直线伯德图"><a href="#构建直线伯德图" class="headerlink" title="构建直线伯德图"></a>构建直线伯德图</h2><p>一个系统的 DC gain 指的是系统在频率为零时的响应。所以 DC gain 就等于\(\tilde{H}(0)\)。</p>
<p>对于直线伯德图的构建由传递函数开始。首先将传递函数分成三个情况：</p>
<ul>
<li><p>N<sup>th</sup>-order System with \(l\) differentiators</p>
<p>\[<br>\tilde{H}(s) = K_{\mathrm{d}} s^l \cdot \frac{(s/z_1 + 1)(s/z_2 + 1)\dots (s/z_{M-l} + 1)}{(s/p_1 + 1)(s/p_2 + 1)\dots (s/p_N + 1)};\quad \left\{\begin{split}&amp;z_m \neq 0 \ &amp;\forall m \in [1, M-l]\newline &amp;p_n \neq 0 \ &amp;\forall n \in [1, N]\end{split}\right.<br>\]</p>
<p>在这种情况下，该系统的 DC gain 为\(\tilde{H}(0) = 0\)。</p>
</li>
<li><p>N<sup>th</sup>-order System with \(l\) integrators</p>
<p>\[<br>\tilde{H}(s) = \frac{K_{\mathrm{i}}}{s^l} \cdot \frac{(s/z_1 + 1)(s/z_2 + 1)\dots (s/z_{M} + 1)}{(s/p_1 + 1)(s/p_2 + 1)\dots (s/p_{N-l} + 1)};\quad \left\{\begin{split}&amp;z_m \neq 0 \ &amp;\forall m \in [1, M]\newline &amp;p_n \neq 0 \ &amp;\forall n \in [1, N-l]\end{split}\right.<br>\]</p>
<p>在这种情况下，该系统的 DC gain 为\(\tilde{H}(0) = \infty\)。</p>
</li>
<li><p>N<sup>th</sup>-order System without integrator or differentiator</p>
<p>\[<br>\tilde{H}(s) = K_{\mathrm{dc}} \cdot \frac{(s/z_1 + 1)(s/z_2 + 1)\dots (s/z_{M} + 1)}{(s/p_1 + 1)(s/p_2 + 1)\dots (s/p_N + 1)};\quad \left\{\begin{split}&amp;z_m \neq 0 \ &amp;\forall m \in [1, M]\newline &amp;p_n \neq 0 \ &amp;\forall n \in [1, N]\end{split}\right.<br>\]</p>
<p>其中\(K_{\mathrm{dc}} = \tilde{H}(0)\)即为系统的 DC gain。</p>
</li>
</ul>
<p>下面讨论几个基本系统的直线伯德图的构建。</p>
<ol>
<li><p>Bode plots of a DC Gain: </p>
<p>\[<br>\begin{split}<br>&amp;\tilde{H}(s) = K_{\mathrm{dc}}<br>\newline<br>&amp;\mbox{Frequency Response: }\quad &amp;\tilde{H}(j\omega) = K_{\mathrm{dc}}<br>\newline<br>&amp;\mbox{Magnitude Response: }\quad &amp;\left\{\begin{split}&amp;\left|\tilde{H}(j\omega)\right| = K_{\mathrm{dc}}\newline &amp;\left|\tilde{H}(j\omega)\right|_{\mbox{dB}} = 20\log_{10}(K_{\mathrm{dc}})\ \mbox{dB}\end{split}\right.<br>\newline<br>&amp;\mbox{Phase Response: }\quad &amp;\angle\tilde{H}(j\omega) = 0^{\circ}<br>\end{split}<br>\]</p>
<p><img src="7.png"></p>
</li>
<li><p>Bode plots of Differentiator: </p>
<p>\[<br>\begin{split}<br>&amp;\tilde{H}(s) = K_{\mathrm{d}} s<br>\newline<br>&amp;\mbox{Frequency Response: }\quad &amp;\tilde{H}(j\omega) = jK_{\mathrm{d}}\omega<br>\newline<br>&amp;\mbox{Magnitude Response: }\quad &amp;\left\{\begin{split}&amp;\left|\tilde{H}(j\omega)\right| = K_{\mathrm{d}}\omega \newline &amp;\left|\tilde{H}(j\omega)\right|_{\mbox{dB}} = 20\log_{10}(K_{\mathrm{d}}) + 20\log_{10}(\omega)\ \mbox{dB}\end{split}\right.<br>\newline<br>&amp;\mbox{Phase Response: }\quad &amp;\angle\tilde{H}(j\omega) = 90^{\circ}<br>\end{split}<br>\]</p>
<p><img src="8.png"></p>
</li>
<li><p>Bode plots of Integrator: </p>
<p>\[<br>\begin{split}<br>&amp;\tilde{H}(s) = \frac{K_{\mathrm{i}}}{s}<br>\newline<br>&amp;\mbox{Frequency Response: }\quad &amp;\tilde{H}(j\omega) = \frac{K_{\mathrm{i}}}{j\omega}<br>\newline<br>&amp;\mbox{Magnitude Response: }\quad &amp;\left\{\begin{split}&amp;\left|\tilde{H}(j\omega)\right| = \frac{K_{\mathrm{i}}}{\omega} \newline &amp;\left|\tilde{H}(j\omega)\right|_{\mbox{dB}} = 20\log_{10}(K_{\mathrm{i}}) - 20\log_{10}(\omega)\ \mbox{dB}\end{split} \right.<br>\newline<br>&amp;\mbox{Phase Response: }\quad &amp;\angle\tilde{H}(j\omega) = -90^{\circ}<br>\end{split}<br>\]</p>
<p><img src="9.png"></p>
</li>
<li><p>Bode plots of zero factor: </p>
<p>\[<br>\begin{split}<br>&amp;\tilde{H}(s) = \frac{s}{z_m} + 1<br>\newline<br>&amp;\mbox{Frequency Response: }\quad &amp;\tilde{H}(j\omega) = j\frac{\omega}{z_m} + 1<br>\newline<br>&amp;\mbox{Magnitude Response: }\quad &amp;\left\{\begin{split}&amp;\left|\tilde{H}(j\omega)\right| = \sqrt{\omega^2 / z_m^2 + 1} \newline &amp;\left|\tilde{H}(j\omega)\right|_{\mbox{dB}} = 20\log_{10}\left(\sqrt{\omega^2 / z_m^2 + 1}\right) \ \mbox{dB}\newline &amp;\omega &lt;&lt; z_m \quad \left|\tilde{H}(j\omega)\right|_{\mbox{dB}} \rightarrow 0 \newline &amp;\omega &gt;&gt; z_m \quad \left|\tilde{H}(j\omega)\right|_{\mbox{dB}} \rightarrow 20\log_{10}\left(\frac{\omega}{z_m}\right)\end{split}\right.<br>\newline<br>&amp;\mbox{3dB Corner Frequency: }\quad &amp;\omega = z_m\ \mbox{rad/s}<br>\newline<br>&amp;\mbox{LO-Frequency Phase: }\quad &amp;\lim_{\omega \rightarrow 0}\tan^{-1}\left(\frac{\omega}{z_m}\right) = 0^{\circ}<br>\newline<br>&amp;\mbox{HI-Frequency Phase: }\quad &amp;\lim_{\omega \rightarrow \infty}\tan^{-1}\left(\frac{\omega}{z_m}\right) = 90^{\circ}<br>\end{split}<br>\]</p>
<p><img src="10.png"></p>
</li>
<li><p>Bode plots of pole factor: </p>
<p>\[<br>\begin{split}<br>&amp;\tilde{H}(s) = \left( \frac{s}{p_n} + 1 \right)^{-1}<br>\newline<br>&amp;\mbox{Frequency Response: }\quad &amp;\tilde{H}(j\omega) = \left(j\frac{\omega}{p_n} + 1\right)^{-1} = \frac{1}{j\omega / p_n + 1}<br>\newline<br>&amp;\mbox{Magnitude Response: }\quad &amp;\left\{\begin{split}&amp;\left|\tilde{H}(j\omega)\right| = \frac{1}{\sqrt{\omega^2 / p_n^2 + 1}} \newline &amp;\left|\tilde{H}(j\omega)\right|_{\mbox{dB}} = -20\log_{10}\left(\sqrt{\omega^2 / p_n^2 + 1}\right) \ \mbox{dB}\newline &amp;\omega &lt;&lt; p_n \quad \left|\tilde{H}(j\omega)\right|_{\mbox{dB}} \rightarrow 0 \newline &amp;\omega &gt;&gt; p_n \quad \left|\tilde{H}(j\omega)\right|_{\mbox{dB}} \rightarrow -20\log_{10}\left(\frac{\omega}{p_n}\right)\end{split}\right.<br>\newline<br>&amp;\mbox{3dB Corner Frequency: }\quad &amp;\omega = p_n\ \mbox{rad/s}<br>\newline<br>&amp;\mbox{LO-Frequency Phase: }\quad &amp;\lim_{\omega \rightarrow 0}-\tan^{-1}\left(\frac{\omega}{p_n}\right) = 0^{\circ}<br>\newline<br>&amp;\mbox{HI-Frequency Phase: }\quad &amp;\lim_{\omega \rightarrow \infty}-\tan^{-1}\left(\frac{\omega}{p_n}\right) = -90^{\circ}<br>\end{split}<br>\]</p>
<p><img src="11.png"></p>
</li>
<li><p>Bode plots of underdamped 2<sup>nd</sup>-order factor: </p>
<p>\[<br>\begin{split}<br>&amp;\tilde{H}(s) = \frac{\omega_{n}^2}{s^2 + 2 \zeta \omega_n s + \omega_n^2};\quad 0\leq \zeta \leq 1<br>\newline<br>&amp;\mbox{Frequency Response: }\quad &amp;\tilde{H}(j\omega) = \left(\frac{1}{j\omega / \omega_n + 1}\right)^2<br>\newline<br>&amp;\mbox{Magnitude Response: }\quad &amp;\left\{\begin{split}&amp;\left|\tilde{H}(j\omega)\right|_{\mbox{dB}} = -40\log_{10}\left(\sqrt{\omega^2 / \omega_n^2 + 1}\right) \ \mbox{dB}\newline &amp;\omega &lt;&lt; \omega_n \quad \left|\tilde{H}(j\omega)\right|_{\mbox{dB}} \rightarrow 0 \newline &amp;\omega &gt;&gt; \omega_n \quad \left|\tilde{H}(j\omega)\right|_{\mbox{dB}} \rightarrow -40\log_{10}\left(\frac{\omega}{\omega_n}\right)\end{split}\right.<br>\newline<br>&amp;\mbox{6dB Corner Frequency: }\quad &amp;\omega = \omega_n\ \mbox{rad/s}<br>\newline<br>&amp;\mbox{LO-Frequency Phase: }\quad &amp;\lim_{\omega \rightarrow 0}-2\tan^{-1}\left(\frac{\omega}{\omega_n}\right) = 0^{\circ}<br>\newline<br>&amp;\mbox{HI-Frequency Phase: }\quad &amp;\lim_{\omega \rightarrow \infty}-2\tan^{-1}\left(\frac{\omega}{\omega_n}\right) = -180^{\circ}<br>\end{split}<br>\]</p>
<p><img src="12.png"></p>
</li>
</ol>
<h2 id="直线伯德图的渐进分析"><a href="#直线伯德图的渐进分析" class="headerlink" title="直线伯德图的渐进分析"></a>直线伯德图的渐进分析</h2><ul>
<li><p>Asymptotic PHASE of Phase Plot [\(\angle \tilde{H}(j\omega)\)]</p>
<p>High frequency:</p>
<p>\[<br>\lim_{\omega \rightarrow \infty}\angle \tilde{H}(j\omega) = [\mbox{number of poles}\ -\ \mbox{number of zeros}] \times (-90^{\circ})<br>\]</p>
<p>Low frequency:</p>
<p>\[<br>\lim_{\omega \rightarrow 0}\angle \tilde{H}(j\omega) = [\mbox{number of integrators}\ -\ \mbox{number of differentiators}] \times (-90^{\circ})<br>\]</p>
</li>
<li><p>Asymptotic SLOPE of Magnitude Plot [\(\left| \tilde{H}(j\omega) \right|_{\mbox{dB}}\)]</p>
<p>High frequency:</p>
<p>\[<br>\lim_{\omega \rightarrow \infty}[\mbox{slope of }\left| \tilde{H}(j\omega) \right|_{\mbox{dB}}] = [\mbox{number of poles}\ -\ \mbox{number of zeros}] \times (-20\ \mbox{dB/decade})<br>\]</p>
<p>Low frequency:</p>
<p>\[<br>\lim_{\omega \rightarrow 0}[\mbox{slope of }\left| \tilde{H}(j\omega) \right|_{\mbox{dB}}] = [\mbox{number of integrators}\ -\ \mbox{number of differentiators}] \times (-20\ \mbox{dB/decade})<br>\]</p>
</li>
</ul>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>信号与系统</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成-知识点整理（下）</title>
    <url>/posts/2021-04-09-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Single-Cycle-Processor-Design"><a href="#Single-Cycle-Processor-Design" class="headerlink" title="Single Cycle Processor Design"></a>Single Cycle Processor Design</h1><h2 id="Architecture-vs-Microarchitecture"><a href="#Architecture-vs-Microarchitecture" class="headerlink" title="Architecture vs Microarchitecture"></a>Architecture vs Microarchitecture</h2><p><strong>Architecture</strong>: programmer’s view of computer</p>
<ul>
<li>Defined by instructions &amp; operand locations</li>
<li>Assembly language: human-readable format of instructions</li>
<li>Machine language: computer-readable format (1’s and 0’s)</li>
<li>Assembly language → Machine language conversion is done by the assembler</li>
</ul>
<p><strong>Microarchitecture</strong>: digital designer’s view of the computer</p>
<ul>
<li>How to implement an architecture in hardware</li>
<li>Different designs possible to execute the same code</li>
</ul>
<h2 id="Architecture-Instruction-Formats"><a href="#Architecture-Instruction-Formats" class="headerlink" title="Architecture: Instruction Formats"></a>Architecture: Instruction Formats</h2><h3 id="Data-processing-DP-Instruction-Formats"><a href="#Data-processing-DP-Instruction-Formats" class="headerlink" title="Data-processing (DP) Instruction Formats"></a>Data-processing (DP) Instruction Formats</h3><h4 id="DP-Register-Operand2-Format"><a href="#DP-Register-Operand2-Format" class="headerlink" title="DP Register Operand2 Format"></a>DP Register Operand2 Format</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OP&#123;S&#125; Rd, Rn, Rm</span><br><span class="line">OP =&gt; ADD, SUB, AND, ORR</span><br></pre></td></tr></table></figure>

<p><img src="1.png"></p>
<p>Operands</p>
<ul>
<li>Rn: first source register</li>
<li>Rm: second source register</li>
<li>Rd: destination register</li>
</ul>
<p>Control fields</p>
<ul>
<li>op: the operation code or opcode<ul>
<li>op = 0b00 for data-processing (DP) instructions</li>
</ul>
</li>
<li>funct is composed of cmd, I-bit, and S-bit<ul>
<li>cmd = 0b0000 for <code>AND</code>, 0b0010 for <code>SUB</code>, 0b0100 for <code>ADD</code>, 0b1100 for <code>ORR</code></li>
<li>I = immediate = 0b0 for register Operand2</li>
<li>S = set flags = 0b1 if the suffix S is specified, for example, <code>ADDS</code>, <code>ANDS</code></li>
</ul>
</li>
<li>M = 0b0</li>
</ul>
<h4 id="DP-Immediate-Operand2-Format"><a href="#DP-Immediate-Operand2-Format" class="headerlink" title="DP Immediate Operand2 Format"></a>DP Immediate Operand2 Format</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OP&#123;S&#125; Rd, Rn, #imm8</span><br><span class="line">OP =&gt; ADD, SUB, AND, ORR</span><br></pre></td></tr></table></figure>

<p><img src="2.png"></p>
<p>Operands</p>
<ul>
<li>Rn: first source register</li>
<li>imm8: 8-bit unsigned immediate</li>
<li>Rd: destination register</li>
</ul>
<p>Control fields</p>
<ul>
<li>op: the operation code or opcode<ul>
<li>op = 0b00 for data-processing (DP) instructions</li>
</ul>
</li>
<li>funct is composed of cmd, I-bit, and S-bit<ul>
<li>cmd = 0b0000 for <code>AND</code>, 0b0010 for <code>SUB</code>, 0b0100 for <code>ADD</code>, 0b1100 for <code>ORR</code></li>
<li>I = immediate = 0b1 for immediate Operand2</li>
<li>S = set flags = 0b1 if the suffix S is specified, for example, <code>ADDS</code>, <code>ANDS</code></li>
</ul>
</li>
</ul>
<h4 id="DP-Operations-cmd"><a href="#DP-Operations-cmd" class="headerlink" title="DP Operations: cmd"></a>DP Operations: cmd</h4><table>
<thead>
<tr>
<th>cmd</th>
<th>Instruction</th>
<th>Operation</th>
</tr>
</thead>
<tbody><tr>
<td>0000</td>
<td>AND</td>
<td>Logical AND</td>
</tr>
<tr>
<td>0001</td>
<td>EOR</td>
<td>Logical Exclusive OR</td>
</tr>
<tr>
<td>0010</td>
<td>SUB</td>
<td>Subtract</td>
</tr>
<tr>
<td>0011</td>
<td>RSB</td>
<td>Reverse Subtract</td>
</tr>
<tr>
<td>0100</td>
<td>ADD</td>
<td>Add</td>
</tr>
<tr>
<td>0101</td>
<td>ADC</td>
<td>Add with Carry</td>
</tr>
<tr>
<td>0110</td>
<td>SBC</td>
<td>Subtract with Carry</td>
</tr>
<tr>
<td>0111</td>
<td>RSC</td>
<td>Reverse Subtract with Carry</td>
</tr>
<tr>
<td>1000</td>
<td>TST</td>
<td>Test Update flags after AND</td>
</tr>
<tr>
<td>1001</td>
<td>TEQ</td>
<td>Test Equivalence Update flags after EOR</td>
</tr>
<tr>
<td>1010</td>
<td>CMP</td>
<td>Compare Update flags after SUB</td>
</tr>
<tr>
<td>1011</td>
<td>CMN</td>
<td>Compare Negated Update flags after ADD</td>
</tr>
<tr>
<td>1100</td>
<td>ORR</td>
<td>Logical OR</td>
</tr>
<tr>
<td>1101</td>
<td>MOV</td>
<td>Move</td>
</tr>
<tr>
<td>1110</td>
<td>BIC</td>
<td>Bit Clear</td>
</tr>
<tr>
<td>1111</td>
<td>MVN</td>
<td>Move Not</td>
</tr>
</tbody></table>
<p>Note: Multiplication is not one of the 16 ALU operations, though it is considered a DP operation. Multiplication is done in a separate multiplication unit and is a bit different from other DP operations.</p>
<h4 id="Multiply-Instruction-Format"><a href="#Multiply-Instruction-Format" class="headerlink" title="Multiply Instruction Format"></a>Multiply Instruction Format</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MUL Rd, Rm, Rs</span><br><span class="line">MLA Rd, Rm, Rs, Rn</span><br></pre></td></tr></table></figure>

<p><img src="3.png"></p>
<ul>
<li><p>cmd = 0b0000 for <code>MUL</code>, 0b0001 for <code>MLA</code></p>
</li>
<li><p>M = </p>
<ul>
<li>0b0 → usual DP instructions such as <code>ADD</code>, <code>AND</code>,..</li>
<li>0b1 → <code>MUL</code> and <code>MLA</code></li>
</ul>
</li>
<li><p><code>MUL</code> does not use Rn</p>
</li>
<li><p>Assume <code>MUL</code> and <code>MLA</code> does not set any flags (S bit is 0b0) and cannot take immediate operands (I bit is 0b0)</p>
</li>
</ul>
<h3 id="Memory-Instruction-Format"><a href="#Memory-Instruction-Format" class="headerlink" title="Memory Instruction Format"></a>Memory Instruction Format</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OP Rd, [Rn, #±imm8]</span><br><span class="line">OP =&gt; LDR, STR</span><br></pre></td></tr></table></figure>

<p><img src="4.png"></p>
<p>Encodes <code>LDR</code>, <code>STR</code></p>
<ul>
<li>op: 0b01 for memory instructions</li>
<li>funct: 6 control bits</li>
<li>U: Add<ul>
<li>0b1 → offset is positive, i.e., effective address = Rn + imm8</li>
<li>0b0 → the offset is negative, i.e., effective address = Rn – imm8</li>
</ul>
</li>
<li>L = 0b1 for load; 0b0 for store</li>
<li>P: Preindex</li>
<li>W: Writeback</li>
<li>PW = 0b00 → postindex  0b01 → unsupported  0b10 → offset  0b11 → preindex</li>
<li>Rn: base register</li>
<li>Rd: destination (load), source (store)</li>
<li>imm8: magnitude of offset</li>
</ul>
<h3 id="Branch-Instruction-Format"><a href="#Branch-Instruction-Format" class="headerlink" title="Branch Instruction Format"></a>Branch Instruction Format</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">B&#123;cond&#125; LABEL</span><br><span class="line">LABEL encoded as #±imm8</span><br></pre></td></tr></table></figure>

<p><img src="5.png"></p>
<p>Encodes <code>B&#123;cond&#125;</code></p>
<ul>
<li>cond: condition to be true for the branch to be taken</li>
<li>op = 0b10 for branch instructions</li>
<li>imm8: 8-bit immediate encoding Branch Target Address (BTA)<ul>
<li>BTA = address corresponding to LABEL = Next PC when branch taken</li>
<li>imm8 = # of bytes BTA is away from current PC+4</li>
</ul>
</li>
<li>U: add<ul>
<li>0b1 → BTA = PC+4+imm8; 0b0 → BTA = PC+4-imm8</li>
</ul>
</li>
</ul>
<h4 id="Branch-Condition-Codes-cond"><a href="#Branch-Condition-Codes-cond" class="headerlink" title="Branch Condition Codes (cond)"></a>Branch Condition Codes (cond)</h4><table>
<thead>
<tr>
<th>cond</th>
<th>Mnemonic</th>
<th>Name</th>
</tr>
</thead>
<tbody><tr>
<td>0000</td>
<td>EQ</td>
<td>Equal</td>
</tr>
<tr>
<td>0001</td>
<td>NE</td>
<td>Not equal</td>
</tr>
<tr>
<td>0010</td>
<td>CS / HS</td>
<td>Carry set / Unsigned higher or same</td>
</tr>
<tr>
<td>0011</td>
<td>CC / LO</td>
<td>Carry clear / Unsigned lower</td>
</tr>
<tr>
<td>0100</td>
<td>MI</td>
<td>Minus / Negative</td>
</tr>
<tr>
<td>0101</td>
<td>PL</td>
<td>Plus / Positive of zero</td>
</tr>
<tr>
<td>0110</td>
<td>VS</td>
<td>Overflow / Overflow set</td>
</tr>
<tr>
<td>0111</td>
<td>VC</td>
<td>No overflow / Overflow clear</td>
</tr>
<tr>
<td>1000</td>
<td>HI</td>
<td>Unsigned higher</td>
</tr>
<tr>
<td>1001</td>
<td>LS</td>
<td>Unsigned lower or same</td>
</tr>
<tr>
<td>1010</td>
<td>GE</td>
<td>Signed greater than or equal</td>
</tr>
<tr>
<td>1011</td>
<td>LT</td>
<td>Signed less than</td>
</tr>
<tr>
<td>1100</td>
<td>GT</td>
<td>Signed greater than</td>
</tr>
<tr>
<td>1101</td>
<td>LE</td>
<td>Signed less than or equal</td>
</tr>
<tr>
<td>1110</td>
<td>AL (or none)</td>
<td>Always / unconditional</td>
</tr>
</tbody></table>
<h2 id="Microarchitecture"><a href="#Microarchitecture" class="headerlink" title="Microarchitecture"></a>Microarchitecture</h2><p>Datapath &amp; Control Unit Design，太麻烦了，懒得整理。</p>
<p><img src="6.png"></p>
<h3 id="Single-Cycle-Design-Summary"><a href="#Single-Cycle-Design-Summary" class="headerlink" title="Single Cycle Design Summary"></a>Single Cycle Design Summary</h3><p><strong>Single-cycle</strong> - fetch, decode and execute each instruction in one clock cycle</p>
<ul>
<li>(+) simple</li>
<li>(–) no datapath resource can be used more than once per instruction, so some must be duplicated<ul>
<li>separate memories for instruction and data</li>
<li>2 adders/ALUs</li>
</ul>
</li>
<li>(–) cycle time limited by longest instruction (LDR)</li>
</ul>
<h1 id="Cache-Memory-Principles"><a href="#Cache-Memory-Principles" class="headerlink" title="Cache Memory Principles"></a>Cache Memory Principles</h1><h2 id="Memory-Hierarchy"><a href="#Memory-Hierarchy" class="headerlink" title="Memory Hierarchy"></a>Memory Hierarchy</h2><table>
<thead>
<tr>
<th align="left">Memory</th>
<th align="center">Size</th>
<th align="center">Cost/GB, Speed</th>
</tr>
</thead>
<tbody><tr>
<td align="left">M0  registers in CPU</td>
<td align="center">*</td>
<td align="center">*****</td>
</tr>
<tr>
<td align="left">M1  cache memories (SRAM)</td>
<td align="center">**</td>
<td align="center">****</td>
</tr>
<tr>
<td align="left">M2  main memories (DRAM)</td>
<td align="center">***</td>
<td align="center">***</td>
</tr>
<tr>
<td align="left">M3  disk storage</td>
<td align="center">****</td>
<td align="center">**</td>
</tr>
<tr>
<td align="left">M4  tape units/optical disks, etc.</td>
<td align="center">*****</td>
<td align="center">*</td>
</tr>
</tbody></table>
<p>Basic idea:</p>
<ul>
<li>Each level holds the most frequently accessed data from the immediate higher level</li>
<li>Reduces the effect of lower speed of the higher level without increasing the overall cost significantly</li>
</ul>
<h2 id="Memory-Capacity-Planning"><a href="#Memory-Capacity-Planning" class="headerlink" title="Memory Capacity Planning"></a>Memory Capacity Planning</h2><p>When a memory M<sub>i</sub> is accessed and if the desired word is found, it is referred to as a <em>hit</em>, otherwise <em>miss</em>. The <strong>hit ratio</strong> (h<sub>i</sub>) is the probability that a word/information will be found when accessed in M<sub>i</sub>. Miss ratio is 1-h<sub>i</sub>. The hit ratios at successive levels are a function of memory capacities, management policies, and program behavior. h<sub>0</sub>=0 and h<sub>n</sub>=1. This means that the CPU always access M<sub>1</sub> first and access to the outermost level is always a hit.</p>
<p>Access frequency at a level i is defined as f<sub>i</sub> = (1 - h<sub>1</sub>)(1 - h<sub>2</sub>)…(1 - h<sub>i-1</sub>)h<sub>i</sub>. Note that f<sub>1</sub> + f<sub>2</sub> + … + f<sub>n</sub> = 1 and f<sub>1</sub> = h<sub>1</sub>. Due to the locality property, the access frequencies decrease rapidly from the lower levels, i.e., access freq at level i is greater than i+1. This means that the inner levels are accessed more often than the outer levels.</p>
<p>Effective Access Time is defined as T<sub>eff</sub> = f<sub>1</sub>t<sub>1</sub>+ f<sub>2</sub>t<sub>2</sub>+… f<sub>n</sub>t<sub>n</sub> where t<sub>i</sub> is the access time at level i.</p>
<p>The total cost of a memory hierarchy is estimated as C<sub>total</sub> = c<sub>1</sub>s<sub>1</sub>+c<sub>2</sub>s<sub>2</sub>+…+c<sub>n</sub>s<sub>n</sub> where c<sub>i</sub> is the cost/MB and s<sub>i</sub> is the size (in MB) at level i.</p>
<p>Hierarchy optimization involves minimizing T<sub>eff</sub> given C<sub>total</sub> &lt; C<sub>max</sub> or C<sub>total</sub> given T<sub>eff</sub> &lt; T<sub>max</sub>.</p>
<p>The optimal design should result in a T<sub>eff</sub> close to t<sub>1</sub> and a total cost close to c<sub>n</sub>.</p>
<h2 id="Cache-Working-Principle"><a href="#Cache-Working-Principle" class="headerlink" title="Cache Working Principle"></a>Cache Working Principle</h2><p><img src="7.png"></p>
<p><strong>Read</strong></p>
<ul>
<li>When a read request is received from CPU, the contents of a block of memory words containing the location specified are transferred to the cache.<ul>
<li>Block is also called cache line, typically ~64 bytes</li>
<li>Where to place the incoming block in the cache is decided by the mapping function</li>
</ul>
</li>
<li>Subsequently, when the program asks for any of the locations from this block, the desired contents are read directly from cache.<ul>
<li>Checking if the required data/block is present in the cache is performed by the cache controller</li>
<li>If yes, a cache hit is said to occur</li>
</ul>
</li>
<li>When a block occupying cache is not referenced for a long time, it is pushed back to the MM to make space for another block.<ul>
<li>Which block to replace is decided by replacement algorithms</li>
</ul>
</li>
<li>When a read miss happens, the block containing the word is loaded into the cache and then the desired word is sent to the CPU.</li>
</ul>
<p><strong>Write</strong></p>
<ul>
<li>Write-through<ul>
<li>In this case, the cache and MM locations are simultaneously updated</li>
<li>Simple, but results in unnecessary write operations in MM when cache is updated several times</li>
</ul>
</li>
<li>Write-back<ul>
<li>Update only the cache location and mark it as updated with an associated flag bit, often called as dirty or modified bit</li>
<li>The MM word is updated later, when the block containing the word is removed from the cache by a replacement algorithm</li>
<li>May also lead to unnecessary write operations – when a cache block is written back to the memory, all the words of the block are written back, even if only a single word in that block was modified when it was in the cache</li>
</ul>
</li>
</ul>
<h2 id="Mapping-Techniques"><a href="#Mapping-Techniques" class="headerlink" title="Mapping Techniques"></a>Mapping Techniques</h2><p>The following example is used to illustrate the mapping algorithms:</p>
<ul>
<li>The cache consists of 128 blocks of 16 words each; a total of 2048 (2K) words</li>
<li>Assume that the MM is addressable by a 16-bit word address (not byte address, for simplicity)</li>
<li>MM has 64K words, which we will view as 4K blocks of 16 words each</li>
</ul>
<h3 id="Direct-Mapping"><a href="#Direct-Mapping" class="headerlink" title="Direct Mapping"></a>Direct Mapping</h3><p><img src="8.png"></p>
<p>Direct mapping: block j of MM -&gt; block j modulo 128 of Cache.</p>
<p><img src="9.png"></p>
<p>16-bit address</p>
<ul>
<li>lower order -&gt; select a word within the block</li>
<li>middle order -&gt; block number in the cache</li>
<li>high order -&gt; which of the 32blocks (4K/128 = 32 = 2<sup>5</sup>) from MM is residing currently in the cache block</li>
</ul>
<p>The tag field can be used to determine whether the block at this location is the required block – the tag field is unique for each block from MM which can be mapped to the same block in the cache. Note that even when the cache is not full, contention<br>may arise for a location. In this case, the replacement algorithm is trivial (a main memory block is mapped to a unique cache block).</p>
<p><img src="10.png"></p>
<p>Note: Word access within the block is not shown.</p>
<h3 id="Associative-Mapping"><a href="#Associative-Mapping" class="headerlink" title="Associative Mapping"></a>Associative Mapping</h3><p>In this technique, a block of MM can be placed anywhere in the cache.</p>
<p><img src="11.png"></p>
<p>From the CPU generated address, the higher order 12 bits are stored along with the block in the cache (which makes sense as each cache block can be from any of the 4096 = 2<sup>12</sup> MM blocks).</p>
<p>When the request arrives, the tag field is compared for all the blocks in the cache to see if there is a match.</p>
<p>This technique gives a complete freedom in choosing where in the cache a particular MM block is placed. Cache space is utilized more efficiently.</p>
<p>Disadvantage: search 128 blocks to match for a single tag.</p>
<h3 id="Set-Associative-Mapping"><a href="#Set-Associative-Mapping" class="headerlink" title="Set-Associative Mapping"></a>Set-Associative Mapping</h3><p>This is a combination of previous techniques.</p>
<p>Blocks of cache are grouped into sets, and the mapping allows a block of the MM to reside in any block within a specific set (there is associativity within a set).</p>
<ul>
<li>The contention problem of the direct method is eased by having a few choices for block placement.</li>
<li>The hardware cost is reduced and speed is increased by decreasing the size of the associative search procedure.</li>
<li>If there are N blocks per set, the memory is called N-way set associative.</li>
</ul>
<p><img src="12.png"></p>
<p>Suppose if we allow two blocks per set in the cache. The memory blocks 0,64,128,…,4032 map into cache set 0, and they can occupy either of the two block positions within the set.</p>
<p><img src="13.png"></p>
<p>With 128 cache blocks and 2 blocks per set, we have 64 sets -&gt; we need 6 bits to identify the right set and 4 bits for a word, leaving 6 bits for the Tag field (which makes sense as each cache block can be from any of the 4096/64 = 64 = 2<sup>6</sup> MM blocks).</p>
<p><img src="14.png"></p>
<p>Note: Word access within the block is not shown.</p>
<h2 id="Replacement-Algorithms"><a href="#Replacement-Algorithms" class="headerlink" title="Replacement Algorithms"></a>Replacement Algorithms</h2><p>In the case of associative and set-associative mapping, there is some flexibility in deciding which block should be thrown out if a new block is brought into the cache.</p>
<ul>
<li>First-In-First-Out<ul>
<li>Replace the oldest block in the memory</li>
</ul>
</li>
<li>Least Recently Used (LRU)<ul>
<li>Replace the block that has not been referenced for a long time</li>
</ul>
</li>
<li>Optimal Algorithm (Ideal - assumes knowing the future)<ul>
<li>Replace the block that will not be used for a longest period of time</li>
<li>Cannot be implemented in practice, used only for analysis purpose</li>
</ul>
</li>
</ul>
<h2 id="Multilevel-Caches"><a href="#Multilevel-Caches" class="headerlink" title="Multilevel Caches"></a>Multilevel Caches</h2><p>Larger caches have lower miss rates, but longer access times.</p>
<p>Most modern PCs have L1, L2, and L3 cache.</p>
<h1 id="Pipelining-Basics"><a href="#Pipelining-Basics" class="headerlink" title="Pipelining Basics"></a>Pipelining Basics</h1><p>Single Cycle Disadvantages:</p>
<ul>
<li>Uses the clock cycle inefficiently – the clock cycle must be timed to accommodate the slowest instruction. It is especially problematic for more complex instructions like floating point multiply</li>
<li>May be wasteful of area since some functional units (e.g., adders) must be duplicated since they can not be shared during a clock cycle</li>
</ul>
<p><strong>Pipelining</strong> – most modern processors are pipelined for performance.</p>
<p>Pipelines are used to allow overlapping execution of multiple instructions with the same circuitry. The circuitry is usually divided up into stages and each stage processes a specific part of one instruction at a time, passing the partial results to the next stage.</p>
<p>Under ideal conditions and with a large number of instructions, the speedup from pipelining is approximately equal to the number of pipe stages.</p>
<p>Pipelining doesn’t help latency of single task, it helps throughput of entire workload.</p>
<p>Potential speedup: once the pipeline is full, one instruction completes every cycle, at a higher clock frequency.</p>
<p>Pipeline rate limited by slowest pipeline stage.</p>
<p><strong>The Five Stages of Instruction</strong></p>
<ol>
<li>Fetch: Instruction Fetch and Update PC</li>
<li>Decode: Registers Fetch and Instruction Decode</li>
<li>Execute: Execute DP-type; calculate memory address</li>
<li>Memory: Read/write the data from/to the Data Memory</li>
<li>WriteBack: Write the result data into the register file</li>
</ol>
<p><strong>Pipelined Processor</strong></p>
<p><img src="15.png"></p>
<p><img src="16.png"></p>
<p><img src="17.png"></p>
<h2 id="Pipeline-Hazards"><a href="#Pipeline-Hazards" class="headerlink" title="Pipeline Hazards"></a>Pipeline Hazards</h2><p><strong>Structural hazards</strong>: attempt to use the same resource by two different instructions at the same time</p>
<p><strong>Data hazards</strong>: attempt to use data before it is ready</p>
<ul>
<li>Insert NOPs in code at compile time</li>
<li>Rearrange code at compile time</li>
<li>Stall the processor at run time</li>
<li>Forward data at run time</li>
</ul>
<p><strong>Control hazards</strong>: attempt to make a decision about program control flow before the condition has been evaluated and the new PC target address calculated</p>
<ul>
<li><p>Stall until branch decision and BTA are available</p>
</li>
<li><p>Early BTA - move decision point as early in the pipeline as possible, thereby reducing the  number of stall cycles</p>
</li>
<li><p>Branch prediction</p>
<p>……</p>
</li>
</ul>
<p>Control hazards occur less frequently than data hazards, but are (much) harder to deal with than data hazards.</p>
<hr>
<p>整理自 NUS CG2028 课件，难免有<strong>错漏</strong>并存在<strong>简化</strong>的地方，仅作参考。</p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>Computer Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>P，NP，NP 完全</title>
    <url>/posts/2021-04-14-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="归约"><a href="#归约" class="headerlink" title="归约"></a>归约</h1><p>考虑这么两个问题，A 和 B。如果 A 可通过下述步骤求得解：</p>
<p>输入：A 的一个实例，α</p>
<ol>
<li>将 α 转换为 B 的一个实例，β</li>
<li>解决 β，获得一个解</li>
<li>根据 β 的解，获得 α 的解</li>
</ol>
<p>那么，A 可被归约为 B。</p>
<p><img src="1.png"></p>
<p>假设对于问题 A 的一个大小为 n 的实例 α：</p>
<ul>
<li>问题 B 的实例 β 可以在 p(n) 时间内被构建出来</li>
<li>问题 A 对于 α 的解可经由问题 B 对于 β 的解在 p(n) 的时间内得出</li>
</ul>
<p>那么这个归约可以说是 p(n) 时间归约。</p>
<p>假如说 p(n) = O(n<sup>c</sup>) 是一个多项式函数，那么这个归约就是多项式时间归约，写作 A ≤<sub>P</sub> B。</p>
<p>如果问题 B 具有一个多项式时间算法，那么 A 也有！如果 B 能够被轻松解决，那么 A 也能！</p>
<h1 id="判定问题"><a href="#判定问题" class="headerlink" title="判定问题"></a>判定问题</h1><p>判定问题指的是输出为“是”或“否”的问题。</p>
<p><img src="2.png"></p>
<blockquote>
<p>Decision vs Optimization</p>
<ul>
<li>Decision Problem: Given a directed graph <em>G</em> with two given vertices <em>u</em> and <em>v</em>, is there a path from <em>u</em> to <em>v</em> of length ≤ <em>k</em>?</li>
<li>Optimization Problem: Given a directed graph <em>G</em> with two given vertices <em>u</em> and <em>v</em>, what is the length of the shortest path from <em>u</em> to <em>v</em>?</li>
</ul>
</blockquote>
<p>最佳化问题都可被转换为判定问题。</p>
<p>判定问题可被归约为最佳化问题。</p>
<h2 id="判定问题之间的归约"><a href="#判定问题之间的归约" class="headerlink" title="判定问题之间的归约"></a>判定问题之间的归约</h2><p>给定两个判定问题 A 和 B，如果满足：</p>
<ul>
<li>α 是 YES 实例当且仅当 β 也是 YES 实例</li>
<li>由 α 至 β 的转换的花费时间是关于 α 大小的多项式</li>
</ul>
<p>那么存在 A 至 B 的多项式时间归约，A ≤<sub>P</sub> B。</p>
<p><img src="3.png"></p>
<h1 id="P-问题和-NP-问题"><a href="#P-问题和-NP-问题" class="headerlink" title="P 问题和 NP 问题"></a>P 问题和 NP 问题</h1><p><strong>P</strong> 代表 “<strong>P</strong>olynomial（多项式）”。</p>
<p>P 问题囊括了所有可以在多项式时间内解决的判定问题。</p>
<p><strong>NP</strong> 代表 “<strong>N</strong>on-deterministic（非确定性）<strong>P</strong>olynomial（多项式）”。</p>
<p>NP 问题指的是具有运行时间为多项式时间的验证器（verifier）的，或者说能在多项式时间内验证解的正确性的一类判定问题。</p>
<p>↑ 非严谨的定义 ↑</p>
<p><strong>P/NP 问题</strong>：P 和 NP 相等吗？¯\(°_o)/¯</p>
<h1 id="NP-完全问题"><a href="#NP-完全问题" class="headerlink" title="NP 完全问题"></a>NP 完全问题</h1><p>如果问题 X 是一个 NP 问题，且对于所有 A ∈ NP，满足 A ≤<sub>P</sub> X，那么 X 是一个 NP 完全（NP-complete）问题。</p>
<p><img src="4.png"></p>
<p>证明问题 X 是一个 NP 完全问题：</p>
<ol>
<li>证明 X 是 NP 问题</li>
<li>选择一个已知的 NP 完全问题 A</li>
<li>证明 A ≤<sub>P</sub> X</li>
</ol>
<p><img src="5.png"></p>
<p>除非 P = NP，否则 NP 完全问题没有多项式时间算法。</p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>信号与系统学习笔记#7</title>
    <url>/posts/2021-04-21-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<h1 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h1><p>采样（sampling）是将信号从连续时间域上的模拟信号转换到离散时间域上的离散信号的过程。</p>
<p>对一个模拟信号\(x(t)\)进行采样时，取该信号每隔\(T_S\)秒的值，得到一个离散时间序列，\(x_n = x(T_S)\)。</p>
<p>将\(x(t)\)与一冲激串（impulse train）相乘，可得：</p>
<p>\[<br>x_S(t) = x(t)\sum_n \delta (t-nT_S) = \sum_n x(nT_S)\delta (t - nT_S) = \sum_n x_n\delta (t-nT_S)<br>\]</p>
<p>这一过程被称为 impulse sampling。</p>
<p><img src="1.png"></p>
<h1 id="理想的滤波器"><a href="#理想的滤波器" class="headerlink" title="理想的滤波器"></a>理想的滤波器</h1><p>滤波器（filter）的功能是去除信号中不需要的频率成分以及增强需要的频率成分。</p>
<p>对于连续时间 LTI 系统，输出信号的频谱是由输入信号的频谱与系统的频率响应相乘而得的。因此，滤波器本质上是表现出某种频率选择性行为的系统。</p>
<p>通过滤波器的频带被称为通带（pass-band），而被滤波器拒绝的频带被称为阻带（stop-band）。</p>
<p>以下是两个理想滤波器的例子。</p>
<h2 id="Ideal-Low-Pass-Filter-LPF"><a href="#Ideal-Low-Pass-Filter-LPF" class="headerlink" title="Ideal Low-Pass Filter (LPF)"></a>Ideal Low-Pass Filter (LPF)</h2><p>\[<br>\begin{split}<br>&amp;\mbox{Frequency response: }\ H(f) = A \mathrm{rect}\left(\frac{f}{2B}\right)<br>\newline<br>&amp;\mbox{Impulse response: }\ h(t) = 2AB \mathrm{sinc} (2Bt)<br>\newline<br>&amp;\mbox{Cutoff frequency} = \mbox{Bandwidth} = B<br>\end{split}<br>\]</p>
<p><img src="2.png"></p>
<h2 id="Ideal-Band-Pass-Filter-BPF"><a href="#Ideal-Band-Pass-Filter-BPF" class="headerlink" title="Ideal Band-Pass Filter (BPF)"></a>Ideal Band-Pass Filter (BPF)</h2><p>\[<br>\begin{split}<br>&amp;\mbox{Frequency response: }\ H(f) = A \left[\mathrm{rect}\left(\frac{f+f_0}{B}\right) + \mathrm{rect}\left(\frac{f-f_0}{B}\right)\right]<br>\newline<br>&amp;\mbox{Impulse response: }\ h(t) = 2AB \mathrm{sinc} (Bt) \cos (2\pi f_0 t)<br>\newline<br>&amp;\mbox{Upper Cutoff frequency} =  f_u<br>\newline<br>&amp;\mbox{Lower Cutoff frequency} = f_l<br>\newline<br>&amp;\mbox{Center frequency} = f_0 = 0.5 (f_u + f_l)<br>\newline<br>&amp;\mbox{Bandwidth} = B = f_u - f_l<br>\end{split}<br>\]</p>
<p><img src="3.png"></p>
<h1 id="连续时间采样和信号重建"><a href="#连续时间采样和信号重建" class="headerlink" title="连续时间采样和信号重建"></a>连续时间采样和信号重建</h1><p><img src="4.png"></p>
<p><strong>采样</strong>（采样频率：\(f_S = \frac{1}{T_S} = 2 f_m\)）</p>
<p><img src="5.png"></p>
<p><strong>重建</strong></p>
<p><img src="6.png"></p>
<p>假如采样频率：\(f_S = \frac{1}{T_S} &lt; 2f_m\)</p>
<p>会造成频率混叠（frequency aliasing）。无法完美重建信号。</p>
<p><img src="7.png"></p>
<p>假如采样频率：\(f_S = \frac{1}{T_S} &gt; 2f_m\)</p>
<p>过采样（oversampling）。可完美重建信号。</p>
<p><img src="8.png"></p>
<p>关于这方面内容详见采样定理（Nyquist Sampling Theorem），此处不赘述。</p>
<h1 id="对于-Band-limited-Bandpass-Signal-在低于奈奎斯特采样率下的采样"><a href="#对于-Band-limited-Bandpass-Signal-在低于奈奎斯特采样率下的采样" class="headerlink" title="对于 Band-limited Bandpass Signal 在低于奈奎斯特采样率下的采样"></a>对于 Band-limited Bandpass Signal 在低于奈奎斯特采样率下的采样</h1><p>Suppose the spectrum \(X(f)\) of \(x(t)\) is as shown below:</p>
<p><img src="9.png"></p>
<ul>
<li>Nyquist rate: \(f_S \geq 2f_C + B\)</li>
<li>Is it possible to sample a bandpass signal below Nyquist rate and yet achieve perfect signal reconstruction? The answer is YES, if \(f_C \geq B\).<ul>
<li>Overlapping spectral images:<br>\(f_S = \frac{2f_C}{k};\ k = 1,\ 2,\dots ,\ \lfloor \frac{2f_C}{B}\rfloor\)</li>
<li>Un-aliased spectral images:<br>\(\frac{2f_C + B}{k+1} \leq f_S \leq \frac{2f_C - B}{k};\ k = 1,\ 2,\dots ,\ \lfloor \frac{2f_C-B}{2B}\rfloor\)</li>
</ul>
</li>
</ul>
<p>还有一些其它情况，具体问题具体分析。</p>
<hr>
<p>这门课到此结束！</p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>信号与系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity 实现安卓手机陀螺仪和触控移动视角功能</title>
    <url>/posts/2021-05-09-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近想着手做一个安卓上的 2D 的小游戏。那么首先我有一张背景的图片。但如果是单纯地把它放在底下，那看着就有点单调了。所以我就想，能否同时运用陀螺仪和手指的触控，来让这张背景图左右运动，来增加一些运动感和空间感？</p>
<p>先来看这个陀螺仪的部分。我想实现的功能是当手机在竖直方向上旋转时，背景画面左右运动。</p>
<p>通过查阅可以知道传感器坐标系：</p>
<p><img src="axis_device.png" alt="axis_device"></p>
<p>那么显然我希望能得到手机关于 y 轴旋转的数据。</p>
<p>翻阅文档发现，Unity 给我们提供了一个 <a href="https://docs.unity3d.com/ScriptReference/Gyroscope.html">Gyroscope</a> 类，它的属性中有一个 <a href="https://docs.unity3d.com/ScriptReference/Gyroscope-rotationRateUnbiased.html">rotationRateUnbiased</a>：</p>
<blockquote>
<p>Returns unbiased rotation rate as measured by the device’s gyroscope.</p>
<p>The rotation rate is given as a Vector3 representing the speed of rotation around each of the three axes in radians per second. This value has been processed to remove “bias” and give a more accurate measurement. The raw value reported by the gyroscope hardware can be obtained with the rotationRate property.</p>
</blockquote>
<p>简单来说这个属性就是一个关于每一轴旋转的角速度的 Vector3。</p>
<p>开始写代码：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GyroViewCtrl</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> enable = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> rotateFactor;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> maxRotateRate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ViewCtrlConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Input.gyro.enabled = <span class="literal">true</span>; <span class="comment">//启用手机上的陀螺仪</span></span><br><span class="line">        config = gameObject.GetComponent&lt;ViewCtrlConfig&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">float</span> gyroRotateRate = (enable?<span class="number">1</span>:<span class="number">0</span>) * Mathf.Clamp(rotateFactor * Input.gyro.rotationRateUnbiased.y, -maxRotateRate, maxRotateRate);</span><br><span class="line">        <span class="keyword">if</span> (((transform.position.x &gt;= config.rightPosLimit) &amp;&amp; (gyroRotateRate &gt; <span class="number">0</span>)) ||</span><br><span class="line">            ((transform.position.x &lt;= config.leftPosLimit) &amp;&amp; (gyroRotateRate &lt; <span class="number">0</span>))) <span class="keyword">return</span>; <span class="comment">//判断是否已经到了边界</span></span><br><span class="line">        transform.Translate(Vector3.right * Time.deltaTime * gyroRotateRate, Space.World);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来再看这个手指触控的部分。这个比陀螺仪的部分要简单一些。我使用了 <a href="https://docs.unity3d.com/ScriptReference/Touch.html">Touch</a> 类中的 <a href="https://docs.unity3d.com/ScriptReference/Touch-deltaPosition.html">deltaPosition</a> 属性来计算背景的移动：</p>
<blockquote>
<p>The position delta since last change in pixel coordinates.</p>
<p>The absolute position of the touch is recorded periodically and available in the position property. The deltaPosition value is a Vector2 in pixel coordinates that represents the difference between the touch position recorded on the most recent update and that recorded on the previous update. The deltaTime value gives the time that elapsed between the previous and current updates; you can calculate the touch’s speed of motion by dividing deltaPosition.magnitude by deltaTime.</p>
</blockquote>
<p>代码部分：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TouchViewCtrl</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> enable = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> moveSpeed;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> maxSpeed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ViewCtrlConfig config;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        config = gameObject.GetComponent&lt;ViewCtrlConfig&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.touchCount == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">//没有手指触碰直接退出</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetTouch(<span class="number">0</span>).phase == TouchPhase.Moved)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">float</span> positionDiff = (enable ? <span class="number">1</span> : <span class="number">0</span>) * Mathf.Clamp(Input.GetTouch(<span class="number">0</span>).deltaPosition.x * moveSpeed, -maxSpeed, maxSpeed);</span><br><span class="line">            <span class="keyword">if</span> (((transform.position.x &gt;= config.rightPosLimit) &amp;&amp; (positionDiff &gt; <span class="number">0</span>)) ||</span><br><span class="line">                ((transform.position.x &lt;= config.leftPosLimit) &amp;&amp; (positionDiff &lt; <span class="number">0</span>))) <span class="keyword">return</span>;</span><br><span class="line">            transform.Translate(<span class="keyword">new</span> Vector3(positionDiff, <span class="number">0</span>, <span class="number">0</span>), Space.World);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这两段代码除了调用 API 的部分略有不同，其它都是差不多的。</p>
<p>另外，为了边界检测的方便，我另外挂载了一个 ViewCtrlConfig 来规定左右运动的边界：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ViewCtrlConfig</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> leftPosLimit;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> rightPosLimit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后实现的效果还是挺不错的。</p>
<p><img src="example.gif" alt="example"></p>
]]></content>
      <categories>
        <category>Unity 学习</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Unity 中使用 Physics.Raycast 进行射击判定</title>
    <url>/posts/2021-05-22-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在射击游戏中，如何判定子弹是否击中敌人？</p>
<p>最简单的想法就是在枪口处实例化一个子弹并给它向前的速度，检测它与目标的碰撞。这个方法很容易实现，但是有一些问题。子弹的速度是很快的（假设要实现的是那种拟真的射击），那么在实践中，有可能出现子弹的速度过快造成碰撞检测的不准确，甚至有可能子弹穿过了目标而没有触发击中。</p>
<p>一种更好的方法是利用 <a href="https://docs.unity3d.com/ScriptReference/Physics.Raycast.html">Physics.Raycast</a> 来进行检测。</p>
<p>在下面的演示中，我使用了</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">Raycast</span>(<span class="params">Vector3 origin, Vector3 direction, <span class="keyword">out</span> RaycastHit hitInfo, <span class="built_in">float</span> maxDistance</span>)</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>origin</td>
<td>The starting point of the ray in world coordinates. 起始点的坐标</td>
</tr>
<tr>
<td>direction</td>
<td>The direction of the ray. 射线方向</td>
</tr>
<tr>
<td>hitInfo</td>
<td>If true is returned, <code>hitInfo</code> will contain more information about where the closest collider was hit. (See Also: <a href="https://docs.unity3d.com/ScriptReference/RaycastHit.html">RaycastHit</a>). 被击中目标的信息</td>
</tr>
<tr>
<td>maxDistance</td>
<td>The max distance the ray should check for collisions. 检测的最远距离</td>
</tr>
</tbody></table>
<p>简而言之，这一函数会在起始点的位置向给定的方向发射一条射线，如果这条射线碰撞到了物体，那么它会返回 <code>ture</code>，否则返回 <code>false</code>。同时，被射线碰撞到的物体的一些信息会被记录在 RaycastHit 中，包括碰撞位置以及该物体的 Transform 等等。</p>
<p>在下面这个场景中，我创建了一个 Cube 和四个 Cylinder 分别来表示枪和目标。</p>
<img src="1.png" width="75%" height="75%">

<p>接着将测试的脚本挂载在枪上：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ShootTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FixedUpdate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        RaycastHit hit;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Physics.Raycast(transform.position, transform.TransformDirection(Vector3.forward), <span class="keyword">out</span> hit, Mathf.Infinity))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.DrawRay(transform.position, transform.TransformDirection(Vector3.forward) * hit.distance, Color.black);</span><br><span class="line">            Debug.Log(<span class="string">&quot;Did Hit &quot;</span> + hit.transform.gameObject.name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.DrawRay(transform.position, transform.TransformDirection(Vector3.forward) * <span class="number">1000</span>, Color.white);</span><br><span class="line">            Debug.Log(<span class="string">&quot;Did not Hit&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该脚本来源于官方文档</span></span><br></pre></td></tr></table></figure>

<p>值得注意的是，关于物理的代码应该要放置在 FixedUpdate 中而非 Update。</p>
<p>效果如下。</p>
<img src="2.gif" width="75%" height="75%">
]]></content>
      <categories>
        <category>Unity 学习</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>长点记性吧！</title>
    <url>/posts/2021-06-05-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>总是不备份！每次都后悔！</p>
<p>真是气死我了😡</p>
<p>养成备份的好习惯吧！要不然早晚在这上面吃苦头！</p>
]]></content>
  </entry>
  <entry>
    <title>HTML 入门#1</title>
    <url>/posts/2021-06-06-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>HTML：超文本标记语言（<strong>H</strong>yper <strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage）</p>
<p>它不是一门编程语言，而是一种用于告知浏览器如何组织页面的<strong>标记语言</strong>。</p>
<hr>
<h1 id="HTML-元素"><a href="#HTML-元素" class="headerlink" title="HTML 元素"></a>HTML 元素</h1><p>HTML 文档是由 HTML 元素定义的。</p>
<p><img src="element.png"></p>
<p>HTML 元素语法：</p>
<ul>
<li>以开始标签起始</li>
<li>以结束标签终止</li>
<li>元素的内容是开始标签与结束标签之间的内容</li>
<li>某些 HTML 元素没有内容，被称为空元素</li>
<li>空元素在开始标签中进行关闭（以开始标签的结束而结束）</li>
<li>大多数 HTML 元素可拥有属性</li>
</ul>
<p>大多数 HTML 元素可以嵌套。</p>
<p>实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is my first paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中，<code>&lt;html&gt;</code> 元素定义了整个 HTML 文档，<code>&lt;body&gt;</code> 元素定义了 HTML 文档的主体，<code>&lt;p&gt;</code> 元素定义了 HTML 文档中的一个段落。</p>
<hr>
<h1 id="HTML-属性"><a href="#HTML-属性" class="headerlink" title="HTML 属性"></a>HTML 属性</h1><p>属性为 HTML 元素提供附加信息。</p>
<p><img src="attribute.png"></p>
<p>属性总是以名称/值对的形式出现，比如：<code>name=&quot;value&quot;</code>。属性总是在 HTML 元素的开始标签中规定。属性值应该始终被包括在引号内。</p>
<p>实例：</p>
<p><strong>style</strong> 属性用于改变 HTML 元素的样式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;background-color:orange&quot;</span>&gt;</span>背景颜色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-family:arial;color:red;font-size:20px;&quot;</span>&gt;</span>字体、颜色和尺寸<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center&quot;</span>&gt;</span>文本对齐<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><p style="background-color:orange">背景颜色</p>
<p style="font-family:arial;color:red;font-size:20px;">字体、颜色和尺寸</p>
<p style="text-align:center">文本对齐</p>
</div></div>

<hr>
<h1 id="一些基本-HTML-元素"><a href="#一些基本-HTML-元素" class="headerlink" title="一些基本 HTML 元素"></a>一些基本 HTML 元素</h1><h2 id="HTML-标题"><a href="#HTML-标题" class="headerlink" title="HTML 标题"></a>HTML 标题</h2><p>通过 <code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code> 等标签进行定义。<code>&lt;h1&gt;</code> 定义最大的标题。<code>&lt;h6&gt;</code> 定义最小的标题。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><h1 class="skiptoc">标题</h1>
<h2 class="skiptoc">标题</h2>
<h3 class="skiptoc">标题</h3>
</div></div>

<h2 id="HTML-段落"><a href="#HTML-段落" class="headerlink" title="HTML 段落"></a>HTML 段落</h2><p>通过 <code>&lt;p&gt;</code> 标签进行定义。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是另外一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><p>这是一个段落。</p>
<p>这是另外一个段落。</p>
</div></div>

<p>如果想要在不产生新段落的情况下进行换行，使用 <code>&lt;br /&gt;</code> 标签。</p>
<h2 id="HTML-水平线"><a href="#HTML-水平线" class="headerlink" title="HTML 水平线"></a>HTML 水平线</h2><p><code>&lt;hr /&gt;</code> 标签在 HTML 页面中创建水平线，可用于分隔内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><p>段落1</p>
<hr />
<p>段落2</p>
</div></div>

<h2 id="HTML-表格"><a href="#HTML-表格" class="headerlink" title="HTML 表格"></a>HTML 表格</h2><p>表格由 <code>&lt;table&gt;</code> 标签来定义。每个表格均有若干行（由 <code>&lt;tr&gt;</code> 标签定义），每行被分割为若干单元格（由 <code>&lt;td&gt;</code> 标签定义）。表格的表头使用 <code>&lt;th&gt;</code> 标签进行定义。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>表头<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>另一表头<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>第一行第一个单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>第一行第二个单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>第二行第一个单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>第二行第二个单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><table border="1">
<caption>表格标题</caption>
<tr>
<th>表头</th>
<th>另一表头</th>
</tr>
<tr>
<td>第一行第一个单元格</td>
<td>第一行第二个单元格</td>
</tr>
<tr>
<td>第二行第一个单元格</td>
<td>第二行第二个单元格</td>
</tr>
</table>
</div></div>

<p>表格的边框用 <strong>border</strong> 属性进行设置。跨行和跨列的单元格分别用 <strong>rowspan</strong> 和 <strong>colspan</strong> 属性进行设置。单元格内容与其边框之间的空白和单元格之间的距离分别用 <strong>cellpadding</strong> 和 <strong>cellspacing</strong> 属性进行设置。</p>
<h2 id="HTML-列表"><a href="#HTML-列表" class="headerlink" title="HTML 列表"></a>HTML 列表</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab-1">无序列表</button></li><li class="tab"><button type="button" data-href="#tab-2">有序列表</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab-1"><p>无序列表始于 <code>&lt;ul&gt;</code> 标签。每个列表项始于 <code>&lt;li&gt;</code> 标签。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><ul>
<li>Coffee</li>
<li>Milk</li>
</ul>
</div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab-2"><p>有序列表始于 <code>&lt;ol&gt;</code> 标签。每个列表项始于 <code>&lt;li&gt;</code> 标签。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><ol>
<li>Coffee</li>
<li>Milk</li>
</ol>
</div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="HTML-链接"><a href="#HTML-链接" class="headerlink" title="HTML 链接"></a>HTML 链接</h2><p>使用 <code>&lt;a&gt;</code> 标签在 HTML 中创建链接。</p>
<p><strong>href</strong> 属性规定链接的目标。</p>
<p><strong>target</strong> 属性定义被链接的文档在何处显示。</p>
<p><strong>title</strong> 属性添加支持信息（当鼠标指针悬停在链接上时出现）。</p>
<p>实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://wu-haitao.github.io/&quot;</span> <span class="attr">title</span>=<span class="string">&quot;链接到主页&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>在新窗口打开<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><p><a href="https://wu-haitao.github.io/" title="链接到主页" target="_blank">在新窗口打开</a></p>
</div></div>

<h2 id="HTML-图像"><a href="#HTML-图像" class="headerlink" title="HTML 图像"></a>HTML 图像</h2><p>在 HTML 中，图像由 <code>&lt;img&gt;</code> 标签定义。</p>
<p><code>&lt;img&gt;</code> 是空标签，意思是说，它只包含属性，并且没有闭合标签。</p>
<p><strong>源属性（src）</strong>的值是图像的 URL 地址。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;example.gif&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><img src="example.gif"/>
</div></div>

<p><strong>替换文本属性（alt）</strong>用来为图像定义一串预备的可替换的文本。在无法载入图像时，浏览器将显示这个替代性的文本而不是图像。</p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 文章目录跳过标题</title>
    <url>/posts/2021-06-06-02/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>首先找到 node_modules\hexo-util\lib\toc_obj.js 这个文件，定位至 <code>tocObj()</code> 这个函数，在 <code>str</code> 这一变量被引用之前先对其进行修改：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (str.<span class="title function_">indexOf</span>(<span class="string">&#x27;class=&quot;skiptoc&quot;&#x27;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> beginIndex = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;class=&quot;skiptoc&quot;&#x27;</span>) - <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">var</span> endIndex = str.<span class="title function_">indexOf</span>(<span class="string">&quot;&lt;/h&quot;</span>, beginIndex);</span><br><span class="line">  <span class="keyword">if</span> (endIndex == -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">  str = str.<span class="title function_">substring</span>(<span class="number">0</span>, beginIndex) + str.<span class="title function_">substring</span>(endIndex + <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后找到 node_modules\hexo-theme-butterfly\source\js\main.js 这个文件，其中有这么一句：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = $article.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;h1,h2,h3,h4,h5,h6&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>将其改为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = $article.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;h1:not(.skiptoc),h2:not(.skiptoc),h3:not(.skiptoc),h4:not(.skiptoc),h5:not(.skiptoc),h6:not(.skiptoc)&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这两步做完就🆗了。</p>
<p>看看效果：</p>
<blockquote>
<p><code>&lt;h1&gt;标题一&lt;/h1&gt;</code></p>
<h1>标题一</h1>
</blockquote>
<blockquote>
<p><code>&lt;h1 class=&#39;skiptoc&#39;&gt;标题二&lt;/h1&gt;</code></p>
<h1 class='skiptoc'>标题二</h1>
</blockquote>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 入门#2</title>
    <url>/posts/2021-06-10-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HTML-头部元素"><a href="#HTML-头部元素" class="headerlink" title="HTML 头部元素"></a>HTML 头部元素</h1><p>HTML <code>&lt;head&gt;</code> 元素与 <code>&lt;body&gt;</code> 元素不同，它的内容不会在浏览器中显示，它的作用是保存页面的一些<strong>元数据</strong>。</p>
<h2 id="lt-title-gt-元素"><a href="#lt-title-gt-元素" class="headerlink" title="&lt;title&gt; 元素"></a><code>&lt;title&gt;</code> 元素</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>我的站点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为文档添加标题。</p>
<h2 id="lt-meta-gt-元素"><a href="#lt-meta-gt-元素" class="headerlink" title="&lt;meta&gt; 元素"></a><code>&lt;meta&gt;</code> 元素</h2><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个元素指定了文档的字符编码。<code>utf-8</code> 是一个通用的字符集，它包含了任何人类语言中的大部分的字符。 意味着该页面可以同时处理多种语言：</p>
<blockquote>
<p>你好</p>
<p>Hello</p>
<p>Здравствуй</p>
<p>こんにちは</p>
</blockquote>
<h3 id="作者和描述"><a href="#作者和描述" class="headerlink" title="作者和描述"></a>作者和描述</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Haitao&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML 入门&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>name</code> 指定了meta 元素的类型； 说明该元素包含了什么类型的信息。</li>
<li><code>content</code> 指定了实际的元数据内容。</li>
</ul>
<p>这两个meta 元素分别定义页面的作者和提供页面的简要描述。</p>
<h2 id="自定义图标"><a href="#自定义图标" class="headerlink" title="自定义图标"></a>自定义图标</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>设置网页图标。</p>
<h1 id="HTML-区块"><a href="#HTML-区块" class="headerlink" title="HTML 区块"></a>HTML 区块</h1><p>大多数 HTML 元素被定义为块级元素（block level element）或内联元素（inline element）。</p>
<p>如 <code>h1</code>、<code>p</code> 是块级元素，而 <code>a</code>、<code>img</code> 是内联元素。</p>
<p>块级元素在浏览器显示时，通常会以新行来开始（和结束）。内联元素在显示时通常不会以新行开始。</p>
<h2 id="lt-div-gt-元素"><a href="#lt-div-gt-元素" class="headerlink" title="&lt;div&gt; 元素"></a><code>&lt;div&gt;</code> 元素</h2><p><code>&lt;div&gt;</code> 元素是块级元素，它可作为组合其他 HTML 元素的容器。<code>&lt;div&gt;</code> 元素没有特定的含义。</p>
<p>如果与 CSS 一同使用，<code>&lt;div&gt;</code> 元素可用于对大的内容块设置样式属性。</p>
<p><code>&lt;div&gt;</code> 元素的另一个常见的用途是文档布局。</p>
<h2 id="lt-span-gt-元素"><a href="#lt-span-gt-元素" class="headerlink" title="&lt;span&gt; 元素"></a><code>&lt;span&gt;</code> 元素</h2><p><code>&lt;span&gt;</code> 元素是内联元素，可作为文本的容器。<code>&lt;span&gt;</code> 元素也没有特定的含义。</p>
<p>当与 CSS 一同使用时，<code>&lt;span&gt;</code> 元素可用于为部分文本设置样式属性。</p>
<hr>
<h1 id="HTML-样式"><a href="#HTML-样式" class="headerlink" title="HTML 样式"></a>HTML 样式</h1><p>CSS，即样式表，可用于对HTML 元素进行渲染。</p>
<p>CSS 可以通过以下方式添加到 HTML 中：</p>
<h2 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h2><p>在 HTML 元素中使用 <strong>style</strong> 属性。</p>
<p>当特殊的样式需要应用到个别元素时，就可以使用内联样式。 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;background-color:yellow;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;background-color:red;&quot;</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;background-color:green;&quot;</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h2><p>在 HTML 文档头部 <code>&lt;head&gt;</code> 区域使用 <code>&lt;style&gt;</code> 元素来包含 CSS。</p>
<p>当单个文件需要特别样式时，就可以使用内部样式表。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>:yellow;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span> &#123;<span class="attribute">color</span>:blue;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h2><p>使用外部 CSS 文件。</p>
<p>当样式需要被应用到很多页面的时候，外部样式表将是理想的选择。使用外部样式表可以实现通过更改一个文件来改变整个站点的外观。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="HTML-脚本"><a href="#HTML-脚本" class="headerlink" title="HTML 脚本"></a>HTML 脚本</h1><p><code>&lt;script&gt;</code> 标签用于定义客户端脚本（JavaScript）。</p>
<p><code>&lt;script&gt;</code> 元素既可以包含脚本语句，也可以通过 <strong>src</strong> 属性指向外部脚本文件。</p>
<hr>
<h1 id="HTML-类"><a href="#HTML-类" class="headerlink" title="HTML 类"></a>HTML 类</h1><p><strong>class</strong> 属性规定了元素的类名。一个 HTML 元素可被赋予多个 class。</p>
<p>HTML 类大多数时候用于 CSS 样式的设置。同时也可以利用它通过 JavaScript 来改变 HTML 元素。</p>
<p>实例（块级元素）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.cities</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>:black;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>:white;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125; </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cities&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>London<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>London is the capital city of England. </span><br><span class="line">It is the most populous city in the United Kingdom, </span><br><span class="line">with a metropolitan area of over 13 million inhabitants.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cities&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Paris<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Paris is the capital and most populous city of France.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cities&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Tokyo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Tokyo is the capital of Japan, the center of the Greater Tokyo Area,</span><br><span class="line">and the most populous metropolitan area in the world.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><style>
.cities {
    background-color:black;
    color:white;
    margin:20px;
    padding:20px;
} 
</style>

<div class="cities">
<h2 class="skiptoc" style="color:white">London</h2>
<p>London is the capital city of England. 
It is the most populous city in the United Kingdom, 
with a metropolitan area of over 13 million inhabitants.</p>
</div>

<div class="cities">
<h2 class="skiptoc" style="color:white">Paris</h2>
<p>Paris is the capital and most populous city of France.</p>
</div>

<div class="cities">
<h2 class="skiptoc" style="color:white">Tokyo</h2>
<p>Tokyo is the capital of Japan, the center of the Greater Tokyo Area,
and the most populous metropolitan area in the world.</p>
</div>
</div></div>

<p>实例（行内元素）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">span</span><span class="selector-class">.red</span> &#123;<span class="attribute">color</span>:red;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一些<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>重要的<span class="tag">&lt;/<span class="name">span</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><style>
  span.red {color:red;}
</style>

<p>一些<span class="red">重要的</span>内容</p>
</div></div>

<hr>
<h1 id="HTML-Id"><a href="#HTML-Id" class="headerlink" title="HTML Id"></a>HTML Id</h1><p>HTML id 属性用于为HTML 元素指定唯一的 id。一个 HTML文档中不能存在多个有相同 id 的元素。</p>
<p>CSS 和 JavaScript 可使用 id 属性来选取元素或设置特定元素的样式。</p>
<p>注意：id 属性大小写敏感。</p>
<p>实例（CSS）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#myHeader</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;myHeader&quot;</span>&gt;</span>我的标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><style>
#myHeader {
  background-color: lightblue;
  color: white;
  padding: 40px;
  text-align: center;
}
</style>

<h1 class="skiptoc" id="myHeader">我的标题</h1>
</div></div>

<p>实例（JavaScript）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span>=<span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;myFunction()&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><script>
function myFunction()
{
    document.getElementById("demo").innerHTML=Date();
}
</script>

<p><button onclick="myFunction()">点我</button></p>
<p id="demo"></p>
</div></div>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 入门#3</title>
    <url>/posts/2021-06-19-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HTML-表单"><a href="#HTML-表单" class="headerlink" title="HTML 表单"></a>HTML 表单</h1><p>HTML 表单用于收集用户输入。<code>&lt;form&gt;</code> 元素定义 HTML 表单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"> .</span><br><span class="line">form elements</span><br><span class="line"> .</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="HTML-表单属性"><a href="#HTML-表单属性" class="headerlink" title="HTML 表单属性"></a>HTML 表单属性</h2><h3 id="Action-属性"><a href="#Action-属性" class="headerlink" title="Action 属性"></a>Action 属性</h3><p><strong>action</strong> 属性定义提交表单时要执行的操作。</p>
<p>通常，当用户单击“提交”按钮时，表单数据将发送到服务器上的文件中。</p>
<h3 id="Method-属性"><a href="#Method-属性" class="headerlink" title="Method 属性"></a>Method 属性</h3><p><strong>method</strong> 属性指定提交表单数据时要使用的 HTTP 方法。</p>
<p>表单数据可以作为 URL 变量（使用 <code>method=&quot;get&quot;</code>）或作为 HTTP POST 事务（使用 <code>method=&quot;post&quot;</code>）发送。</p>
<p>提交表单数据时，默认的 HTTP 方法是 GET。</p>
<h2 id="HTML-表单元素"><a href="#HTML-表单元素" class="headerlink" title="HTML 表单元素"></a>HTML 表单元素</h2><h3 id="lt-input-gt-元素"><a href="#lt-input-gt-元素" class="headerlink" title="&lt;input&gt; 元素"></a><code>&lt;input&gt;</code> 元素</h3><p><code>&lt;input&gt;</code> 元素根据不同的 <strong>type</strong> 属性，可以变化为多种形态。<strong>value</strong> 属性规定输入字段的初始值。<strong>maxlength</strong> 属性规定输入字段允许的最大长度……</p>
<h4 id="文本输入"><a href="#文本输入" class="headerlink" title="文本输入"></a>文本输入</h4><p><code>&lt;input type=&quot;text&quot;&gt;</code> 定义用于文本输入的单行输入字段：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"> First name:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;firstname&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"> Last name:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastname&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><form>
 First name:<br>
<input type="text" name="firstname">
<br>
 Last name:<br>
<input type="text" name="lastname">
</form>
</div></div>

<h4 id="密码输入"><a href="#密码输入" class="headerlink" title="密码输入"></a>密码输入</h4><p><code>&lt;input type=&quot;password&quot;&gt;</code> 定义密码字段：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"> User name:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"> User password:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;psw&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><form>
 User name:<br>
<input type="text" name="username">
<br>
 User password:<br>
<input type="password" name="psw">
</form>
</div></div>

<h4 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h4><p><code>&lt;input type=&quot;radio&quot;&gt;</code> 定义单选框：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>Male</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>Female</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><form>
<input type="radio" name="sex" value="male">Male
<br>
<input type="radio" name="sex" value="female">Female
</form>
</div></div>

<h4 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h4><p><code>&lt;input type=&quot;checkbox&quot;&gt;</code> 定义复选框：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vehicle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Bike&quot;</span>&gt;</span>I have a bike</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vehicle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Car&quot;</span>&gt;</span>I have a car </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><form>
<input type="checkbox" name="vehicle" value="Bike">I have a bike
<br>
<input type="checkbox" name="vehicle" value="Car">I have a car 
</form>
</div></div>

<h4 id="提交按钮"><a href="#提交按钮" class="headerlink" title="提交按钮"></a>提交按钮</h4><p><code>&lt;input type=&quot;submit&quot;&gt;</code> 定义用于向表单处理程序提交表单的按钮：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;action_page.php&quot;</span>&gt;</span></span><br><span class="line">First name:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;firstname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Haitao&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Last name:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Wu&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">checked</span>&gt;</span>Male</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>Female</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><form action="action_page.php">
First name:<br>
<input type="text" name="firstname" value="Haitao">
<br>
Last name:<br>
<input type="text" name="lastname" value="Wu">
<br><br>
<input type="radio" name="sex" value="male">Male
<br>
<input type="radio" name="sex" value="female">Female
<br><br>
<input type="submit" value="Submit">
</form>
</div></div>

<h3 id="lt-select-gt-元素"><a href="#lt-select-gt-元素" class="headerlink" title="&lt;select&gt; 元素"></a><code>&lt;select&gt;</code> 元素</h3><p><code>&lt;select&gt;</code> 元素定义下拉列表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;cars&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;porsche&quot;</span>&gt;</span>porsche<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;bmw&quot;</span>&gt;</span>bmw<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;audi&quot;</span>&gt;</span>audi<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><select name="cars">
<option value="porsche">porsche</option>
<option value="bmw">bmw</option>
<option value="audi">audi</option>
</select>
</div></div>

<h3 id="lt-textarea-gt-元素"><a href="#lt-textarea-gt-元素" class="headerlink" title="&lt;textarea&gt; 元素"></a><code>&lt;textarea&gt;</code> 元素</h3><p><code>&lt;textarea&gt;</code> 元素定义多行输入字段（文本域）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line">Write something here.</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><textarea name="textarea" rows="10" cols="30">
Write something here.
</textarea>
</div></div>

<h3 id="lt-button-gt-元素"><a href="#lt-button-gt-元素" class="headerlink" title="&lt;button&gt; 元素"></a><code>&lt;button&gt;</code> 元素</h3><p><code>&lt;button&gt;</code> 元素定义可点击的按钮：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;(｡･∀･)ﾉﾞ嗨&#x27;)&quot;</span>&gt;</span>点我！<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><p><button type="button" onclick="alert('(｡･∀･)ﾉﾞ嗨')">点我！</button></p>
</div></div>

<h1 id="HTML-画布"><a href="#HTML-画布" class="headerlink" title="HTML 画布"></a>HTML 画布</h1><p><code>&lt;canvas&gt;</code> 元素用于在网页上绘制图形。<code>&lt;canvas&gt;</code> 元素本身是没有绘图能力的，所有的绘制工作必须在 JavaScript 内部完成。</p>
<p>实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:1px solid #c3c3c3;&quot;</span>&gt;</span></span><br><span class="line">Your browser does not support the canvas element.</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> canvas=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myCanvas&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> context=canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">moveTo</span>(<span class="number">100</span>,<span class="number">10</span>);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">lineTo</span>(<span class="number">150</span>,<span class="number">50</span>);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">lineTo</span>(<span class="number">50</span>,<span class="number">50</span>);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">context.<span class="property">strokeStyle</span>=<span class="string">&quot;red&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">stroke</span>();</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">arc</span>(<span class="number">100</span>,<span class="number">80</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="title class_">Math</span>.<span class="property">PI</span>*<span class="number">2</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">context.<span class="property">strokeStyle</span>=<span class="string">&quot;blue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">stroke</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><canvas id="myCanvas" width="200" height="100" style="border:1px solid #c3c3c3;">
Your browser does not support the canvas element.
</canvas>
<script type="text/javascript">
var canvas=document.getElementById("myCanvas");
var context=canvas.getContext("2d");
context.beginPath();
context.moveTo(100,10);
context.lineTo(150,50);
context.lineTo(50,50);
context.closePath();
context.strokeStyle="red";
context.stroke();
context.beginPath();
context.arc(100,80,10,0,Math.PI*2,true);
context.closePath();
context.strokeStyle="blue";
context.stroke();
</script></div></div>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 入门#1</title>
    <url>/posts/2021-06-23-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>CSS：层叠样式表（<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets）</p>
<p>CSS 是一种描述 HTML 文档样式的语言，用于设计风格和布局，比如更改内容的字体、颜色、大小、间距，将内容分为多列，或者添加动画及其他的装饰效果。</p>
<h1 id="CSS-语法"><a href="#CSS-语法" class="headerlink" title="CSS 语法"></a>CSS 语法</h1><p>CSS 规则集（rule-set）由<strong>选择器</strong>和<strong>声明块</strong>组成：</p>
<p><img src="ruleset.png" alt="ruleset"></p>
<p>选择器指向您需要设置样式的 HTML 元素。</p>
<p>声明块包含一条或多条声明。</p>
<p>每条声明都包含一个 CSS 属性名称和一个值，以冒号分隔。</p>
<p>多条 CSS 声明用分号分隔，声明块用花括号括起来。</p>
<p>实例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在此例中，所有 <code>&lt;p&gt;</code> 元素都将居中对齐，并带有红色文本颜色。</p>
<h1 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h1><p>CSS 选择器用于“查找”（或选取）要设置样式的 HTML 元素。</p>
<h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><h3 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h3><p>通用选择器（*）选择页面上的所有的 HTML 元素。</p>
<p>语法：<code>*</code></p>
<p>实例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;<span class="attribute">text-align</span>: center;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h3><p>最常见的 CSS 选择器是元素选择器。元素选择器根据元素的名称来选择 HTML 元素。</p>
<p>语法：<code>elementname</code></p>
<p>实例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>:blue;&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;<span class="attribute">color</span>:silver;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="id-选择器"><a href="#id-选择器" class="headerlink" title="id 选择器"></a>id 选择器</h3><p>id 选择器使用 HTML 元素的 id 属性来选择特定元素。</p>
<p>语法：<code>#idname</code></p>
<p>实例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#intro</span> &#123;<span class="attribute">font-weight</span>:bold;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>类选择器选择有特定 class 属性的 HTML 元素。</p>
<p>语法：<code>.classname</code></p>
<p>实例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.important</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br></pre></td></tr></table></figure>

<p>类选择器可以结合元素选择器来使用：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.important</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-class">.important</span> &#123;<span class="attribute">color</span>:blue;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分组选择器"><a href="#分组选择器" class="headerlink" title="分组选择器"></a>分组选择器</h2><h3 id="选择器列表"><a href="#选择器列表" class="headerlink" title="选择器列表"></a>选择器列表</h3><p>通过 <code>,</code> 可将不同的选择器组合在一起。</p>
<p>语法：<code>A, B</code></p>
<p>实例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="CSS-颜色"><a href="#CSS-颜色" class="headerlink" title="CSS 颜色"></a>CSS 颜色</h1><h2 id="颜色名和颜色值"><a href="#颜色名和颜色值" class="headerlink" title="颜色名和颜色值"></a>颜色名和颜色值</h2><p>在 CSS 中，可以使用颜色名称来指定颜色：</p>
<h3 class="skiptoc" style="background-color:tomato;text-align:center">tomato</h1>

<p>也可以使用 RGB 值、HEX 值、HSL 值、RGBA 值或者 HSLA 值来指定颜色：</p>
<h3 class="skiptoc" style="background-color:rgb(255, 99, 71);text-align:center">rgb(255, 99, 71)</h1>
<h3 class="skiptoc" style="background-color:#ff6347;text-align:center">#ff6347</h1>
<h3 class="skiptoc" style="background-color:hsl(9, 100%, 64%);text-align:center">hsl(9, 100%, 64%)</h1>
<h3 class="skiptoc" style="background-color:rgba(255, 99, 71, 0.5);text-align:center">rgba(255, 99, 71, 0.5)</h1>
<h3 class="skiptoc" style="background-color:hsla(9, 100%, 64%, 0.5);text-align:center">hsla(9, 100%, 64%, 0.5)</h1>
<a id="Anchor-0"></a>

<h2 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h2><p>设置文本的颜色：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><h1 class="skiptoc" style="color:DodgerBlue;">文本颜色</h1>
</div></div>

<p><a id="Anchor-1"></a></p>
<h2 id="背景色"><a href="#背景色" class="headerlink" title="背景色"></a>背景色</h2><p>设置背景色：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>:DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><h1 class="skiptoc" style="background-color:DodgerBlue;">背景色</h1>
</div></div>

<p><a id="Anchor-2"></a></p>
<h2 id="边框颜色"><a href="#边框颜色" class="headerlink" title="边框颜色"></a>边框颜色</h2><p>设置边框的颜色：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">border-style</span>:solid;</span><br><span class="line">  <span class="attribute">border-width</span>:<span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>:DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><h1 class="skiptoc" style="border:2px solid DodgerBlue;">边框颜色</h1>
</div></div>

<h1 id="CSS-文本"><a href="#CSS-文本" class="headerlink" title="CSS 文本"></a>CSS 文本</h1><h2 id="文本颜色-1"><a href="#文本颜色-1" class="headerlink" title="文本颜色"></a>文本颜色</h2><p><code>color</code> 属性用于设置文本的颜色。</p>
<p><a href="#Anchor-0">👆</a></p>
<h2 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h2><p><code>text-align</code> 属性用于设置文本的水平对齐方式。</p>
<p>实例：</p>
<div class="tabs" id="tabs"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs-1">居中对齐</button></li><li class="tab"><button type="button" data-href="#tabs-2">左对齐</button></li><li class="tab"><button type="button" data-href="#tabs-3">右对齐</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs-1"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p style="text-align: center">👉居中对齐👈</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-2"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p style="text-align: left">👈左对齐👈</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-3"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p style="text-align: right">👉右对齐👉</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="文本装饰"><a href="#文本装饰" class="headerlink" title="文本装饰"></a>文本装饰</h2><p><code>text-decoration</code> 属性用于设置或删除文本装饰。</p>
<p>实例：</p>
<div class="tabs" id="tabs"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs-1">无装饰</button></li><li class="tab"><button type="button" data-href="#tabs-2">上划线</button></li><li class="tab"><button type="button" data-href="#tabs-3">删除线</button></li><li class="tab"><button type="button" data-href="#tabs-4">下划线</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs-1"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-2"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: overline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p style="text-decoration: overline;">上划线</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-3"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: line-through;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p style="text-decoration: line-through;">删除线</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-4"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p style="text-decoration: underline;">下划线</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><code>font-family</code> 属性规定文本的字体。</p>
<p>实例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Times New Roman&quot;</span>, serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><p style="font-family:'Times New Roman'">Times New Roman</p>
</div></div>

<h3 id="通用字体族"><a href="#通用字体族" class="headerlink" title="通用字体族"></a>通用字体族</h3><p>在 CSS 中，有五个通用字体族：</p>
<ul>
<li>衬线字体（Serif）- 笔画结尾有特殊的装饰线或衬线。</li>
<li>无衬线字体（Sans-serif）- 笔画结尾是平滑的。</li>
<li>等宽字体（Monospace）- 字体中每个字宽度相同。</li>
<li>草书字体（Cursive）- 模仿了人类的笔迹。</li>
<li>幻想字体（Fantasy）- 具有特殊艺术效果的字体。</li>
</ul>
<h3 id="字体例子"><a href="#字体例子" class="headerlink" title="字体例子"></a>字体例子</h3><table>
<thead>
<tr>
<th align="left">通用字体族</th>
<th align="left">字体名称实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Serif</td>
<td align="left"><p style="font-family:'Times New Roman'">Times New Roman</p><p style="font-family:Georgia">Georgia</p></td>
</tr>
<tr>
<td align="left">Sans-serif</td>
<td align="left"><p style="font-family:Arial">Arial</p><p style="font-family:Verdana">Verdana</p></td>
</tr>
<tr>
<td align="left">Monospace</td>
<td align="left"><p style="font-family:'Courier New'">Courier New</p><p style="font-family:'Lucida Console'">Lucida Console</p></td>
</tr>
<tr>
<td align="left">Cursive</td>
<td align="left"><p style="font-family:'Brush Script MT'">Brush Script MT</p><p style="font-family:'Lucida Handwriting'">Lucida Handwriting</p></td>
</tr>
<tr>
<td align="left">Fantasy</td>
<td align="left"><p style="font-family:Harrington">Harrington</p><p style="font-family:Papyrus">Papyrus</p></td>
</tr>
</tbody></table>
<h2 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h2><p><code>font-size</code> 属性设置文本的大小。</p>
<p>实例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2.5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.875em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.875em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><h1 class="skiptoc" style="font-size: 2.5em;">标题</h1>

<h2 class="skiptoc" style="font-size: 1.875em;">标题</h2>

<p style="font-size: 0.875em;">段落</p>
</div></div>

<h1 id="CSS-背景"><a href="#CSS-背景" class="headerlink" title="CSS 背景"></a>CSS 背景</h1><h2 id="背景色-1"><a href="#背景色-1" class="headerlink" title="背景色"></a>背景色</h2><p><code>background-color</code> 属性指定元素的背景色。</p>
<p><a href="#Anchor-1">👆</a></p>
<h2 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h2><p><code>background-image</code> 属性指定用作元素背景的图像。</p>
<p>实例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;bg.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="背景尺寸"><a href="#背景尺寸" class="headerlink" title="背景尺寸"></a>背景尺寸</h2><p><code>background-size</code> 属性指定背景图像的尺寸。</p>
<p>实例：</p>
<div class="tabs" id="tabs"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs-1">关键字</button></li><li class="tab"><button type="button" data-href="#tabs-2">百分比值</button></li><li class="tab"><button type="button" data-href="#tabs-3">长度值</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs-1"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关键字：</p>
<ul>
<li><code>cover</code> - 缩放背景图片以完全覆盖背景区，可能背景图片部分看不见。</li>
<li><code>contain</code> - 缩放背景图片以完全装入背景区，可能背景区部分空白。</li>
</ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-2"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一个值指定图片的宽度，第二个值指定图片的高度。</p>
<p>如果仅有一个数值被给定，这个数值将作为宽度值大小，高度值将被设定为 <code>auto</code>。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-3"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">120px</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以混合使用百分比值和长度值。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="背景重复"><a href="#背景重复" class="headerlink" title="背景重复"></a>背景重复</h2><p><code>background-repeat</code> 属性指定背景图像的重复方式。</p>
<p>默认情况下，背景图片在水平和垂直方向上都重复。</p>
<p>实例：</p>
<div class="tabs" id="tabs"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs-1">仅在水平方向重复</button></li><li class="tab"><button type="button" data-href="#tabs-2">仅在垂直方向重复</button></li><li class="tab"><button type="button" data-href="#tabs-3">不重复</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs-1"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-repeat</span>: repeat-x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-2"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-repeat</span>: repeat-y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-3"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="背景位置"><a href="#背景位置" class="headerlink" title="背景位置"></a>背景位置</h2><p><code>background-position</code> 属性用于指定背景图像的位置。</p>
<p>实例：</p>
<div class="tabs" id="tabs"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs-1">关键字</button></li><li class="tab"><button type="button" data-href="#tabs-2">百分比值</button></li><li class="tab"><button type="button" data-href="#tabs-3">长度值</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs-1"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-position</span>: top right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关键字：</p>
<ul>
<li><code>top</code></li>
<li><code>bottom</code></li>
<li><code>left</code></li>
<li><code>right</code></li>
<li><code>center</code></li>
</ul>
<p>如果仅指定一个关键字，其他值将会是 <code>center</code>。例如 <code>background-position: top;</code> 将会把背景置于上方中央。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-2"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-position</span>: <span class="number">25%</span> <span class="number">75%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一个值是水平位置，第二个值是垂直位置。</p>
<p>左上角是0％0％，右下角是100％100％。</p>
<p>如果仅指定了一个值，其他值将是50％。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-3"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-position</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以混合使用百分比值和长度值。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="背景附着"><a href="#背景附着" class="headerlink" title="背景附着"></a>背景附着</h2><p><code>background-attachment</code> 设置背景图像是否固定或者随着页面的其余部分滚动。</p>
<p>实例：</p>
<div class="tabs" id="tabs"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs-1">fixed</button></li><li class="tab"><button type="button" data-href="#tabs-2">scroll</button></li><li class="tab"><button type="button" data-href="#tabs-3">local</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs-1"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>背景图片位置固定，不会随着页面的滚动而滚动。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-2"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-attachment</span>: scroll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>背景图片相对于元素本身是固定的，元素本身滚动时，背景一同滚动。但在元素内容滚动时，背景保持静止。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-3"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-attachment</span>: local;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 背景图片会随着元素本身和元素内容的滚动而滚动。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h1 id="CSS-边框"><a href="#CSS-边框" class="headerlink" title="CSS 边框"></a>CSS 边框</h1><h2 id="边框样式"><a href="#边框样式" class="headerlink" title="边框样式"></a>边框样式</h2><p><code>border-style</code> 属性指定要显示的边框类型。</p>
<p>实例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">border-style</span>:solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可设置以下值：</p>
<ul>
<li><code>dotted</code> - 定义点线边框</li>
<li><code>dashed</code> - 定义虚线边框</li>
<li><code>solid</code> - 定义实线边框</li>
<li><code>double</code> - 定义双边框</li>
<li><code>groove</code> - 定义 3D 坡口边框</li>
<li><code>ridge</code> - 定义 3D 脊线边框</li>
<li><code>inset</code> - 定义 3D inset 边框</li>
<li><code>outset</code> - 定义 3D outset 边框</li>
<li><code>none</code> - 定义无边框</li>
<li><code>hidden</code> - 定义隐藏边框</li>
</ul>
<p>可设置一到四个值（用于上边框、右边框、下边框和左边框）。</p>
<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><p style="border-style:dotted">点状边框</p>

<p style="border-style:dashed">虚线边框</p>

<p style="border-style:solid">实线边框</p>

<p style="border-style:double">双线边框</p>

<p style="border-style:groove">凹槽边框</p>

<p style="border-style:ridge">垄状边框</p>

<p style="border-style:inset">3D inset 边框</p>

<p style="border-style:outset">3D outset 边框</p>

<p style="border-style:none">无边框</p>

<p style="border-style:hidden">隐藏边框</p>

<p style="border-style:dotted dashed solid double">混合边框</p>
</div></div>

<h2 id="边框宽度"><a href="#边框宽度" class="headerlink" title="边框宽度"></a>边框宽度</h2><p><code>border-width</code> 属性指定边框的宽度。</p>
<p>实例：</p>
<div class="tabs" id="tabs"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs-1">数值</button></li><li class="tab"><button type="button" data-href="#tabs-2">预定义值</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs-1"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p style="border-style:solid;border-width:5px;">5px border-width</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-2"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: thin;</span><br><span class="line">  <span class="comment">/* 三个预定义值：thin、medium 和 thick */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p style="border-style:solid;border-width:thin;">thick border-width</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="边框颜色-1"><a href="#边框颜色-1" class="headerlink" title="边框颜色"></a>边框颜色</h2><p><code>border-color</code> 属性用于设置边框的颜色。</p>
<p><a href="#Anchor-2">👆</a></p>
<h2 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h2><p><code>border-radius</code> 属性用于向元素添加圆角边框。</p>
<p>实例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: tomato;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><p style="border-style: solid;border-width: 2px;border-color: tomato;border-radius: 5px;">圆角边框</p>
</div></div>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 入门#2</title>
    <url>/posts/2021-06-29-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CSS-盒子模型"><a href="#CSS-盒子模型" class="headerlink" title="CSS 盒子模型"></a>CSS 盒子模型</h1><p><img src="boxmodel.png" alt="boxmodel"></p>
<p>不同部分的说明：</p>
<ul>
<li><strong>Margin（外边距）</strong> - 清除边框外的区域，外边距是透明的。</li>
<li><strong>Border（边框）</strong> - 围绕在内边距和内容外的边框。</li>
<li><strong>Padding（内边距）</strong> - 清除内容周围的区域。</li>
<li><strong>Content（内容）</strong> - 盒子的内容，显示文本和图像。</li>
</ul>
<h2 id="元素的高度和宽度"><a href="#元素的高度和宽度" class="headerlink" title="元素的高度和宽度"></a>元素的高度和宽度</h2><p><code>height</code> 和 <code>width</code> 属性用于设置元素的高度和宽度。</p>
<p>当指定一个 CSS 元素的宽度和高度属性时，只是设置了它的内容区域的宽度和高度。</p>
<h3 id="Box-Sizing"><a href="#Box-Sizing" class="headerlink" title="Box Sizing"></a>Box Sizing</h3><p><code>box-sizing</code> 属性允许我们在元素的总宽度和高度中包括内边距（填充）和边框。</p>
<p>两个有相同指定宽度和高度的 <code>&lt;div&gt;</code> 元素：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.div2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><div style="width:200px;height:100px;border:1px solid blue;box-sizing:content-box">
    这个 div 更小
</div>

<br />
<div style="width:200px;height:100px;padding:20px;border:1px solid red;box-sizing:content-box">
    这个 div 更大
</div>
</div></div>

<p>如果在元素上设置了 <code>box-sizing: border-box;</code>，则宽度和高度会包括内边距和边框：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.div2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><div style="width:200px;height:100px;border:1px solid blue">
    两个 div 的尺寸是一样的
</div>

<br />

<div style="width:200px;height:100px;padding:20px;border:1px solid red">
    两个 div 的尺寸是一样的
</div>
</div></div>

<h2 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h2><p><code>margin</code> 属性用于在边框之外为元素周围创建空间。</p>
<p>也可为元素的每一侧指定外边距的属性：</p>
<ul>
<li><code>margin-top</code></li>
<li><code>margin-right</code></li>
<li><code>margin-bottom</code></li>
<li><code>margin-left</code></li>
</ul>
<h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><p>见 <a href="../2021-06-23-01/#CSS-%E8%BE%B9%E6%A1%86">👉CSS 入门#1👈</a></p>
<h2 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h2><p><code>padding</code> 属性用于在边框内的元素内容周围生成空间。</p>
<p>也可为元素的每一侧指定内边距的属性：</p>
<ul>
<li><code>padding-top</code></li>
<li><code>padding-right</code></li>
<li><code>padding-bottom</code></li>
<li><code>padding-left</code></li>
</ul>
<h1 id="CSS-显示与可见性"><a href="#CSS-显示与可见性" class="headerlink" title="CSS 显示与可见性"></a>CSS 显示与可见性</h1><p><code>display</code> 属性设置一个元素应如何显示。</p>
<div class="tabs" id="tabs"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs-1">none</button></li><li class="tab"><button type="button" data-href="#tabs-2">inline</button></li><li class="tab"><button type="button" data-href="#tabs-3">block</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs-1"><script>
function myFunction1() {
  if (document.getElementById("panel1").style.display == "block") {
    document.getElementById("panel1").style.display = "none";
  }
  else {
    document.getElementById("panel1").style.display = "block";
  }
}
</script>

<p><button onclick="myFunction1()">点我</button></p>
<div id="panel1" style="display:none">
  <p>(｡･∀･)ﾉﾞ嗨</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-2"><p>一个常见的例子是为实现水平菜单而生成行内的 <code>&lt;li&gt;</code> 元素：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>把链接列表显示为水平导航栏：</p>
<ul>
  <li style="display:inline"><a href="/404" target="_blank">HTML</a></li>
  <li style="display:inline"><a href="/404" target="_blank">CSS</a></li>
  <li style="display:inline"><a href="/404" target="_blank">JavaScript</a></li>
</ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-3"><p>下例将 <code>&lt;a&gt;</code> 元素显示为块元素：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>把链接显示为块元素：</p>
<a style="display:block" href="/404" target="_blank">HTML</a>
<a style="display:block" href="/404" target="_blank">CSS</a>
<a style="display:block" href="/404" target="_blank">JavaScript</a><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<p><code>visibility</code> 属性指定一个元素应可见还是隐藏。</p>
<p>通过设置为 <code>hidden</code> 可以隐藏元素。不同于 <code>display:none</code>，被隐藏的元素仍占据布局中的空间。</p>
<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><script>
function myFunction2() {
  if (document.getElementById("panel2").style.visibility == "visible") {
    document.getElementById("panel2").style.visibility = "hidden";
  }
  else {
    document.getElementById("panel2").style.visibility = "visible";
  }
}
</script>

<p><button onclick="myFunction2()">点我</button></p>
<div id="panel2" style="visibility:hidden">
  <p>(｡･∀･)ﾉﾞ嗨</p>
</div>
</div></div>

<h1 id="CSS-定位"><a href="#CSS-定位" class="headerlink" title="CSS 定位"></a>CSS 定位</h1><p><code>position</code> 属性规定应用于元素的定位方法的类型（static、relative、fixed、absolute 或 sticky）。</p>
<div class="tabs" id="tabs"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs-1">static</button></li><li class="tab"><button type="button" data-href="#tabs-2">relative</button></li><li class="tab"><button type="button" data-href="#tabs-3">fixed</button></li><li class="tab"><button type="button" data-href="#tabs-4">absolute</button></li><li class="tab"><button type="button" data-href="#tabs-5">sticky</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs-1"><p>HTML 元素默认情况下的定位方式为 static（静态）。</p>
<p>静态定位的元素不受 <code>top</code>、<code>bottom</code>、<code>left</code> 和 <code>right</code> 属性的影响。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-2"><p><code>position: relative;</code> 的元素相对于其正常位置进行定位。</p>
<p>设置相对定位的元素的 <code>top</code>、<code>right</code>、<code>bottom</code> 和 <code>left</code> 属性将导致其偏离其正常位置。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-3"><p><code>position: fixed;</code> 的元素是相对浏览器窗口固定的，这意味着即使滚动页面，它也始终位于同一位置。<code>top</code>、<code>right</code>、<code>bottom</code> 和 <code>left</code> 属性可用于定位此元素。</p>
<p>固定定位的元素不会在页面中通常应放置的位置上留出空隙。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-4"><p><code>position: absolute;</code> 的元素相对于最近的已定位父元素进行定位。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-5"><p><code>position: sticky;</code> 的元素根据用户的滚动位置进行定位。</p>
<p>粘性元素根据滚动位置在相对（relative）和固定（fixed）之间切换。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><div style="background-color:var(--card-bg);position:static;width:200px;border:3px solid grey;">
  position: static;
</div>
<br />
<div style="background-color:var(--card-bg);position:relative;width:400px;height:65px;left:5%;border:3px solid grey;">
  position: relative;
  <div style="background-color:var(--card-bg);position:absolute;width:200px;right:0;bottom:0;border:3px solid grey;">
    position: absolute
  </div>
</div>
<div style="background-color:var(--card-bg);position:fixed;z-index:1;right:0;bottom:0;width:200px;border:3px solid grey;">
  position: fixed;
</div>
<br />
<div style="background-color:var(--card-bg);width:200px;height:65px;border:3px solid grey;overflow-y:scroll">
<div>ε=ε=ε=┏(゜ロ゜;)┛</div>
<div style="background-color:var(--card-bg);position:-webkit-sticky;position:sticky;top:0;border:3px solid grey;">
  position: sticky;
</div>
<div>ε=ε=ε=┏(゜ロ゜;)┛</div>
<div>ε=ε=ε=┏(゜ロ゜;)┛</div>
<div>ε=ε=ε=┏(゜ロ゜;)┛</div>
</div>
</div></div>

<h1 id="CSS-溢出"><a href="#CSS-溢出" class="headerlink" title="CSS 溢出"></a>CSS 溢出</h1><p><code>overflow</code> 属性指定在元素的内容太大而无法放入指定区域时是剪裁内容还是添加滚动条。</p>
<div class="tabs" id="tabs"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs-1">visible</button></li><li class="tab"><button type="button" data-href="#tabs-2">hidden</button></li><li class="tab"><button type="button" data-href="#tabs-3">scroll</button></li><li class="tab"><button type="button" data-href="#tabs-4">auto</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs-1"><p>默认。溢出没有被剪裁。内容在元素框外渲染。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: visible;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<div style="width:200px;height:50px;overflow:visible;border:3px solid grey">
    这是一段很长很长很长很长很长很长很长很长很长很长的话。
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-2"><p>溢出被剪裁，其余内容将不可见。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<div style="width:200px;height:50px;overflow:hidden;border:3px solid grey">
    这是一段很长很长很长很长很长很长很长很长很长很长的话。
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-3"><p> 溢出被剪裁，同时添加滚动条以查看其余内容。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line"> <span class="attribute">overflow</span>: scroll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<div style="width:200px;height:50px;overflow:scroll;border:3px solid grey">
    这是一段很长很长很长很长很长很长很长很长很长很长的话。
</div>

<p>👆水平方向的滚动条</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs-4"><p>与 scroll 类似，但仅在必要时添加滚动条。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<div style="width:200px;height:50px;overflow:auto;border:3px solid grey">
    这是一段很长很长很长很长很长很长很长很长很长很长的话。
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<p><code>overflow-x</code> 和 <code>overflow-y</code> 属性分别定义水平和垂直方向的溢出。</p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 入门#3</title>
    <url>/posts/2021-07-14-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h1><h2 id="组合器"><a href="#组合器" class="headerlink" title="组合器"></a>组合器</h2><h3 id="后代组合器"><a href="#后代组合器" class="headerlink" title="后代组合器"></a>后代组合器</h3><p><code> </code>（空格）组合器选取某元素的后代元素。</p>
<p>语法：<code>A B</code></p>
<p>例子：<code>div span</code> 匹配所有位于任意 <code>&lt;div&gt;</code> 元素之内的 <code>span</code> 元素。</p>
<h3 id="直接子代组合器"><a href="#直接子代组合器" class="headerlink" title="直接子代组合器"></a>直接子代组合器</h3><p><code>&gt;</code> 组合器选取某元素的子元素。</p>
<p>语法：<code>A &gt; B</code></p>
<p>例子：<code>ul &gt; li</code> 匹配直接嵌套在 <code>&lt;ul&gt;</code> 元素之内的所有 <code>&lt;li&gt;</code> 元素。</p>
<h3 id="一般兄弟组合器"><a href="#一般兄弟组合器" class="headerlink" title="一般兄弟组合器"></a>一般兄弟组合器</h3><p><code>~</code> 组合器选择兄弟元素，也就是说，后一个元素在前一个元素后面的任意位置，并且共享同一个父节点。</p>
<p>语法：<code>A ~ B</code></p>
<p>例子：<code>p ~ span</code> 匹配同一父元素下，<code>&lt;p&gt;</code> 元素后的所有 <code>&lt;span&gt;</code> 元素。</p>
<h3 id="紧邻兄弟组合器"><a href="#紧邻兄弟组合器" class="headerlink" title="紧邻兄弟组合器"></a>紧邻兄弟组合器</h3><p><code>+</code> 组合器选择相邻元素，即后一个元素紧跟在前一个之后，并且共享同一个父节点。</p>
<p>语法：<code>A + B</code></p>
<p>例子：<code>h1 + p</code> 匹配所有紧邻在 <code>&lt;h1&gt;</code> 元素之后的 <code>&lt;p&gt;</code> 元素。</p>
<h2 id="伪选择器"><a href="#伪选择器" class="headerlink" title="伪选择器"></a>伪选择器</h2><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><p>指定被选择元素的特殊状态。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">selector:pseudo-class &#123;</span><br><span class="line">  property: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>把鼠标移到<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;custom1&quot;</span>&gt;</span>我<span class="tag">&lt;/<span class="name">span</span>&gt;</span>的上面~<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-class">.custom1</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><style>
  span.custom1:hover {
    color:red;
  }
</style>

<p>把鼠标移到<span class="custom1">我</span>的上面~</p>
</div></div>

<h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p>对被选择元素的特定部分进行样式的修改。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">selector::pseudo-element &#123;</span><br><span class="line">  property: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;custom2&quot;</span>&gt;</span>选择这句话中的文本~<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.custom2</span><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>效果</span></div>
    <div class="hide-content"><style>
  p.custom2::selection {
    color: red;
    background-color: yellow;
  }
</style>

<p class="custom2">选择这句话中的文本~</p>
</div></div>

<hr>
<p>😕</p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划 - 最长公共子序列/子串</title>
    <url>/posts/2021-09-19-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>首先不要混淆了这两个问题：最长公共子序列（Longest Common Subsequence）和最长公共子串（Longest Common Substring）。不同于子串，子序列不需要在原序列中占用连续的位置。</p>
<h2 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h2><p><code>dp[i][j]</code> 表示在 <code>s1</code> 中前 <code>i</code> 个字符组成的字符串，和在 <code>s2</code> 中前 <code>j</code> 个字符组成的字符串，它们两个的最长公共子序列的长度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">LongestCommonSequence</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[s1.length() + <span class="number">1</span>][s2.length() + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= s1.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= s2.length(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">                dp[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s1.charAt(i - <span class="number">1</span>) == s2.charAt(j - <span class="number">1</span>)) dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> dp[i][j] = Math.max(dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[s1.length()][s2.length()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最长公共子串"><a href="#最长公共子串" class="headerlink" title="最长公共子串"></a>最长公共子串</h2><p><code>dp[i][j]</code> 表示在 <code>s1</code> 中前 <code>i</code> 个字符组成的字符串，和在 <code>s2</code> 中前 <code>j</code> 个字符组成的字符串，它们两个的最长公共子串的长度，并且满足该字串的末尾是 <code>s1[i] == s2[j]</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">LongestCommonSubstring</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[s1.length() + <span class="number">1</span>][s2.length() + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= s1.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= s2.length(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">                dp[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s1.charAt(i - <span class="number">1</span>) == s2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, dp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SkyrimSE 安装 mod 教程</title>
    <url>/posts/2021-09-25-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="游戏本体"><a href="#游戏本体" class="headerlink" title="游戏本体"></a>游戏本体</h2><p><img src="1.png" alt="1"></p>
<p>最重要的当然是需要一个正版的<a href="https://store.steampowered.com/app/489830/The_Elder_Scrolls_V_Skyrim_Special_Edition/">游戏本体</a>。</p>
<p><strong>安装时不要在语言一栏中选择“繁体中文”，因为中文版的游戏版本是比较低的。我们应该选择英文进行安装。</strong></p>
<h2 id="Mod-工具"><a href="#Mod-工具" class="headerlink" title="Mod 工具"></a>Mod 工具</h2><p><img src="2.png" alt="2"></p>
<p>为了方便、安全地安装和卸载 mod，我们需要一个叫做 Mod Organizer 2 的工具，一般直接叫它 MO。</p>
<p><a href="https://github.com/ModOrganizer2/modorganizer/releases">下载链接</a></p>
<p>安装完毕后，我们打开软件，会提示需要创建一个游戏实例。</p>
<p><img src="3.png" alt="3"></p>
<p>那么我们直接新建实例并选择 SkyrimSE 这个选项。</p>
<p><img src="4.png" alt="4"></p>
<p>理论上来说 MO 会自动扫描出我们下载好的游戏本体的位置，如果没有的话，手动添加路径。</p>
<p><img src="5.png" alt="5"></p>
<p>如果一切顺利，这时候界面应该是像下面一样：</p>
<p><img src="6.png" alt="6"></p>
<p>在右上角点击 Run，就可以在加载 mod 的环境下启动游戏（当然我们现在还未添加任何东西）。</p>
<h2 id="N-网"><a href="#N-网" class="headerlink" title="N 网"></a>N 网</h2><p><img src="7.png" alt="7"></p>
<p><a href="https://www.nexusmods.com/">Nexus Mods</a>，是一个很有名的汇集各个游戏 mod 的网站。虽然有很多其他网站，比如说 9dm，但我还是更推荐直接在 N 网上寻找 mod，因为它和 MO 能够配合得很好。</p>
<p>在 N 网注册了账户后，就能愉快地下载 mod 啦。</p>
<p>为了更加便捷的下载，我们打开 MO 并在设置中登录 N 网账号。</p>
<p><img src="8.png" alt="8"></p>
<h2 id="下载-Mod"><a href="#下载-Mod" class="headerlink" title="下载 Mod"></a>下载 Mod</h2><p>下面我随便选择一个 mod 进行演示。</p>
<p><img src="9.png" alt="9"></p>
<p>首先在下载任何 mod 之前，我都推荐看一看 DESCRIPTION，其中最重要的是 Requirements 这一节。因为有一些 mod 它是依赖于其他 mod 的，如果不满足这些前置要求，那么很可能这个 mod 就无法工作。</p>
<p><img src="10.png" alt="10"></p>
<p>如上图所示，例子中的 mod 不需要任何前置。</p>
<p>然后点击进入 FILES 页中，一般来说，只需要下载 MAIN FILES 中的文件就行。在每个文件下面又会有两个按钮，第一个是 MOD MANAGER DOWNLOAD（通过管理器下载），第二个是 MANUAL DOWNLOAD（手动下载）。</p>
<p><img src="11.png" alt="11"></p>
<p>我们在 MO 中已经登录了 N 网账号，所以可以直接选择第一个，通过 MO 下载。这时候到 MO 中右边的 Downloads 菜单下，就可以看到下载的项目以及它的进度了。</p>
<p><img src="12.png" alt="12"></p>
<h2 id="安装-Mod"><a href="#安装-Mod" class="headerlink" title="安装 Mod"></a>安装 Mod</h2><p>下载完毕之后，我们双击这个 mod 就可以进行安装了。</p>
<p>有些 mod 是直接安装，而有些 mod，包括现在演示的这个，则是会弹出安装菜单，要求我们做一些选择然后安装。</p>
<p><img src="13.png" alt="13"></p>
<p>如果在上一步选了 Download Manually，或者是从其它地方下载下来的 mod，该如何安装呢？很简单，点击 MO 左上角这个按钮，选择 mod 文件进行安装即可。</p>
<p><img src="14.png" alt="14"></p>
<p>不过要注意，最好是把 mod 汇集保存着，之后如果想重新安装 mod 的时候就不会找不到了。</p>
<p>安装完成后，左边的列表中会出现新安装的 mod。如果想让这个 mod 生效，不要忘记在它的前面的复选框中打勾。</p>
<p><img src="15.png" alt="15"></p>
<p>另外还有一件重要的事。有时某些 mod 它们的部分内容是会互相冲突的，这就需要我们手动选择保留哪个 mod 的内容。注意到列表下面的 <em>Overwrite</em> 字样了吗？它的意思就是位置越放在下面的 mod，它的内容的优先级越高，在发生冲突时就会覆盖掉在它上面的 mod 的内容。如果发生这种情况，mod 上会出现一个小图标，还是比较直观的。</p>
<h2 id="Mod-排序"><a href="#Mod-排序" class="headerlink" title="Mod 排序"></a>Mod 排序</h2><p>对 mod 进行排序是一件十分重要的事。未经排序的 mod 很容易产生冲突并使得游戏跳出。</p>
<p>MO 提供了很方便的自动排序的功能。在 MO 的右下角你可以看到加载的 mod 列表，而在列表上方有一个排序的按钮，点击它就能开始排序。每次添加一个新 mod，最好都进行一次排序操作。</p>
<p><img src="16.png" alt="16"></p>
<h2 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h2><p>我们在安装时选择的语言是英文，所以对游戏进行汉化显然是必要的。</p>
<p>这里我推荐一个汉化 mod，质量挺高的：<a href="https://www.nexusmods.com/skyrimspecialedition/mods/76474">Unofficial Chinese Localisation by Reconquista Studios</a></p>
<h2 id="SKSE"><a href="#SKSE" class="headerlink" title="SKSE"></a>SKSE</h2><p>SKSE 的全称是 Skyrim Script Extender，顾名思义，它是一个脚本拓展工具。它是许多 mod 的前置，所以我们最好还是把它给安装上。</p>
<p>我们到<a href="https://skse.silverlock.org/">官网</a>找到 Current SE build 这一项进行下载。下载下来的应该是一个压缩包。</p>
<p>下载完毕后，解压缩。</p>
<p><img src="17.png" alt="17"></p>
<p>我们把除了 Data 文件夹之外的所有文件和文件夹直接拖入到游戏本体的根目录下。</p>
<p><img src="18.png" alt="18"></p>
<p>然后我们把压缩包作为一个 mod 交由 MO 进行安装。这时肯定会出现这么一个错误：</p>
<p><img src="19.png" alt="19"></p>
<p>这是正常的。我们右键点击 Data 并选择 Set data directory 来修复错误：</p>
<p><img src="20.png" alt="20"></p>
<p><img src="21.png" alt="21"></p>
<p>接着继续安装并勾选。</p>
<p>最后重启一下 MO，右上角的下拉选框里应该就会出现 SKSE 的选项了。我们之后就通过它来启动游戏。</p>
<p><img src="22.png" alt="22"></p>
<h2 id="启用成就"><a href="#启用成就" class="headerlink" title="启用成就"></a>启用成就</h2><p>使用 mod 会停用成就，所以需要安装这个 mod：<a href="https://www.nexusmods.com/skyrimspecialedition/mods/245">Achievements Mods Enabler</a></p>
<h2 id="推荐-Mod"><a href="#推荐-Mod" class="headerlink" title="推荐 Mod"></a>推荐 Mod</h2><p>以下这几个 mod 是我强烈推荐的，最好全部安装：</p>
<ul>
<li><p><a href="https://www.nexusmods.com/skyrimspecialedition/mods/266">Unofficial Skyrim Special Edition Patch</a></p>
<p>修复游戏 bug</p>
</li>
<li><p><a href="https://www.nexusmods.com/skyrimspecialedition/mods/73303">Unofficial Skyrim Special Edition Patch - Simplified Chinese Translation</a></p>
<p>USSEP 的汉化</p>
</li>
<li><p><a href="https://www.nexusmods.com/skyrimspecialedition/mods/659">Static Mesh Improvement Mod - SMIM</a></p>
<p>物品模型优化</p>
</li>
<li><p><a href="https://www.nexusmods.com/skyrimspecialedition/mods/61705">Static Mesh Improvement Mod - SMIM - Simplified Chinese Translation</a></p>
<p>SMIM 的汉化</p>
</li>
<li><p><a href="https://www.nexusmods.com/skyrimspecialedition/mods/2357">Enhanced Blood Textures SE</a></p>
<p>更好的血液</p>
</li>
<li><p><a href="https://www.nexusmods.com/skyrimspecialedition/mods/12939">Deadly Spell Impacts</a></p>
<p>法术效果的优化</p>
</li>
<li><p><a href="https://www.nexusmods.com/skyrimspecialedition/mods/12969">Ash Pile Retexture</a></p>
<p>更好看的灰烬堆</p>
</li>
<li><p><a href="https://www.nexusmods.com/skyrimspecialedition/mods/1037">Total Character Makeover</a></p>
<p>人物美化</p>
</li>
<li><p><a href="https://www.nexusmods.com/skyrimspecialedition/mods/1439">Realistic Ragdolls and Force</a></p>
<p>更加真实的力学</p>
</li>
<li><p><a href="https://www.nexusmods.com/skyrimspecialedition/mods/1432">No Spinning Death Animation</a></p>
<p>没有转圈倒下动画</p>
</li>
<li><p><a href="https://www.nexusmods.com/skyrimspecialedition/mods/1763">No BS AI Projectile Dodge (Magic and Arrows) - Immersive Projectiles Nondetection of Enemies</a></p>
<p>阻止敌人瞬移躲开远程攻击</p>
</li>
<li><p><a href="https://www.nexusmods.com/skyrimspecialedition/mods/10849">Fixed body collision</a></p>
<p>尸体碰撞</p>
</li>
<li><p><a href="https://www.nexusmods.com/skyrimspecialedition/mods/1429">Better Dialogue Controls</a> 和 <a href="https://www.nexusmods.com/skyrimspecialedition/mods/1428">Better MessageBox Controls</a></p>
<p>优化操作</p>
</li>
<li><p><a href="https://www.nexusmods.com/skyrimspecialedition/mods/5804">A Quality World Map</a></p>
<p>更好的地图</p>
</li>
<li><p><a href="https://www.nexusmods.com/skyrimspecialedition/mods/13027">Seranaholic by rxkx22 - SSE</a></p>
<p>瑟拉娜的美化</p>
</li>
<li><p><a href="https://www.nexusmods.com/skyrimspecialedition/mods/198">Caliente’s Beautiful Bodies Enhancer -CBBE-</a></p>
<p>👩</p>
</li>
<li><p><a href="https://www.nexusmods.com/skyrimspecialedition/mods/184">Feminine Argonian Textures (Chameleon and Lizard)</a> 和 <a href="https://www.nexusmods.com/skyrimspecialedition/mods/183">Feminine Khajiit Textures (Grey Cat and Leopard)</a></p>
<p>🐱🦎</p>
</li>
<li><p><a href="https://www.nexusmods.com/skyrimspecialedition/mods/7902">Tempered Skins for Males - Vanilla and SOS versions</a></p>
<p>👨</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我比较喜欢保持游戏原本的感觉，而不想搞一些花里胡哨的东西。当然每个人都有自己的喜好，萝卜白菜各有所爱嘛。</p>
<p>按照上面的流程做一遍之后，能够获得比原版更好的体验，同时也保证了原汁原味。至于其它更多的东西，请自己慢慢研究，毕竟研究 mod 的过程本身也是充满乐趣的。</p>
<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="s1.jpg" alt="Screenshot1"></p>
<p><img src="s2.jpg" alt="Screenshot2"></p>
<p><img src="s3.jpg" alt="Screenshot3"></p>
<p><img src="s4.jpg" alt="Screenshot4"></p>
]]></content>
      <tags>
        <tag>游戏相关</tag>
      </tags>
  </entry>
  <entry>
    <title>实习总结</title>
    <url>/posts/2021-11-29-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>给第一次实习做个总结。</p>
<p>当时找实习的时候，就是奔着轻松又没有什么挑战的岗位去的。投的也不太多，想着这学期找不到就等到下学期。结果最后就等到一个面试。面试表现很差，但还是通过了。</p>
<p>实习的公司是 Air Liquide SG。公司主要生产一些工业气体，比如氢气、氮气之类的。工作地点在 Jurong Island 上。这个岛算是新加坡各种工业厂区的聚集地，进出有关卡，岛内不得随意拍照。</p>
<p>最烦的就是上下班的通勤。进岛和出岛都是坐的公司的班车，时间上就没有什么弹性可言。早六点四十起床，坐 MRT 到 Jurong East，然后等班车，大概八点左右到达。下班时间则是在下午五点二十左右。</p>
<p>公司的氛围倒是挺轻松的，偶尔还有免费午餐。</p>
<p>说回工作本身。我主要的任务是给维护组做一个库存管理系统。其实就是开发一个操作数据库的软件，然后把库存里的零部件的信息录入进去。总共四个多月的实习，我花了一个多月的时间就把这玩意儿做的差不多了。当然过程并不是一帆风顺。现在回过头来看，首先为什么我要选择用 JavaFX？这个选择其实就不太好。还有就是多线程的问题，第一次接触，不太熟悉。</p>
<p>剩下的时间，大部分都在摸鱼。公司里的网络速度实在是太慢了，摸得也不太爽。</p>
<p>总的来说，还是学到了不少东西。</p>
<p>但其实我对这次实习并不满意。这个公司是化工领域的，和我的专业不太相干。如果单从拿学分的角度来说，能够轻松度过实习倒是挺好的。但是从职业规划的角度看，这次实习其实就有点儿浪费时间了。</p>
<p>继续加油吧。</p>
<p>💪</p>
]]></content>
  </entry>
  <entry>
    <title>初识 Unity 2D 骨骼动画</title>
    <url>/posts/2021-12-25-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近试着用了用 Unity 中的<a href="https://unity.com/cn/features/2danimation"> 2D 骨骼动画</a>，感觉还是挺不错的，对于不会美术的我来说有时比帧动画更加方便快捷。</p>
<h1 id="准备素材"><a href="#准备素材" class="headerlink" title="准备素材"></a>准备素材</h1><p>推荐在 Adobe Photoshop 进行角色的绘制。</p>
<p>比如这一张我在网上找到的石头人的素材，我先到 PS 里对其进行处理。</p>
<p>将不同的身体部件置于不同的图层内，并调整好它们的图层顺序。</p>
<p><img src="1.png"></p>
<p>保存时，选择 PSB 文件。</p>
<p><img src="2.png"></p>
<p>然后，将这个文件导入至 Unity 项目中。</p>
<p>进入 Sprite Editor，可以看到各个部件。</p>
<p><img src="3.png"></p>
<h1 id="绑定骨骼"><a href="#绑定骨骼" class="headerlink" title="绑定骨骼"></a>绑定骨骼</h1><p>点击左上角并在下拉菜单中选择 Skinning Editor。</p>
<p><img src="4.png"></p>
<p><img src="5.png"></p>
<p>接下来我们就可以开始绑定骨骼了。</p>
<p>首先创建骨骼。</p>
<p><img src="Create.gif" alt="Create"></p>
<p>然后对骨骼进行一些调整。</p>
<p><img src="Edit.gif" alt="Edit"></p>
<p>完成后点击 Auto Geometry 自动蒙皮。</p>
<p><img src="6.png"></p>
<p>返回至 Preview Pose 看看效果。</p>
<p><img src="Preview1.gif" alt="Preview1"></p>
<p>这些怪异的扭曲并不是我们想要的。毕竟这是个石头人，身体应该硬邦邦的。</p>
<p>点击 Bone Influence 并对每一个身体部件的骨骼影响进行调整。</p>
<p>比如最大的身体主体部分，双击选中，可以查看影响它的骨骼的列表。</p>
<p><img src="7.png"></p>
<p>可以看到列表中有这么多项，然而实际上我们只需要中间那一根骨骼发挥作用。所以应该删除所有其它骨骼。</p>
<p><img src="8.png"></p>
<p>现在整个部分只受到 bone_3 的单独控制。</p>
<p>其它部分也是同样的操作。</p>
<p><img src="9.png"></p>
<p>现在再看看效果如何。</p>
<p><img src="Preview2.gif" alt="Preview2"></p>
<p>不错👍</p>
<p>别忘记点击应用进行保存。</p>
<h1 id="录制动画"><a href="#录制动画" class="headerlink" title="录制动画"></a>录制动画</h1><p>现在我们直接将其拖曳至游戏场景中。</p>
<p>给它添加上动画器，之后我们来录制一个简单的动画。</p>
<p><img src="10.png"></p>
<p>在创建动画剪辑后，点击动画窗口左上角的红色圆圈即可开始录制。</p>
<p>在录制模式中，我们直接调整场景中石头人的动作。</p>
<p><img src="Animation.gif" alt="Animation"></p>
<p>呜啊！！！</p>
]]></content>
      <categories>
        <category>Unity 学习</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>反馈控制系统学习笔记#1</title>
    <url>/posts/2022-01-15-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<h1 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h1><p>信号是关于时间的函数，可分为连续时间信号和离散时间信号两类。</p>
<p>所有信号都可以由一些基础信号组合构建。</p>
<h2 id="基础信号"><a href="#基础信号" class="headerlink" title="基础信号"></a>基础信号</h2><ul>
<li><p>constant signal 或者 DC signal</p>
<p>\(<br>u(t) = k<br>\)</p>
</li>
<li><p>unit step signal</p>
<p>\(<br>u(t) =<br>\begin{cases}<br>0,t&lt;0<br>\newline<br>1,t\geq 0<br>\end{cases}<br>\)</p>
</li>
<li><p>unit ramp signal</p>
<p>\(<br>u(t) =<br>\begin{cases}<br>0,t&lt;0<br>\newline<br>t,t\geq 0<br>\end{cases}<br>\)</p>
</li>
<li><p>sinusoidal signal</p>
<p>\(<br>\begin{split}<br>u(t) = &amp;A\mathrm{cos}(wt \pm \phi)<br>\newline<br>\mbox{or}\quad &amp;A\mathrm{sin}(wt \pm \phi)<br>\end{split}<br>\)</p>
</li>
<li><p>exponential signal</p>
<p>\(<br>u(t) = e^{at}<br>\)</p>
</li>
</ul>
<h2 id="脉冲信号"><a href="#脉冲信号" class="headerlink" title="脉冲信号"></a>脉冲信号</h2><p>Dirac’s delta function 或者说 impulse δ 是一种理想化的信号，满足：</p>
<ul>
<li><p>在靠近 t = 0 时特别大</p>
</li>
<li><p>在远离 t = 0 时特别小</p>
</li>
<li><p>函数曲线下面积为 1</p>
</li>
<li><p>函数的具体形状是无所谓的</p>
</li>
<li><p>ϵ 很小</p>
</li>
</ul>
<p><img src="1.png"></p>
<p>在图中 δ 被表示为一个箭头：</p>
<p><img src="2.png"></p>
<p>The δ function is defined with the following property:</p>
<p>\(<br>\int_a^b f(t) \delta (t) \mathrm{d} t = f(0)<br>\), provided \(a&lt;0\), \(b&gt;0\), and \(f\) is continous at \(t = 0\).</p>
<h3 id="Scaled-impulses-amp-Sifting-property"><a href="#Scaled-impulses-amp-Sifting-property" class="headerlink" title="Scaled impulses &amp; Sifting property"></a>Scaled impulses &amp; Sifting property</h3><p>\(\alpha \delta (t - T)\) is an impulse at time \(T\), with magnitude \(\alpha\)</p>
<p>\(\int_a^b \alpha \delta (t - T)f(t)\mathrm{d}t = \alpha f(T)\)</p>
<p>for \(a &lt; T &lt; b\) and \(f\) is continuous at \(T\).</p>
<h3 id="Physical-interpretation"><a href="#Physical-interpretation" class="headerlink" title="Physical interpretation"></a>Physical interpretation</h3><p>Impulse function are used to model physical signals</p>
<ul>
<li>that act over short time intervals</li>
<li>whose effect depends on integral of signal</li>
</ul>
<h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><p>A system can be viewed as a process in which input signals are transformed by the system or cause the system to respond in some way, resulting in other signals as output.</p>
<h2 id="系统互联"><a href="#系统互联" class="headerlink" title="系统互联"></a>系统互联</h2><ul>
<li><p>串联：\(y = G(Fu) = GFu\)</p>
<p><img src="3.png"></p>
</li>
<li><p>并联：\(y = Fu + Gu\)</p>
<p><img src="4.png"></p>
</li>
<li><p>反馈：\(y = F(u - Gy)\)</p>
<p><img src="5.png"></p>
</li>
</ul>
<h1 id="系统建模"><a href="#系统建模" class="headerlink" title="系统建模"></a>系统建模</h1><h2 id="Differential-Equations-Model-of-Physical-Systems"><a href="#Differential-Equations-Model-of-Physical-Systems" class="headerlink" title="Differential Equations Model of Physical Systems"></a>Differential Equations Model of Physical Systems</h2><h3 id="Electrical-Circuits"><a href="#Electrical-Circuits" class="headerlink" title="Electrical Circuits"></a>Electrical Circuits</h3><ul>
<li><p>电阻：\(v_R(t) = Ri_R(t)\)</p>
<p><img src="6.png"></p>
</li>
<li><p>电容：\(v_C(t) = \frac{1}{C}\int_0^t i_C(\tau)\mathrm{d}\tau\) 或者 \(i_C(t) = C\frac{\mathrm{d}v_C(t)}{\mathrm{d}t}\)</p>
<p><img src="7.png"></p>
</li>
<li><p>电感：\(v_L(t) = L\frac{\mathrm{d}i_L(t)}{\mathrm{d}t}\)</p>
<p><img src="8.png"></p>
</li>
</ul>
<h3 id="Linear-motions"><a href="#Linear-motions" class="headerlink" title="Linear motions"></a>Linear motions</h3><p>(force-displacement relationship)</p>
<ul>
<li><p>质量：\(f(t) = M\frac{\mathrm{d}^2x(t)}{\mathrm{d}t}\)</p>
<p><img src="9.png"></p>
</li>
<li><p>弹簧：\(f(t) = Kx(t)\)</p>
<p><img src="10.png"></p>
</li>
<li><p>阻尼：\(f(t) = f_v\frac{\mathrm{d}x(t)}{\mathrm{d}t}\)</p>
<p><img src="11.png"></p>
</li>
</ul>
<h3 id="Angular-motions"><a href="#Angular-motions" class="headerlink" title="Angular motions"></a>Angular motions</h3><p>(torque-angular displacement relationship)</p>
<ul>
<li><p>惯性：\(T(t) = J\frac{\mathrm{d}^2\theta(t)}{\mathrm{d}t}\)</p>
<p><img src="12.png"></p>
</li>
<li><p>弹簧：\(T(t) = K\theta(t)\)</p>
<p><img src="13.png"></p>
</li>
<li><p>阻尼：\(T(t) = D\frac{\mathrm{d}\theta(t)}{\mathrm{d}t}\)</p>
<p><img src="14.png"></p>
</li>
</ul>
<h2 id="线性化"><a href="#线性化" class="headerlink" title="线性化"></a>线性化</h2><p>许多实体系统是非线性化的。所以需要在 operating point 附近对其进行线性化处理。</p>
<p>方法是泰勒级数展开……</p>
<h1 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h1><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>代数复习</span></div>
    <div class="hide-content"><object data="./formulae_book.pdf" type="application/pdf" width="100%" height="500px">
    <embed src="./formulae_book.pdf">
        <p>This browser does not support PDFs. Please download the PDF to view it: <a href="./formulae_book.pdf">Download PDF</a>.</p>
    </embed>
</object>
</div></div>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>电路复习</span></div>
    <div class="hide-content"><object data="./ee3331c-cct.pdf" type="application/pdf" width="100%" height="500px">
    <embed src="./ee3331c-cct.pdf">
        <p>This browser does not support PDFs. Please download the PDF to view it: <a href="./ee3331c-cct.pdf">Download PDF</a>.</p>
    </embed>
</object>
</div></div>

<hr>
<p>感觉这门课会比较难…信号与系统那门就学得不是很扎实，数学方面也是忘得差不多了。欸，加油吧。</p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>反馈控制系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Latex 数学符号</title>
    <url>/posts/2022-01-21-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><object data="./symbols.pdf" type="application/pdf" width="100%" height="800px">
    <embed src="./symbols.pdf">
        <p>This browser does not support PDFs. Please download the PDF to view it: <a href="./symbols.pdf">Download PDF</a>.</p>
    </embed>
</object>
]]></content>
      <tags>
        <tag>Latex</tag>
      </tags>
  </entry>
  <entry>
    <title>反馈控制系统学习笔记#2</title>
    <url>/posts/2022-01-21-02/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<h1 id="拉普拉斯变换"><a href="#拉普拉斯变换" class="headerlink" title="拉普拉斯变换"></a>拉普拉斯变换</h1><p>拉普拉斯变换（Laplace Transform）可帮助简化计算。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>信号（函数）\(f\)的拉普拉斯变换为函数\(F = \mathcal{L}(f)\)并且其定义为：</p>
<p>\[<br>F(s) = \int_{0^-}^{\infty}f(t)e^{-st}\mathrm{d}t<br>\]</p>
<p>其中\(s\)为复数并被称为频率参数（frequency variable）。</p>
<p>对于一些信号使用上述方程会很复杂。所以通常使用拉普拉斯变换的性质和常见的拉普拉斯变换对来进行求解。</p>
<h2 id="常见的拉普拉斯变换对"><a href="#常见的拉普拉斯变换对" class="headerlink" title="常见的拉普拉斯变换对"></a>常见的拉普拉斯变换对</h2><table>
<thead>
<tr>
<th>\(f(t)\)</th>
<th>\(F(s)\)</th>
</tr>
</thead>
<tbody><tr>
<td>\(\delta (t)\)</td>
<td>\(1\)</td>
</tr>
<tr>
<td>\(U(t)\)</td>
<td>\(\frac{1}{s}\)</td>
</tr>
<tr>
<td>\(t\)</td>
<td>\(\frac{1}{s^2}\)</td>
</tr>
<tr>
<td>\(t^k\)</td>
<td>\(\frac{k!}{s^{k+1}}\)</td>
</tr>
<tr>
<td>\(e^{-at}\)</td>
<td>\(\frac{1}{s+a}\)</td>
</tr>
<tr>
<td>\(te^{-at}\)</td>
<td>\(\frac{1}{(s+a)^2}\)</td>
</tr>
<tr>
<td>\(\frac{1}{(k-1)!}t^{k-1}e^{-at}\)</td>
<td>\(\frac{1}{(s+a)^k}\)</td>
</tr>
<tr>
<td>\(\sin (bt)\)</td>
<td>\(\frac{b}{s^2+b^2}\)</td>
</tr>
<tr>
<td>\(\cos (bt)\)</td>
<td>\(\frac{s}{s^2+b^2}\)</td>
</tr>
<tr>
<td>\(e^{-at}\sin (bt)\)</td>
<td>\(\frac{b}{(s+a)^2+b^2}\)</td>
</tr>
<tr>
<td>\(e^{-at}\cos (bt)\)</td>
<td>\(\frac{s+a}{(s+a)^2+b^2}\)</td>
</tr>
</tbody></table>
<h2 id="拉普拉斯变换的性质"><a href="#拉普拉斯变换的性质" class="headerlink" title="拉普拉斯变换的性质"></a>拉普拉斯变换的性质</h2><ul>
<li><p><strong>Linearity</strong>: if \(f\) and \(g\) are any signals and \(\alpha\) and \(\beta\) are any scalar, we have</p>
<p>\[<br>\mathcal{L}\{\alpha f(t) + \beta g(t)\} = \alpha F(s) + \beta G(s)<br>\]</p>
</li>
<li><p><strong>Derivative</strong>: if a signal \(f\) is continous at \(t = 0\), then</p>
<p>\[<br>\mathcal{L}(f^{\prime}(t)) = s F(s) - f(0^-)<br>\]</p>
<ul>
<li>higher-order derivatives\[<br>\mathcal{L}(f^n(t)) = s^n F(s) - \sum_{k = 0}^{n - 1}s^{n-1-k}f^{k}(0^-)<br>\]</li>
</ul>
</li>
<li><p><strong>Integral</strong>:</p>
<p>if</p>
<p>\[<br>g(t) = \int_0^t f(\tau)\mathrm{d}\tau<br>\]</p>
<p>then</p>
<p>\[<br>G(s) = \frac{1}{s} F(s)<br>\]</p>
</li>
<li><p><strong>Derivative of Transform</strong> (Multiplication by time):</p>
<p>\[<br>\begin{align}<br>F^{\prime}(s) &amp;= \mathcal{L}\{-tf(t)\}<br>\newline<br>\frac{\mathrm{d}^n}{\mathrm{d}s^n}F(s) &amp;= (-1)^n\mathcal{L}\{t^nf(t)\}<br>\end{align}<br>\]</p>
</li>
<li><p><strong>Time delay</strong> (shift in time-domain):</p>
<p>if a function \(f(t)\) is delayed by \(t_0\) unit of time</p>
<p>\[<br>g(t) =<br>\begin{cases}<br>0,\ &amp;0 \leq t &lt; t_0<br>\newline<br>f(t - t_0),\ &amp;t \geq t_0<br>\end{cases}<br>\]</p>
<p>its Laplace transform is then given by</p>
<p>\[<br>G(s) = e^{-st_0}F(s)<br>\]</p>
</li>
<li><p><strong>Shift in frequency</strong> (shift in s-domain):</p>
<p>\[<br>\mathcal{L}(e^{-at}f(t)) = F(s + a)<br>\]</p>
</li>
<li><p><strong>Final value theorem</strong>:</p>
<p>\[<br>\lim_{s \rightarrow 0} sF(s) = \lim_{t \rightarrow \infty} f(t)<br>\]</p>
<p>Allows us to compute the constant steady-state value of a time function given its Laplace transform <em>without having to solve the differential equation or perform inverse laplace transform</em>.</p>
<p>Note: the final value theorem is only applicable to stable system.</p>
</li>
<li><p><strong>Convolution</strong>:</p>
<p>The convolution of two signals \(f(t)\) and \(g(t)\) (denoted by \(h = f * g\)) is given by</p>
<p>\[<br>\begin{align}<br>h(t) &amp;= \int_0^t f(\tau)g(t - \tau)\mathrm{d}\tau<br>\newline<br>h(t) &amp;= \int_0^t f(t - \tau)g(\tau)\mathrm{d}\tau<br>\end{align}<br>\]</p>
<p>It can be shown that the Laplace transform is given by</p>
<p>\[<br>H(s) = F(s)G(s)<br>\]</p>
<p>Laplace transform turns convolution into multiplication.</p>
</li>
</ul>
<p>汇总成表…</p>
<table>
<thead>
<tr>
<th>Time Function</th>
<th>Laplace Transform</th>
<th>Comments</th>
</tr>
</thead>
<tbody><tr>
<td>\(\alpha f(t) + \beta g(t)\)</td>
<td>\(\alpha F(s) + \beta G(s)\)</td>
<td>Superposition</td>
</tr>
<tr>
<td>\(f(t - t_0)\)</td>
<td>\(e^{-st_0}F(s)\)</td>
<td>Time delay</td>
</tr>
<tr>
<td>\(f(at)\)</td>
<td>\(\frac{1}{|a|}F(\frac{s}{a})\)</td>
<td>Time scaling</td>
</tr>
<tr>
<td>\(e^{-at}f(t)\)</td>
<td>\(F(s + a)\)</td>
<td>Shift in frequency</td>
</tr>
<tr>
<td>\(f^{n}(t)\)</td>
<td>\(s^nF(s) - \sum_{k = 0}^{n-1}s^{n-1-k}f^k(0^-)\)</td>
<td>Differentiation</td>
</tr>
<tr>
<td>\(\int_0^t f(\tau)\mathrm{d}\tau\)</td>
<td>\(\frac{1}{s} F(s)\)</td>
<td>Integration</td>
</tr>
<tr>
<td>\(f(t) * g(t)\)</td>
<td>\(F(s)G(s)\)</td>
<td>Convolution</td>
</tr>
<tr>
<td>\(tf(t)\)</td>
<td>\(-\frac{\mathrm{d}}{\mathrm{d}s}F(s)\)</td>
<td>Multiplication by time</td>
</tr>
<tr>
<td>\(f(0^+)\)</td>
<td>\(\lim_{s\rightarrow \infty} sF(s)\)</td>
<td>Initial value theorem</td>
</tr>
<tr>
<td>\(\lim_{t\rightarrow \infty} f(t)\)</td>
<td>\(\lim_{s\rightarrow 0} sF(s)\)</td>
<td>Final value theorem</td>
</tr>
</tbody></table>
<h2 id="拉普拉斯逆变换"><a href="#拉普拉斯逆变换" class="headerlink" title="拉普拉斯逆变换"></a>拉普拉斯逆变换</h2><p>The easiest way to find \(f(t)\) from \(F(s)\), if \(F(s)\) is rational, is to expand \(F(s)\) as a sum of simpler terms that can be found in the tables.</p>
<p>The basic tool to perform this operation is called <strong>partial-fraction expansion</strong>.</p>
<h1 id="传递函数"><a href="#传递函数" class="headerlink" title="传递函数"></a>传递函数</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>The transfer function, \(G(s)\), of a system is the transfer gain from input, \(U(s)\), to output, \(Y (s)\).</p>
<p>It is the ratio of the Laplace transform of the output to the Laplace transform of the input:</p>
<p>\[<br>G(s) = \frac{Y(s)}{U(s)}<br>\]</p>
<p>这里有个重要的假设是<strong>零初始条件</strong>。</p>
<p>如果\(u(t)\)是一个 unit impulse，那么\(U(s) = 1\)，所以可得\(Y(s) = G(s)\)。说明传递函数\(G(s)\)是 unit impulse response 也就是\(h(t)\)的拉普拉斯变换。</p>
<h2 id="Non-zero-initial-conditions"><a href="#Non-zero-initial-conditions" class="headerlink" title="Non-zero initial conditions"></a>Non-zero initial conditions</h2><p>Most real-world problems do not satisfy the zero-initial conditions assumption which is key to derivation of the transfer function.</p>
<p>It is possible to relax the zero initial condition assumption. Output signal may be derived from transfer functions as long as system is initially at rest, i.e., \(\left(y(0)\neq 0;\ \frac{\mathrm{d}^ny}{\mathrm{d}t^n} = 0\right)\)</p>
<p>For systems with non-zero initial conditions, we introduce the following dummy output and input variables:</p>
<p>\[<br>\begin{align}<br>\tilde{y}(t) &amp;= y(t) - y(0)<br>\newline<br>\tilde{u}(t) &amp;= u(t) - u(0)<br>\end{align}<br>\]</p>
<p>其中\(y(0)\)和\(u(0)\)分别是输出和输入信号的初始状态。现在\(\tilde{y}(0)\)和\(\tilde{u}(0)\)就都为零了。</p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>反馈控制系统</tag>
      </tags>
  </entry>
  <entry>
    <title>反馈控制系统学习笔记#3</title>
    <url>/posts/2022-01-25-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<h1 id="LTI-系统的响应"><a href="#LTI-系统的响应" class="headerlink" title="LTI 系统的响应"></a>LTI 系统的响应</h1><p>有这么几种响应的类型：</p>
<ul>
<li><p>脉冲响应（impulse response）</p>
<p>和系统的传递函数相关</p>
</li>
<li><p>阶跃响应（step response）</p>
<p>在实践中比较常见，与一些 LTI 系统中的物理参数有关</p>
</li>
<li><p>正弦响应（sinusoidal response）</p>
<p>和系统的频率响应相关</p>
</li>
</ul>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>A rational transfer function can be described either as a ratio of two polynomials in \(s\)</p>
<p>\[<br>H(s) = \frac{b(s)}{a(s)} = \frac{b_ms^m + b_{m-1}s^{m-1}+\cdots + b_1s + b_0}{a_ns^n + a_{n-1}s^{n-1}+\cdots + a_1s + a_0}<br>\]</p>
<p>or as a ratio in factored pole-zero form</p>
<p>\[<br>H(s) = K \frac{\prod_{i=1}^m (s - z_i)}{\prod_{i-1}^n (s - p_i)}<br>\]</p>
<ul>
<li>\(K = b_m / a_n\)</li>
<li>the roots of the numerator, \(z_1, z_2, \ldots , z_m\) are called the finite zeros of the system</li>
<li>the roots of the denominator, \(p_1, p_2, \ldots , p_n\) are called the finite poles of the system</li>
<li>assuming the coefficients of \(a\) and \(b\) are real, complex poles or zeros come in complex conjugate pairs</li>
</ul>
<h2 id="Poles-and-zeros-plots"><a href="#Poles-and-zeros-plots" class="headerlink" title="Poles and zeros plots"></a>Poles and zeros plots</h2><p>Poles and zeros of a rational functions are often shown in a pole-zero plot: poles marked by “×”, zeros marked by “○”.</p>
<p>例子：</p>
<p>\[<br>F(s) = k \frac{(s+1.5)(s^2+2s+5)}{(s+2.5)(s-2)(s^2-2s+2)}<br>\]</p>
<p><img src="1.png"></p>
<h1 id="脉冲响应"><a href="#脉冲响应" class="headerlink" title="脉冲响应"></a>脉冲响应</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>一个 LTI 系统的脉冲响应是系统在输入信号\(u(t)\)为 unit impulse function 也就是\(\delta (t)\)且伴随 zero inital conditions 时的输出信号。</p>
<p>Suppose the transfer function representation of a LTI system is</p>
<p>\[<br>G(s) = \frac{Y(s)}{U(s)}<br>\]</p>
<p>Its impulse response is given by \(u(t) = \delta (t) \rightarrow U(s) = 1\). We then have</p>
<p>\[<br>Y(s) = G(s)<br>\]</p>
<p>Inverse LT gives</p>
<p>\[<br>y(t) = \mathcal{L}^{-1}\{ G(s) \} = g(t)<br>\]</p>
<h2 id="First-order-system"><a href="#First-order-system" class="headerlink" title="First-order system"></a>First-order system</h2><p>考虑一个 first-order system</p>
<p>\[<br>G(s) = \frac{1}{s + \sigma}<br>\]</p>
<p>使用拉普拉斯逆变换可得</p>
<p>\[<br>g(t) = e^{-\sigma t}<br>\]</p>
<p>可以发现当\(\sigma &gt; 0\)时，随着\(t \rightarrow \infty\)，\(g(t) \rightarrow 0\)。那么脉冲响应是稳定（stable）的。</p>
<p>如果\(\sigma &lt; 0\)，指数项随着时间增长，脉冲响应不稳定（unstable）。</p>
<p>\(\sigma\)越大，衰减到零的速度越快。</p>
<h2 id="Second-order-system"><a href="#Second-order-system" class="headerlink" title="Second-order system"></a>Second-order system</h2><p>一个标准的 2nd order transfer function 可被表示为</p>
<p>\[<br>H(s) = \frac{K \omega_n^2}{s^2 + 2\zeta\omega_n s + \omega_n^2} = \frac{K\omega_n^2}{(s + \zeta\omega_n)^2 + \omega_n^2(1 - \zeta^2)}<br>\]</p>
<p>其中\(K\)是系统的 Gain。</p>
<p>A pair of complex poles, can be defined in terms of their real and imaginary parts, as follows:</p>
<p>\[<br>s = -\sigma \pm j\omega_d<br>\]</p>
<p>where</p>
<p>\[<br>\sigma = \zeta \omega_n \ \mbox{and}\ \omega_d = \omega_n \sqrt{1 - \zeta^2}<br>\]</p>
<p>\(\zeta\) is the damping ratio and \(\omega_n\) is the undamped natural frequency.</p>
<p><img src="2.png"></p>
<p>它的脉冲响应为</p>
<p>\[<br>y(t) = h(t) = \frac{K\omega_n}{\sqrt{1 - \zeta^2}}e^{-\sigma t}\sin (\omega_d t)<br>\]</p>
<h2 id="脉冲响应和-s-plane-上-pole-locations-的关系"><a href="#脉冲响应和-s-plane-上-pole-locations-的关系" class="headerlink" title="脉冲响应和 s-plane 上 pole locations 的关系"></a>脉冲响应和 s-plane 上 pole locations 的关系</h2><p><img src="3.png"></p>
<ul>
<li>real, positive poles correspond to growing exponential terms</li>
<li>real, negative poles correspond to decaying exponential terms</li>
<li>a pole at \(s = 0\) corresponds to a constant term</li>
<li>complex pole pairs with positive real part correspond to exponentially growing sinusoidal terms</li>
<li>complex pole pairs with negative real part correspond to exponentially decaying sinusoidal terms</li>
<li>pure imaginary pole pairs correspond to sinusoidal terms</li>
<li>repeated poles yield same types of terms, multiplied by powers of \(t\)</li>
</ul>
<h1 id="阶跃响应"><a href="#阶跃响应" class="headerlink" title="阶跃响应"></a>阶跃响应</h1><h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><p>The step response is the response of the system \(G(s)\) to a unit step input \(u(t) = t\).</p>
<p>因为\(U(s) = \frac{1}{s}\)，所以可得阶跃响应</p>
<p>\[<br>y(t) = \mathcal{L}^{-1}\left\{\frac{G(s)}{s}\right\}<br>\]</p>
<h2 id="DC-gain"><a href="#DC-gain" class="headerlink" title="DC gain"></a>DC gain</h2><p><strong>Static/Steady-state/DC gain</strong>: this is the ratio of the output of a system to its input (presumed constant) after all transients have decayed.</p>
<p>If the magnitude of the step input is \(A\), i.e. \(u(t) = AU(t) \rightarrow U(s) = \frac{A}{s}\), we then have (via Final Value Theorem)</p>
<p>\[<br>\lim_{t \rightarrow \infty} y(t) = \lim_{s \rightarrow 0}sY(s) = \lim_{s \rightarrow 0}sG(s)\frac{A}{s} = AG(0)<br>\]</p>
<p>Hence, DC gain,</p>
<p>\[<br>K = \frac{\lim_{t \rightarrow \infty}y(t)}{\lim_{t \rightarrow \infty}u(t)} = \frac{AG(0)}{A} = G(0)<br>\]</p>
<h2 id="Integrator"><a href="#Integrator" class="headerlink" title="Integrator"></a>Integrator</h2><p>\[<br>y(t) = \int_0^t K_iu(\tau)\mathrm{d}\tau<br>\]</p>
<p>其中\(K_i\)是 integrator gain。</p>
<p>传递函数为</p>
<p>\[<br>G(s) = \frac{Y(s)}{U(s)} = \frac{K_i}{s}<br>\]</p>
<p>阶跃响应为</p>
<p>\[<br>Y(s) = G(s)U(s) = G(s)\frac{1}{s} = \frac{K_i}{s}<br>\]</p>
<p>通过拉普拉斯逆变换得</p>
<p>\[<br>y(t) = K_i t<br>\]</p>
<h2 id="Differentiator"><a href="#Differentiator" class="headerlink" title="Differentiator"></a>Differentiator</h2><p>\[<br>y(t) = K_d \frac{\mathrm{d}u(t)}{\mathrm{d}t}<br>\]</p>
<p>其中\(K_d\)是 derivative gain。</p>
<p>传递函数为</p>
<p>\[<br>G(s) = \frac{Y(s)}{U(s)} = K_d s<br>\]</p>
<p>阶跃响应为</p>
<p>\[<br>Y(s) = G(s)U(s) = \frac{G(s)}{s} = K_d<br>\]</p>
<p>通过拉普拉斯逆变换得</p>
<p>\[<br>y(t) = K_d \delta (t)<br>\]</p>
<h2 id="First-order-systems"><a href="#First-order-systems" class="headerlink" title="First-order systems"></a>First-order systems</h2><p>\[<br>\tau \frac{\mathrm{d}y(t)}{\mathrm{d}t} + y(t) = Ku(t)<br>\]</p>
<p>其中\(K\)是 steady-state/static gain 并且\(\tau\)是时间常数（time constant）。</p>
<p>传递函数为</p>
<p>\[<br>G(s) = \frac{Y(s)}{U(s)} = \frac{K}{\tau s + 1};\ y(0) = 0<br>\]</p>
<p>阶跃响应为</p>
<p>\[<br>Y(s) = G(s)U(s) = \frac{K}{\tau s + 1}\frac{1}{s} = \frac{K}{s} - \frac{K\tau}{\tau s + 1}<br>\]</p>
<p>通过拉普拉斯逆变换得</p>
<p>\[<br>y(t) = K - Ke^{-t/\tau}<br>\]</p>
<h2 id="Second-order-systems"><a href="#Second-order-systems" class="headerlink" title="Second-order systems"></a>Second-order systems</h2><p>\[<br>\frac{\mathrm{d}^2 y(t)}{\mathrm{d} t^2} + 2\zeta \omega_n \frac{\mathrm{d}y(t)}{\mathrm{d}t} + \omega_n^2y(t) = K\omega_n^2u(t)<br>\]</p>
<p>其中\(K\)，\(\zeta\)和\(\omega_n\)分别是 steady-state/static gain，damping ratio 和 undamped natural frequency。</p>
<p>传递函数为</p>
<p>\[<br>G(s) = \frac{Y(s)}{U(s)} = \frac{K\omega_n^2}{s^2 + 2\zeta\omega_n s + \omega_n^2},\ y(0) = y\prime (0) = 0<br>\]</p>
<p>阶跃响应为</p>
<p>\[<br>Y(s) = \ldots = \frac{K}{s} - \frac{K(s + \zeta\omega_n)}{(s + \zeta\omega_n)^2 + \omega_n^2(1-\zeta^2)} -\frac{K\zeta}{\sqrt{1-\zeta^2}}\frac{\omega_n\sqrt{1-\zeta^2}}{(s + \zeta\omega_n)^2 + \omega_n^2(1 - \zeta^2)}<br>\]</p>
<p>通过拉普拉斯逆变换得</p>
<p>\[<br>y(t) = \ldots = K\left(1 - \frac{e^{-\sigma t}}{\sqrt{1-\zeta^2}}\sin [\omega_d t + \phi]\right)<br>\]</p>
<p>\(|\mathcal{R}\{s\}| = \sigma = \zeta \omega_{n}\)决定 exponential envelope。</p>
<p>\(\mathcal{L}\{s\} = \omega_{d} = \omega_{n}\sqrt{1 - \zeta^2}\)决定 frequency of the sinusoidal signal。</p>
<p><img src="3_5.png"></p>
<h2 id="阶跃响应和-s-plane-上-pole-locations-的关系"><a href="#阶跃响应和-s-plane-上-pole-locations-的关系" class="headerlink" title="阶跃响应和 s-plane 上 pole locations 的关系"></a>阶跃响应和 s-plane 上 pole locations 的关系</h2><p><img src="4.png"></p>
<ul>
<li>\(K\) determines the steady state output response to a step input.</li>
<li>3 types of responses possible: underdamped \(\zeta &lt; 1\), overdamped \(\zeta &gt; 1\) and critically damped \(\zeta = 1\).</li>
<li>For underdamped response<ul>
<li>real part of pole (\(\sigma = \zeta \omega_n\)) determines how quickly the oscillations decay away</li>
<li>imaginary part of pole (\(\omega_d = \omega_n\sqrt{1 - \zeta^2}\)) gives you the frequency of the oscillation</li>
</ul>
</li>
<li>For over- and critically damped systems, they behave more like first order systems, except more sluggish.</li>
</ul>
<p>示例：<a href="https://lpsa.swarthmore.edu/SecondOrder/SOI.html">https://lpsa.swarthmore.edu/SecondOrder/SOI.html</a></p>
<h1 id="时域上的一些规范"><a href="#时域上的一些规范" class="headerlink" title="时域上的一些规范"></a>时域上的一些规范</h1><p>在控制系统设计中，以下几个时域上的规范经常被用到：</p>
<ul>
<li><strong>rise time</strong>, \(t_r\): the time it takes the system to reach the vicinity of its new set point</li>
<li><strong>settling time</strong>, \(t_s\): the time it takes the system transient to decay</li>
<li><strong>overshoot</strong>, \(M_p\): the maximum amount the system overshoots its final value divided by its final value</li>
<li><strong>peak time</strong>, \(t_p\): the time it takes the system to reach the maximum overshoot point</li>
</ul>
<p><img src="5.png"></p>
<h2 id="Rise-time"><a href="#Rise-time" class="headerlink" title="Rise time"></a>Rise time</h2><p>最常见的定义为系统响应从10%到90%稳态值所需要的时间。</p>
<p>不太容易能得到准确的表达式。</p>
<p>对于一个标准的 2nd-order 传递函数，可得近似：</p>
<p><img src="6.png"></p>
<p>\[<br>t_r = \frac{2.16\zeta + 0.60}{\omega_n}\ \mbox{for}\ 0.3 \leq \zeta \leq 0.8<br>\]</p>
<p>取平均值\(\zeta = 0.55\)得</p>
<p>\[<br>t \approx \frac{1.8}{\omega_n}<br>\]</p>
<p>注意：仅适用无 zero 的 2nd-order system，其它系统会有较大误差。</p>
<p>对于给定的\(\zeta\)，越大的\(\omega_n\)会有更快的响应：</p>
<p><img src="7.png"></p>
<p>对于给定的\(\omega_n\)，更小的\(\zeta\)会让响应稍微加快：</p>
<p><img src="8.png"></p>
<h2 id="Overshoot"><a href="#Overshoot" class="headerlink" title="Overshoot"></a>Overshoot</h2><p>\[<br>M_p = Ke^{-\pi \zeta / \sqrt{1 - \zeta^2}},\ 0\leq \zeta &lt;1<br>\]</p>
<p>百分比形式：</p>
<p>\[<br>\%M_p = e^{-\pi\zeta / \sqrt{1 - \zeta^2}} \times 100\%<br>\]</p>
<p><img src="9.png"></p>
<h2 id="Settling-time"><a href="#Settling-time" class="headerlink" title="Settling time"></a>Settling time</h2><p>This is the time required for the transient to decay to a small value so that \(y(t)\) is almost in the steady-state.</p>
<p>Measure of smallness: 1%; 2% or 5% have been used.</p>
<p>Notice that the deviation of \(y\) from \(K\) is enclosed by the envelop of the exponential function</p>
<p>\[<br>K\left(1 \pm \frac{e^{-\zeta \omega_n t}}{\sqrt{1 - \zeta^2}}\right)<br>\]</p>
<p>那么计算2%的 settling time：</p>
<p>\[<br>\begin{align}<br>\frac{e^{-\zeta \omega_n t}}{\sqrt{1 - \zeta^2}} &amp;= 0.02<br>\newline<br>e^{-\zeta\omega_n t} &amp;\approx 0.02<br>\newline<br>\zeta \omega_n t_s &amp;\approx 4<br>\newline<br>t_s &amp;= \frac{4}{\zeta\omega_n} = \frac{4}{\sigma}<br>\end{align}<br>\]</p>
<h2 id="Design-Synthesis"><a href="#Design-Synthesis" class="headerlink" title="Design Synthesis"></a>Design Synthesis</h2><p>Selection of pole and zero locations to meet these time-domain specifications for dynamic response.</p>
<p><img src="10.png"></p>
<h1 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h1><p>A linear time-invariant system is said to be stable if all the roots of the transfer function denominator polynomial have negative real-parts (i.e. all in the left half plane, \(\sigma &lt; 0\)) and is unstable otherwise (\(\sigma &gt; 0\)).</p>
<p>The real-part of the pole determine its stability; for a stable system, all poles must be in the LHP.</p>
<p>If the system has any poles in the RHP, it is unstable.</p>
<p>If the system has nonrepeated \(j\omega\)-axis poles, it is marginally stable.</p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>反馈控制系统</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络：Multiplexing 和 Switching</title>
    <url>/posts/2022-01-27-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Multiplexing"><a href="#Multiplexing" class="headerlink" title="Multiplexing"></a>Multiplexing</h1><h2 id="FDM"><a href="#FDM" class="headerlink" title="FDM"></a>FDM</h2><p><strong>frequency-division multiplexing</strong></p>
<p>With FDM, the frequency spectrum of a link is divided up among the connections established across the link. Specifically, the link dedicates a frequency band to each connection for the duration of the connection. In telephone networks, this frequency band typically has a width of 4kHz (that is, 4,000 hertz or 4,000 cycles per second). The width of the band is called, not surprisingly, the bandwidth. FM radio stations also use FDM to share the frequency spectrum between 88 MHz and 108 MHz, with each station being allocated a specific frequency band.</p>
<p><img src="0.png"></p>
<h2 id="TDM"><a href="#TDM" class="headerlink" title="TDM"></a>TDM</h2><p><strong>time-division multiplexing</strong></p>
<p>For a TDM link, time is divided into frames of fixed duration, and each frame is divided into a fixed number of time slots. When the network establishes a connection across a link, the network dedicates one time slot in every frame to this connection. These slots are dedicated for the sole use of that connection, with one time slot available for use (in every frame) to transmit the connection’s data.</p>
<p><img src="1.png"></p>
<h1 id="Switching"><a href="#Switching" class="headerlink" title="Switching"></a>Switching</h1><h2 id="Packet-Switching"><a href="#Packet-Switching" class="headerlink" title="Packet Switching"></a>Packet Switching</h2><p>To send a message from a source end system to a destination end system, the source breaks long messages into smaller chunks of data known as <strong>packets</strong>. Between source and destination, each packet travels through communication links and packet switches (for which there are two predominant types, routers and link-layer switches). Packets are transmitted over each communication link at a rate equal to the full transmission rate of the link. So, if a source end system or a packet switch is sending a packet of L bits over a link with transmission rate R bits/sec, then the time to transmit the packet is L/R seconds.</p>
<p>Most packet switches use <strong>store-and-forward transmission</strong> at the inputs to the links. Store-and-forward transmission means that the packet switch must receive the entire packet before it can begin to transmit the first bit of the packet onto the outbound link.</p>
<p><img src="2.png"></p>
<p>Each packet switch has multiple links attached to it. For each attached link, the packet switch has an <strong>output buffer</strong> (also called an <strong>output queue</strong>), which stores packets that the router is about to send into that link. The output buffers play a key role in packet switching. If an arriving packet needs to be transmitted onto a link but finds the link busy with the transmission of another packet, the arriving packet must wait in the output buffer. Thus, in addition to the store-and-forward delays, packets suffer output buffer <strong>queuing delays</strong>. These delays are variable and depend on the level of congestion in the network. Since the amount of buffer space is finite, an arriving packet may find that the buffer is completely full with other packets waiting for transmission. In this case, <strong>packet loss</strong> will occur—either the arriving packet or one of the already-queued packets will be dropped.</p>
<p><img src="3.png"></p>
<h2 id="Circuit-Switching"><a href="#Circuit-Switching" class="headerlink" title="Circuit Switching"></a>Circuit Switching</h2><p>In circuit-switched networks, the resources needed along a path (buffers, link transmission rate) to provide for communication between the end systems are reserved for the duration of the communication session between the end systems. In packet-switched networks, these resources are not reserved; a session’s messages<br>use the resources on demand and, as a consequence, may have to wait (that is, queue) for access to a communication link.</p>
<p><img src="4.png"></p>
<p>In contrast, consider what happens when one host wants to send a packet to another host over a packet-switched network, such as the Internet. As with circuit switching, the packet is transmitted over a series of communication links. But different from circuit switching, the packet is sent into the network without reserving any link resources whatsoever. If one of the links is congested because other packets<br>need to be transmitted over the link at the same time, then the packet will have to wait in a buffer at the sending side of the transmission link and suffer a delay. The Internet makes its best effort to deliver packets in a timely manner, but it does not make any guarantees.</p>
<hr>
<p>摘自</p>
<p>James F. Kurose, Keith W. Ross, “Computer Networking: A Top-Down Approach”</p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络：网络分层架构</title>
    <url>/posts/2022-02-02-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Seven-Layer-ISO-OSI-Architecture"><a href="#Seven-Layer-ISO-OSI-Architecture" class="headerlink" title="Seven-Layer ISO-OSI Architecture"></a>Seven-Layer ISO-OSI Architecture</h1><p><img src="1.png"></p>
<ul>
<li><p><strong>Physical layer 物理层</strong></p>
<p>通过物理介质进行非结构化原始数据的传输。</p>
</li>
<li><p><strong>Data link layer 数据链路层</strong></p>
<p>将比特流封装为帧。差错控制和流量控制。</p>
</li>
<li><p><strong>Network layer 网络层</strong></p>
<p>负责选择最佳物理路径进行数据包的路由。拥堵控制。</p>
</li>
<li><p><strong>Transport layer 传输层</strong></p>
<p>保证数据包的完整可靠的传输。拥堵控制、差错控制和流量控制。</p>
</li>
<li><p><strong>Session layer 会话层</strong></p>
<p>负责会话活动。</p>
</li>
<li><p><strong>Presentation layer 表示层</strong></p>
<p>负责数据的格式转换、压缩、加密和解密。</p>
</li>
<li><p><strong>Application layer 应用层</strong></p>
<p>涉及应用层面的网络进程。为电子邮件、文件传输、网络数据共享等信息服务提供支持。</p>
</li>
</ul>
<h1 id="Five-Layer-Internet-Architecture"><a href="#Five-Layer-Internet-Architecture" class="headerlink" title="Five-Layer Internet Architecture"></a>Five-Layer Internet Architecture</h1><p><img src="2.png"></p>
<ul>
<li><strong>Physical layer 物理层</strong></li>
<li><strong>Data link layer 数据链路层</strong></li>
<li><strong>Network layer 网络层</strong></li>
<li><strong>Transport layer 传输层</strong></li>
<li><strong>Application layer 应用层</strong></li>
</ul>
<p>没有了<strong>会话层</strong>和<strong>表示层</strong>。</p>
<h1 id="Protocol-Data-Units-PDUs"><a href="#Protocol-Data-Units-PDUs" class="headerlink" title="Protocol Data Units (PDUs)"></a>Protocol Data Units (PDUs)</h1><p><strong>协议数据单元</strong></p>
<p>在不同层中有不同的名字：</p>
<table>
<thead>
<tr>
<th>OSI Model</th>
<th>PDU</th>
</tr>
</thead>
<tbody><tr>
<td>Application/Presentation/Session</td>
<td>Data</td>
</tr>
<tr>
<td>Transport</td>
<td>Segment</td>
</tr>
<tr>
<td>Network</td>
<td>Packet</td>
</tr>
<tr>
<td>Data Link</td>
<td>Frame</td>
</tr>
<tr>
<td>Physical</td>
<td>Bits</td>
</tr>
</tbody></table>
<p>当一个 PDU 从高层传递到低一层时，低层的头信息（header information）会被加到这个 PDU 上以构成一个新的 PDU。这一过程被称作<strong>封装（encapsulation）</strong>。</p>
<p><img src="3.png"></p>
<p>传输路径：</p>
<p><img src="4.png"></p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络：Framing</title>
    <url>/posts/2022-02-07-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>组帧（framing）指的是将比特封装为帧的过程。</p>
<p><img src="1.png"></p>
<p>如何确定哪些比特组成了一帧？</p>
<h1 id="Byte-Oriented-Protocols"><a href="#Byte-Oriented-Protocols" class="headerlink" title="Byte-Oriented Protocols"></a>Byte-Oriented Protocols</h1><h2 id="Sentinel-based-Approaches"><a href="#Sentinel-based-Approaches" class="headerlink" title="Sentinel-based Approaches"></a>Sentinel-based Approaches</h2><p>BISYNC 的帧格式：</p>
<p><img src="2.png"></p>
<p>BISYNC 使用特殊字符（sentinel characters）来指示帧的起始和结束。帧的开始由 SYN (synchronization) 字符标识，数据部分被包含在 STX (start of text) 和 ETX (end of text) 两个字符之间。</p>
<p>为了解决 ETX 字符可能会被包含在该帧的数据部分中的问题，BISYNC 采用了 character stuffing 的方法：在主体中的 ETX 字符前放置转义字符（DLE, data-link-escape）。</p>
<p>帧格式的最后还包含了 CRC (cyclic redundancy check)，这是用于检测传输错误的。</p>
<p>PPP 的帧格式：</p>
<p><img src="3.png"></p>
<p>和 BISYNC 类似，也使用了 sentinels 和 character stuffing。其中 Flag 为 01111110，Payload 的大小是可变的，但是默认为 1500 字节。</p>
<p>PPP 中的 <strong>byte stuffing</strong>：<strong>发送端将 7E 变为 7D5E，7D 变为 7D5D。接收端删除 7D，并将其后的 5E 变为 7E，5D 变为 7D。</strong></p>
<h2 id="Byte-Counting-Approach"><a href="#Byte-Counting-Approach" class="headerlink" title="Byte-Counting Approach"></a>Byte-Counting Approach</h2><p>DDCMP 的帧格式：</p>
<p><img src="4.png"></p>
<p>COUNT 中指定了主体包含了多少字节。如果 COUNT 部分被污染了，那么就会造成 framing error。</p>
<h1 id="Bit-Oriented-Protocols"><a href="#Bit-Oriented-Protocols" class="headerlink" title="Bit-Oriented Protocols"></a>Bit-Oriented Protocols</h1><p>HDLC 的帧格式：</p>
<p><img src="5.png"></p>
<p>HDLC 使用比特序列 01111110 来标识帧的起始和结束，并使用了 <strong>bit stuffing</strong> 的方法来辨别它们的位置：<strong>发送端在每五个连续的 1 后面插入一个 0，接收端删去五个连续的 1 后面的 0。</strong></p>
<h1 id="Clock-Based-Framing"><a href="#Clock-Based-Framing" class="headerlink" title="Clock-Based Framing"></a>Clock-Based Framing</h1><p>SONET STS-1 的帧格式：</p>
<p><img src="6.png"></p>
<p>接收端通过判断哪一部分在每 9 * 90 = 810 个字节中重复出现来确定 Overhead 的位置并进行同步，从而得到正确的帧。</p>
<p>SONET 实际上比较复杂，这里就不展开了。</p>
<table>
<thead>
<tr>
<th>SONET</th>
<th>Optical carrier</th>
<th>Line rate (Mbps)</th>
</tr>
</thead>
<tbody><tr>
<td>STS-1</td>
<td>OC-1</td>
<td>51.84</td>
</tr>
<tr>
<td>STS-3</td>
<td>OC-3</td>
<td>155.52</td>
</tr>
<tr>
<td>STS-12</td>
<td>OC-12</td>
<td>622.08</td>
</tr>
<tr>
<td>STS-48</td>
<td>OC-48</td>
<td>2488.32</td>
</tr>
<tr>
<td>STS-192</td>
<td>OC-192</td>
<td>9953.28</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络：CRC</title>
    <url>/posts/2022-02-08-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>Cyclic Redundancy Check</strong></p>
<p>在 n 位的数据后添上 k 位的冗余数据构成一帧发送。用于 error detection。</p>
<p>例子：</p>
<ul>
<li>假设 A 要传给 B 的数据为 M = 10100110</li>
<li>那么在 M 末尾添上 k = 3 个 0 得到 M’ = 10100110000</li>
<li>另外我们有人为规定的 C = 1101 (degree k = 3)</li>
<li>然后将 M’ 除以 C 可得余数 R = 011 (k bit remainder)</li>
<li>A 把 R 加到 M 的末尾也就是 M’ + R = 10100110011 发送至 B</li>
<li>B 接收到数据后将其除以 C = 1101 得到的余数如果为零则校验成功</li>
</ul>
<p>注意，所用的除法为“模二除法”，不借位，而是异或。</p>
<p>如上面的例子中的除法，应该是这样：</p>
<p><img src="1.png"></p>
<p>All single-bit errors can be detected as long as C(x)’s x<sup>k</sup> and x<sup>0</sup> terms have non-zero coefficients.</p>
<p>Any odd number of errors can be detected as long as C(x) contains the factor (x + 1).</p>
<p>Any burst error (i.e., sequence of consecutive error bits) for which the length of the burst is less than or equal to k bits can be detected.</p>
<p>Most burst errors of larger than k bits can also be detected.</p>
<p>除了上面例子里用的 CRC-4，还有 CRC-8、CRC-10、CRC-12、CRC-16 以及 ethernet 使用的 CRC-32。</p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>反馈控制系统学习笔记#4</title>
    <url>/posts/2022-02-10-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<h1 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h1><h2 id="Static-analysis"><a href="#Static-analysis" class="headerlink" title="Static analysis"></a>Static analysis</h2><p>考虑下面这个 feedback block：</p>
<p><img src="1.png"></p>
<p>\(r\) 是 reference input signal，\(y\) 是 output signal，\(e\) 是 error signal。\(G\) 被称作 open-loop system，\(K\) 被称作 forward 或 feedback system 或 plant。</p>
<p>暂时考虑静态的情况，所以 \(r\)，\(e\)，\(y\) 都为常实数。假设 \(G\) 和 \(K\) 都是 gain，即 \(y = Ge\)，\(e = r - Ky\)。</p>
<p>让 \(y = Hr\)，那么</p>
<p>\[<br>H = \frac{G}{1 + GK}<br>\]</p>
<p>\(H\) 被称为 closed-loop system gain（\(G\) 被称为 open-loop system gain）。</p>
<p>\(L = GK\) 被称为 loop gain。</p>
<h3 id="Sensitivity"><a href="#Sensitivity" class="headerlink" title="Sensitivity"></a>Sensitivity</h3><p>\[<br>\begin{align}<br>\delta H &amp;\approx \frac{1}{(1 + GK)^2}\delta G<br>\newline<br>\frac{\delta H}{H} &amp;= \frac{1}{1 + GK}\frac{\delta G}{G} = S\frac{\delta G}{G}<br>\end{align}<br>\]</p>
<p>其中的 \(S\) 就是 sensitivity。</p>
<p>\[<br>S = \frac{1}{1 + GK} = \frac{1}{1 + L}<br>\]</p>
<p>不难看出，\(L\) 越大时，sensitivity \(S\) 和 closed-loop gain \(H\) 都越小。换句话说，可以用 gain 的减小换取 sensitivity 的减小。</p>
<h3 id="Disturbance"><a href="#Disturbance" class="headerlink" title="Disturbance"></a>Disturbance</h3><p>考虑输入输出都有干扰的开环系统：</p>
<p><img src="2.png"></p>
<p>\[<br>y = Gr + Gd_{\mbox{in}} + d_{\mbox{out}}<br>\]</p>
<p>考虑输入输出都有干扰的闭环系统：</p>
<p><img src="3.png"></p>
<p>\[<br>y = \frac{G}{1 + GK}r + \frac{G}{1 + GK}d_{\mbox{in}} + \frac{1}{1 + GK}d_{\mbox{out}}<br>\]</p>
<p>不难看出，loop gain 越大时干扰的效果就越小。</p>
<h2 id="Dynamic-analysis"><a href="#Dynamic-analysis" class="headerlink" title="Dynamic analysis"></a>Dynamic analysis</h2><p>假设所有信号 \(r\)，\(y\)，\(e\) 都是动态的，即随时间变化。</p>
<p>使用拉普拉斯变换可得：</p>
<p>\[<br>Y(s) = \frac{G(s)}{1 + G(s)K(s)}U(s) = H(s)U(s)<br>\]</p>
<p>其中 \(H(s)\) 是 closed-loop transfer function。</p>
<p>另外还有 \(L = GK\) （loop transfer function）和 \(S = \frac{1}{1 + GK}\) （sensitivity transfer function）。</p>
<p>具有反馈的系统将会有更小的 gain 和更快的 response。</p>
<h1 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h1><p>In general, closed-loop transfer function for single-input single-output system with negative feedback may be obtained from the rule:</p>
<p>\[<br>\mbox{output} = \frac{\mbox{“direct”}}{1 + \mbox{“loop”}}\cdot \mbox{input}<br>\]</p>
<p>对于一个 closed-loop system 可以从它的 closed-loop characteristic equation 得到 poles:</p>
<p>\[<br>a(s) = a_0 + a_1s + a_2s^2 + \dots + a_ns^n = 0<br>\]</p>
<p>对于阶在四以内的情况可直接判定：</p>
<table>
<thead>
<tr>
<th>Degree</th>
<th>Hurwitz polynoimal</th>
<th>Conditions</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>\(a_0 + s\)</td>
<td>\(a_0 &gt; 0\)</td>
</tr>
<tr>
<td>2</td>
<td>\(a_0 + a_1 s + s^2\)</td>
<td>\(a_0 &gt; 0, a_1 &gt; 0\)</td>
</tr>
<tr>
<td>3</td>
<td>\(a_0 + a_1 s + a_2 s^2 + s^3\)</td>
<td>\(a_0 &gt; 0, a_1 &gt; 0, a_2 &gt; 0, a_2a_1 &gt; a_0\)</td>
</tr>
<tr>
<td>4</td>
<td>\(a_0 + a_1 s + a_2 s^2 + a_3 s^3 + s^4\)</td>
<td>\(a_0 &gt; 0, a_1 &gt; 0, a_2 &gt; 0, a_3 &gt; 0, a_3a_2 &gt; a_1, a_1a_2a_3 - a_3^2a_0 &gt; a_1^2\)</td>
</tr>
</tbody></table>
<p>Root locus plot 是反映反馈的不同所造成的系统的 poles 的位置变化的图。</p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>反馈控制系统</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络：Flow Control 和 Reliable Transmission</title>
    <url>/posts/2022-02-14-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Flow-Control"><a href="#Flow-Control" class="headerlink" title="Flow Control"></a>Flow Control</h1><h2 id="Stop-and-Wait"><a href="#Stop-and-Wait" class="headerlink" title="Stop and Wait"></a>Stop and Wait</h2><p>发送端发送一帧至接收端。在接收端成功接收这一帧之后，它会进行一个回复（ACK）。发送端会在收到 ACK 之前进行持续的等待。接收端可以通过不发送 ACK 的方式中断传输流。</p>
<p>由于发送的帧数很多，这一方式的效率不足。</p>
<h2 id="Sliding-Windows"><a href="#Sliding-Windows" class="headerlink" title="Sliding Windows"></a>Sliding Windows</h2><p>允许多个帧一起传送以提高效率。发送方可在无需等待 ACK 的情况下一次发送至多 W 帧。</p>
<p>每一帧都有序号。ACK 包含了下一帧的序号，即 ACK n 或者 RR n 表示了接收方已经接收到了直到序号为 n - 1 的帧，并准备接收第 n 及以后的帧。</p>
<p>帧的序号为从 0 至 2<sup>k</sup> - 1 的数字，其中 k 为位数。例如当 k = 2 时，帧序号依次为 0，1，2，3，0，1 … 等等。</p>
<p>发送方</p>
<ul>
<li>保持一个尺寸为 W 的窗口</li>
<li>窗口初始大小为 W</li>
<li>窗口大小表示了无需等待 ACK 即可进行传送的最大帧数量</li>
<li>当发送一帧时，窗口大小减去1</li>
<li>当收到一个 ACK 时，窗口大小增加1</li>
<li>已经发送但是没有被回复 ACK 的帧保留在缓冲中</li>
</ul>
<p>接收方</p>
<ul>
<li>保持一个尺寸为 W 的窗口</li>
<li>窗口初始大小为 W</li>
<li>窗口大小表示无需发送 ACK 即可进行接收的最大帧数量</li>
<li>当收到一帧时，窗口大小减去1</li>
<li>当发送一个 ACK 时，窗口大小增加1</li>
<li>已经收到但是没有回复 ACK 的帧保留在缓冲中</li>
</ul>
<p><img src="1.png"></p>
<h1 id="Reliable-Transmission"><a href="#Reliable-Transmission" class="headerlink" title="Reliable Transmission"></a>Reliable Transmission</h1><h2 id="Automatic-Repeat-Request"><a href="#Automatic-Repeat-Request" class="headerlink" title="Automatic Repeat Request"></a>Automatic Repeat Request</h2><h3 id="Stop-and-Wait-ARQ"><a href="#Stop-and-Wait-ARQ" class="headerlink" title="Stop and Wait ARQ"></a>Stop and Wait ARQ</h3><p>在 stop and wait 基础上，发送端使用 timeout 机制。如果接收端收到损坏帧或者丢失帧，那么它不会回复 ACK。发送端在一定时间内没有收到回复，则重新发送。</p>
<p>实现很简单，但是 link utilization 很低。</p>
<blockquote>
<p>Link utilization (U) 定义为数据帧实际花费的传输时间和连接被占用的时间的比值。</p>
</blockquote>
<h3 id="Go-Back-N-ARQ"><a href="#Go-Back-N-ARQ" class="headerlink" title="Go Back N ARQ"></a>Go Back N ARQ</h3><p>建立在 sliding window 的基础上。最大窗口大小为 2<sup>k</sup> - 1。</p>
<p>如果出错，接收端将丢弃该帧以及之后的帧直到该帧被正确接收。发送端返回重新发送该错误帧及之后的帧。</p>
<p>比 stop and wait 具有更好的 link utilization。适用于错误不多的情况。</p>
<p><img src="2.png"></p>
<h3 id="Selective-Reject-ARQ"><a href="#Selective-Reject-ARQ" class="headerlink" title="Selective Reject ARQ"></a>Selective Reject ARQ</h3><p>建立在 sliding window 的基础上。最大窗口大小为 2<sup>k-1</sup>。</p>
<p>如果出错，该帧被拒绝且由发送端重新发送，但是之后的帧会被接收并置于缓冲中。在传递给高层前需要对帧进行安排使之有序。</p>
<p>重新发送的情况减少，具有更好的 link utilization。接收端需要足够大的缓冲。实现比较复杂。</p>
<p><img src="3.png"></p>
<h2 id="Performance-of-ARQ"><a href="#Performance-of-ARQ" class="headerlink" title="Performance of ARQ"></a>Performance of ARQ</h2><ul>
<li>Frame transmission time T<sub>f</sub></li>
<li>Link propagation time T<sub>p</sub></li>
<li>Total time that the link is engaged for one frame transmission denoted by T<sub>total</sub></li>
<li>Transmission time of ACK frame is negligible</li>
<li>Frame error probability denoted by P<sub>f</sub></li>
<li>Errors in ACK frames can be ignored</li>
<li>Errors in retransmitted frames other than the frame initially in error can be ignored</li>
<li>a = link propagation time (T<sub>p</sub>) / frame transmission time (T<sub>f</sub>) = number of frames that can be held on a link</li>
</ul>
<h3 id="Stop-and-Wait-ARQ-1"><a href="#Stop-and-Wait-ARQ-1" class="headerlink" title="Stop and Wait ARQ"></a>Stop and Wait ARQ</h3><p>P<sub>f</sub> = 0 (error-free case)</p>
<ul>
<li>每隔 T<sub>f</sub>+2T<sub>p</sub> 发送一帧，T<sub>total</sub> = T<sub>f</sub> + 2T<sub>p</sub></li>
<li>U = T<sub>f</sub> / T<sub>total</sub> = 1 / (1 + 2a)</li>
</ul>
<p>P<sub>f</sub> &gt; 0 (error case)</p>
<ul>
<li>令 N<sub>r</sub> 表示每一帧被传送的次数，则 N<sub>r</sub> = 1/(1 - P<sub>f</sub>)</li>
<li>U = T<sub>f</sub> / (N<sub>r</sub> × T<sub>total</sub>) = (1 - P<sub>f</sub>) / (1 + 2a)</li>
</ul>
<h3 id="Go-Back-N-ARQ-1"><a href="#Go-Back-N-ARQ-1" class="headerlink" title="Go Back N ARQ"></a>Go Back N ARQ</h3><p>Error-free case</p>
<ul>
<li>U = 1, W &gt;= 1 + 2a，在这个情况下每隔 T<sub>f</sub> 就发送一帧</li>
<li>U = W / (1 + 2a), W &lt; 1 + 2a</li>
</ul>
<p>Error case</p>
<ul>
<li>U = (1 - P<sub>f</sub>) / (1 + 2aP<sub>f</sub>), W &gt;= 1 + 2a</li>
<li>U = [W(1 - P<sub>f</sub>)] / [(1 + 2a)(1 - P<sub>f</sub> + WP<sub>f</sub>)], W &lt; 1 + 2a</li>
</ul>
<h3 id="Selective-Reject-ARQ-1"><a href="#Selective-Reject-ARQ-1" class="headerlink" title="Selective Reject ARQ"></a>Selective Reject ARQ</h3><p>Error-free case</p>
<ul>
<li>和 Go Back N ARQ 一样</li>
</ul>
<p>Error case</p>
<ul>
<li>U = (1 - P<sub>f</sub>), W &gt;= 1 + 2a</li>
<li>U = [W(1 - P<sub>f</sub>)] / (1 + 2a), W &lt; 1 + 2a</li>
</ul>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络：LAN</title>
    <url>/posts/2022-02-14-02/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ethernet"><a href="#Ethernet" class="headerlink" title="Ethernet"></a>Ethernet</h1><p>以太网，IEEE 802.3 标准，是目前应用最普遍的局域网技术。</p>
<h2 id="Medium-Access-Control-MAC"><a href="#Medium-Access-Control-MAC" class="headerlink" title="Medium Access Control (MAC)"></a>Medium Access Control (MAC)</h2><p>媒体接入控制，是数据链路层的子层，用于控制信道的多接入，即多个设备共享信道的情况。</p>
<h2 id="Cabling"><a href="#Cabling" class="headerlink" title="Cabling"></a>Cabling</h2><p>根据线缆的不同，可将 Ethernet LAN 分类。</p>
<table>
<thead>
<tr>
<th>Ethernet Type</th>
<th>Cable Type</th>
<th>Max Distance</th>
<th>Nodes</th>
</tr>
</thead>
<tbody><tr>
<td>10Base5</td>
<td>Thick coax</td>
<td>500m</td>
<td>100</td>
</tr>
<tr>
<td>10Base2</td>
<td>Thin coax</td>
<td>200m</td>
<td>30</td>
</tr>
<tr>
<td>10Base-T</td>
<td>Twisted pair</td>
<td>100m</td>
<td>1024</td>
</tr>
<tr>
<td>10Base-F</td>
<td>Fiber optics</td>
<td>2000m</td>
<td>1024</td>
</tr>
</tbody></table>
<p>等等。</p>
<h2 id="Frame-Format"><a href="#Frame-Format" class="headerlink" title="Frame Format"></a>Frame Format</h2><p>使用了曼彻斯特编码（Manchester encoding）。</p>
<p><img src="1.png"></p>
<ul>
<li><p>Preamble</p>
<ul>
<li>7 字节用于时钟同步。</li>
<li>1 字节用于标记帧的开始。</li>
</ul>
</li>
<li><p>Dest addr 和 Src addr</p>
<p>目的地和源的 MAC 地址。</p>
</li>
<li><p>Type</p>
<p>上层协议的类型。由于上层协议众多，所以在处理数据的时候必须设置该字段，标识数据交付哪个协议处理。</p>
</li>
</ul>
<h2 id="Address"><a href="#Address" class="headerlink" title="Address"></a>Address</h2><p>MAC 地址是唯一的。</p>
<p>MAC 地址共 48 位（6 字节），以十六进制表示。</p>
<p>广播地址：ff:ff:ff:ff:ff:ff</p>
<p>多播地址：01:xx:xx:xx:xx:xx</p>
<h2 id="CSMA-CD"><a href="#CSMA-CD" class="headerlink" title="CSMA - CD"></a>CSMA - CD</h2><p>CSMA - CD: carrier sense multiple access – collision detection.</p>
<h3 id="Carrier-sense"><a href="#Carrier-sense" class="headerlink" title="Carrier sense"></a>Carrier sense</h3><p>A host senses the link and can distinguish if the link is idle or busy (if there is any signal transmission going on the link or not).</p>
<h3 id="Collision-detect"><a href="#Collision-detect" class="headerlink" title="Collision detect"></a>Collision detect</h3><p>A host listens what it is transmitting and therefore can detect if it collides with any other frame transmitted by some other host.</p>
<h3 id="Transmit-Algorithm"><a href="#Transmit-Algorithm" class="headerlink" title="Transmit Algorithm"></a>Transmit Algorithm</h3><p>发送方在发送帧前对线路进行侦听，若线路忙或发生碰撞时，会持续侦听，若发现不忙则立即发送。</p>
<p>若在发送数据过程中检测到碰撞，则进行如下碰撞处理操作：</p>
<ol>
<li><p>发送特殊阻塞信息并立即停止发送数据：特殊阻塞信息是连续几个字节的全 1 信号，此举意在强化碰撞，以使得其它设备能尽快检测到碰撞发生。</p>
</li>
<li><p>采用截断二进制指数避退算法（exponential backoff algorithm）进行发送。即十次之内等待前一次最大等待 slot 个数的两倍之内（[0, 2<sup>i</sup> - 1]）的随机个 slot 再发送，十次后则等待前一次最大等待 slot 个数内（[0, 2<sup>10</sup> - 1]）的随机个 slot 再发送。一个 slot 通常是 51.2μs。尝试 16 次之后仍然失败则放弃发送。</p>
<p>例子：</p>
<ul>
<li><p>1<sup>st</sup> collision: wait for n slots where n is chosen randomly from the interval [0, 1]</p>
</li>
<li><p>2<sup>nd</sup> collision: wait for n slots where n is chosen randomly from in the interval [0, 3]</p>
</li>
<li><p>i<sup>th</sup> collision: wait for n slots where n is chosen randomly from interval [0, 2<sup>i</sup> - 1] (i &lt;= 10) or [0, 2<sup>10</sup> - 1] (i &gt; 10)</p>
</li>
<li><p>Give up after 16 tries</p>
</li>
</ul>
</li>
</ol>
<h1 id="Bus-based-LAN"><a href="#Bus-based-LAN" class="headerlink" title="Bus-based LAN"></a>Bus-based LAN</h1><p><img src="2.png"></p>
<ul>
<li>Bus configuration</li>
<li>Traditional Ethernet</li>
<li>All hosts share the total capacity</li>
<li>One station transmits, others receive</li>
<li>Cable cut disconnects the network</li>
</ul>
<h1 id="Hub-based-LAN"><a href="#Hub-based-LAN" class="headerlink" title="Hub-based LAN"></a>Hub-based LAN</h1><p><img src="3.png"></p>
<ul>
<li>Star configuration</li>
<li>When a frame is received on a port, the hub copies it to all the other ports</li>
<li>All hosts share the total capacity</li>
<li>One host transmits, others receive</li>
<li><strong>Half duplex</strong></li>
<li>Hub can recognize a malfunctioning host that jams the network and remove it from the network</li>
<li>Cable cut does not disconnect the network</li>
</ul>
<h1 id="Switch-based-LAN"><a href="#Switch-based-LAN" class="headerlink" title="Switch-based LAN"></a>Switch-based LAN</h1><p><img src="4.png"></p>
<ul>
<li>Star configuration</li>
<li>Store and Forward Packet Switch, use buffer to keep the excess frames</li>
<li>More than one pair can communicate simultaneously</li>
<li><strong>Full duplex</strong></li>
<li>Switch with N 10-Mbps ports: total capacity can reach to N*10 Mbps</li>
<li>Cable cut does not disconnect the network</li>
</ul>
<h1 id="Extended-LAN"><a href="#Extended-LAN" class="headerlink" title="Extended LAN"></a>Extended LAN</h1><p>Extended LAN: interconnection of two or more LANs by one or more bridges.</p>
<p><img src="5.png"></p>
<p>Learning bridges：每一个 bridge 会维护一个 forwarding table 用于记录哪个端口可以到达哪个 host。这是一个动态学习的过程。每当有一帧传入，它就会记录下源 host 与该端口的对应关系，如果目标 host 在表中存在，那么就转发至目标端口，否则会转发至所有其它端口。</p>
<p><img src="6.png"></p>
<p>为了防止 loop 的出现，需要用到 spanning tree algorithm。</p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络：Wireless Networks</title>
    <url>/posts/2022-02-17-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Wireless-Links"><a href="#Wireless-Links" class="headerlink" title="Wireless Links"></a>Wireless Links</h1><p>大多数无线连接是非对称的，即两个端点为不同类型的节点。其中一个被称为 base station，大部分情况下不可移动，具有与因特网或其它网络的有线连接。另一个被称为 client node，大部分情况下可移动。</p>
<p><img src="1.png"></p>
<p>可移动性可分为三个级别：</p>
<ul>
<li>无移动性 - WiMAX</li>
<li>基站范围内可移动 - Bluetooth</li>
<li>基站间可移动 - 4G/5G and Wi-Fi</li>
</ul>
<p>另外还有一种无线连接的方式，即 mesh or hoc network。</p>
<p><img src="2.png"></p>
<h1 id="Wi-Fi"><a href="#Wi-Fi" class="headerlink" title="Wi-Fi"></a>Wi-Fi</h1><h2 id="Collision-Avoidance"><a href="#Collision-Avoidance" class="headerlink" title="Collision Avoidance"></a>Collision Avoidance</h2><h3 id="Hidden-Node-Problem"><a href="#Hidden-Node-Problem" class="headerlink" title="Hidden Node Problem"></a>Hidden Node Problem</h3><p><img src="3.png"></p>
<p>Although A and C are hidden from each other, their signals can collide at B. </p>
<h3 id="Exposed-Node-Problem"><a href="#Exposed-Node-Problem" class="headerlink" title="Exposed Node Problem"></a>Exposed Node Problem</h3><p><img src="4.png"></p>
<p>Although B and C are exposed to each other’s signals, there is no interference if B transmits to A while C transmits to D.</p>
<h3 id="CSMA-CA"><a href="#CSMA-CA" class="headerlink" title="CSMA/CA"></a>CSMA/CA</h3><p>802.11 使用 CSMA/CA (carrier-sense multiple access with collision avoidance) 来解决这些问题。</p>
<h4 id="Carrier-Sense"><a href="#Carrier-Sense" class="headerlink" title="Carrier Sense"></a>Carrier Sense</h4><p>在发送数据前，发送方会检查它能否听到其它的传输，从而判断自己能否发送。</p>
<p>由于 hidden node problem，有时发送方无法检测到另外的传输。</p>
<h4 id="Collision-Avoidance-1"><a href="#Collision-Avoidance-1" class="headerlink" title="Collision Avoidance"></a>Collision Avoidance</h4><p>Request to Send/Clear to Send (RTS/CTS) 是一个为了缓解 hidden node problem 的可选机制，发送方会向接收方发送 RTS 以及将要发送的数据长度，接收方则会回复 CTS。其它的节点会在等待一段时间后再尝试发送。</p>
<p>接收方在成功接收并解码数据之后，会向该数据的接收方返回 ACK。如果接收方未收到回复，那么它将再次尝试发送。</p>
<h2 id="Distribution-System"><a href="#Distribution-System" class="headerlink" title="Distribution System"></a>Distribution System</h2><p>有些节点可以移动，有些则固定并连接在有线网络上，被称作接入点（AP）。它们通过分配系统（distribution system）互相连接。</p>
<p><img src="5.png"></p>
<h3 id="Scanning"><a href="#Scanning" class="headerlink" title="Scanning"></a>Scanning</h3><p>当一个节点</p>
<ul>
<li>加入网络时</li>
<li>对当前连接的 AP 不满意时</li>
</ul>
<p>会进行选择 AP 的步骤如下：</p>
<ol>
<li>The node sends a <em>Probe frame</em>.</li>
<li>All APs within reach reply with a <em>Probe Response frame</em>.</li>
<li>The node selects one of the access points and sends that AP an <em>Association Request frame</em>.</li>
<li>The AP replies with an <em>Association Response frame</em>.</li>
</ol>
<p>以上机制被称为 active scannig，因为节点在主动搜寻接入点。</p>
<p>AP 也会周期性地发送 <em>Beacon frame</em> 来公告自己的性能，包括所支持的传输速率等。这被称为 passive scanning。节点可在收到 <em>Beacon frame</em> 后发送 <em>Association Request frame</em> 以加入。</p>
<h2 id="Frame-Format"><a href="#Frame-Format" class="headerlink" title="Frame Format"></a>Frame Format</h2><p><img src="6.png"></p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>反馈控制系统学习笔记#5</title>
    <url>/posts/2022-03-03-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<h1 id="Steady-state-Performance"><a href="#Steady-state-Performance" class="headerlink" title="Steady-state Performance"></a>Steady-state Performance</h1><p><img src="1.png"></p>
<p>DC gain 被定义为 zero frequency 处的 gain。</p>
<p>对于上面这个反馈系统：</p>
<ul>
<li><p>Open-loop t.f.: \(L(s) = G(s)K(s)\), </p>
<p>the <em>open-loop DC gain</em> is \(G(0)K(0)\).</p>
</li>
<li><p>Closed-loop t.f.: \(G_{\mbox{cl}}(s) = \frac{G(s)K(s)}{1 + G(s)K(s)}\), </p>
<p>the <em>closed-loop DC gain</em> is \(G_{\mbox{cl}}(0) = \frac{G(0)K(0)}{1 + G(0)K(0)}\).</p>
</li>
</ul>
<p>Consider steady-state errors in stable systems for general polynomial inputs</p>
<p>\[<br>r(t) = rt^{n - 1}<br>\]</p>
<p>它的拉普拉斯变换为 \(R(s) = \frac{Cr}{s^n}\) where \(C = (n - 1)!\)。</p>
<p>Steady-state error is given by</p>
<p>\[<br>e_{\mbox{ss}} = \lim_{s \rightarrow 0} \frac{Cr}{s^{n - 1} + s^{n - 1}G(s)K(s)}<br>\]</p>
<p>If \(G(s)K(s)\) contains \(n\) or more integrators, then the closed loop system will track an input given by \(r(t) = rt^{n−1}\) without any steady state error.</p>
<p>用表格表示：</p>
<table>
<thead>
<tr>
<th>\(r(t) = rt^{n - 1}\)</th>
<th>Constant input<br>\[\begin{align}r(t) &amp;= r\newline R(s) &amp;= \frac{r}{s}\newline n &amp;= 1\end{align}\]</th>
<th>Ramp input<br>\[\begin{align}r(t) &amp;= rt\newline R(s) &amp;= \frac{r}{s^2}\newline n&amp;= 2\end{align}\]</th>
<th>Parabolic input<br>\[\begin{align}r(t) &amp;= rt^2\newline R(s) &amp;= \frac{2r}{s^3}\newline n &amp;= 3\end{align}\]</th>
</tr>
</thead>
<tbody><tr>
<td>0 integrator in the loop</td>
<td>\(\frac{r}{1 + p}\)</td>
<td>\(\infty\)</td>
<td>\(\infty\)</td>
</tr>
<tr>
<td>1 integrator in the loop</td>
<td>\(0\)</td>
<td>\(\frac{r}{p}\)</td>
<td>\(\infty\)</td>
</tr>
<tr>
<td>2 integrator in the loop</td>
<td>\(0\)</td>
<td>\(0\)</td>
<td>\(\frac{2r}{p}\)</td>
</tr>
<tr>
<td>3 integrator in the loop</td>
<td>\(0\)</td>
<td>\(0\)</td>
<td>\(0\)</td>
</tr>
</tbody></table>
<p>其中 \(p = P(0)\) 而 \(G(s)K(s) = \frac{1}{s^m}P(s)\)。</p>
<p>用 system type 来分类的话：</p>
<table>
<thead>
<tr>
<th>Number of integrators in the loop (System Type)</th>
<th>Constant input<br>\[\begin{align}r(t) &amp;= r\newline R(s) &amp;= \frac{r}{s}\end{align}\]</th>
<th>Ramp input<br>\[\begin{align}r(t) &amp;= rt\newline R(s) &amp;= \frac{r}{s^2}\end{align}\]</th>
<th>Parabolic input<br>\[\begin{align}r(t) &amp;= rt^2\newline R(s) &amp;= \frac{2r}{s^3}\end{align}\]</th>
</tr>
</thead>
<tbody><tr>
<td>Type 0</td>
<td>\(\frac{r}{1 + K_p}\)</td>
<td>\(\infty\)</td>
<td>\(\infty\)</td>
</tr>
<tr>
<td>Type 1</td>
<td>\(0\)</td>
<td>\(\frac{r}{K_v}\)</td>
<td>\(\infty\)</td>
</tr>
<tr>
<td>Type 2</td>
<td>\(0\)</td>
<td>\(0\)</td>
<td>\(\frac{2r}{K_a}\)</td>
</tr>
<tr>
<td>Type k ≥ 3</td>
<td>\(0\)</td>
<td>\(0\)</td>
<td>\(0\)</td>
</tr>
</tbody></table>
<p>其中</p>
<ul>
<li>Position Error Constant: \(K_p = \lim_{s \rightarrow 0} G(s)K(s)\)</li>
<li>Velocity Error Constant: \(K_v = \lim_{s \rightarrow 0} sG(s)K(s)\)</li>
<li>Acceleration Error Constant: \(K_a = \lim_{s \rightarrow 0} s^2G(s)K(s)\)</li>
</ul>
<p><img src="2.png"></p>
<h1 id="Transient-Performance"><a href="#Transient-Performance" class="headerlink" title="Transient Performance"></a>Transient Performance</h1><h2 id="Time-constant"><a href="#Time-constant" class="headerlink" title="Time constant"></a>Time constant</h2><p>Consider the first-order system</p>
<p>\[<br>G(s) = \frac{K}{s\tau + 1}<br>\]</p>
<p>The larger the \(\tau\), the closer the pole to the origin → the slower the response.</p>
<p><img src="3.png"></p>
<h2 id="Damping-ratio"><a href="#Damping-ratio" class="headerlink" title="Damping ratio"></a>Damping ratio</h2><p>Consider the standard second-order system</p>
<p>\[<br>G(s) = \frac{K \omega_n^2}{s^2 + 2\zeta \omega_n s + \omega_n^2}<br>\]</p>
<ul>
<li>\(\zeta &lt; 1\), underdamped system, complex poles: as \(\zeta\) ↑, the response is more sluggish and less oscillations.</li>
<li>\(\zeta = 1\), critically-damped system, repeated real poles with no oscillations.</li>
<li>\(\zeta &gt; 1\), over-damped system, distinct real poles.</li>
</ul>
<p><img src="4.png"></p>
<h2 id="Natural-frequency"><a href="#Natural-frequency" class="headerlink" title="Natural frequency"></a>Natural frequency</h2><p>Consider the standard second-order system</p>
<p>\[<br>G(s) = \frac{K \omega_n^2}{s^2 + 2\zeta \omega_n s + \omega_n^2}<br>\]</p>
<p>The smaller the \(\omega_n\), the more sluggish is the response.</p>
<p><img src="5.png"></p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>反馈控制系统</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络：Transport Layer</title>
    <url>/posts/2022-04-05-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>传输层（Transport Layer），负责端到端（end-to-end）的通信。</p>
<h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><p><img src="header-UDP.jpg" alt="header-UDP"></p>
<p><strong>User Datagram Protocol</strong></p>
<p>是不可靠的传输协议。</p>
<p>虽然不可靠，但是没有建立连接的延迟，header 只有 8 bytes，所以在多媒体流式传输等场景中会被使用。</p>
<h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><p><img src="header-TCP.jpg" alt="header-TCP"></p>
<p><strong>Transmission Control Protocol</strong></p>
<p>可靠的传输协议，面向连接。具有 flow control 和 congestion control。</p>
<p>为保证可靠性，TCP 使用了 checksum 和 sequence number 等手段。</p>
<h2 id="Three-Way-Handshake"><a href="#Three-Way-Handshake" class="headerlink" title="Three-Way Handshake"></a>Three-Way Handshake</h2><p>建立连接需要进行“三次握手”:</p>
<ol>
<li><p>A 向 B 发送一个 SYN</p>
</li>
<li><p>B 返回一个 SYN ACK 来告知收到 SYN</p>
</li>
<li><p>A 向 B 发送 ACK 来告知收到 SYN ACK</p>
</li>
</ol>
<p>在这个过程中双方获知对方的 ISN（initial sequence number）。</p>
<p><img src="handshake.jpg"></p>
<p>关闭连接使用 FIN 或 RST。使用 FIN 会接收剩余的字节，使用 RST 则不会。</p>
<p><img src="1.png"></p>
<h2 id="Retransmission"><a href="#Retransmission" class="headerlink" title="Retransmission"></a>Retransmission</h2><p>关于 ARQ 和 Sliding Window，参见 <a href="/posts/2022-02-14-01/">计算机网络：Flow Control 和 Reliable Transmission</a></p>
<h2 id="Congestion-Control"><a href="#Congestion-Control" class="headerlink" title="Congestion Control"></a>Congestion Control</h2><h3 id="Fast-retransmission"><a href="#Fast-retransmission" class="headerlink" title="Fast-retransmission"></a>Fast-retransmission</h3><p>Timeout-based retransmission 不太有效率。使用 fast-retransmission，会在收到三次 duplicate ACK 之后进行重传。</p>
<p><img src="2.png"></p>
<h3 id="Slow-Start"><a href="#Slow-Start" class="headerlink" title="Slow Start"></a>Slow Start</h3><p>慢启动在初始时设置窗口大小为 1，在每接收到一个 ACK 时将窗口大小增加 1。理论上来说窗口大小是指数增长的，会快速到达阈值。</p>
<p><img src="3.png"></p>
<h3 id="AIMD"><a href="#AIMD" class="headerlink" title="AIMD"></a>AIMD</h3><p>在 timeout 之后，把 CW 重设为 1 重新开始慢启动，并且 ssthresh（slow start threhold）会被设为当 congestion 发生时的 CW 的一半。当 packet loss 发生时 CW 减小为 1/2，即乘性降低（Multiplicative Decrease）。慢启动到达 ssthresh 之后，CW 将不再指数增长，而是和性增长（Additive Increase）。</p>
<p><img src="4.png"></p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络：Network Layer</title>
    <url>/posts/2022-04-05-02/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>网络层（Network Layer）有两个主要的功能：</p>
<ul>
<li><p>Forwarding</p>
<p>Move packets from router’s input to appropriate router output</p>
</li>
<li><p>Routing</p>
<p>Determine route taken by packets from source to destination</p>
</li>
</ul>
<h1 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h1><p>网际协议（Internet Protocol），又称互联网协议。</p>
<h2 id="Datagram-format"><a href="#Datagram-format" class="headerlink" title="Datagram format"></a>Datagram format</h2><p><img src="1.jpg"></p>
<p>关于 fragmentation 和 reassembly：</p>
<p><img src="2.png"></p>
<h2 id="Addressing"><a href="#Addressing" class="headerlink" title="Addressing"></a>Addressing</h2><p>IP 地址是对于 host 和 router interface 的 32-bit 标识。</p>
<p><img src="3.png"></p>
<h3 id="Subnet"><a href="#Subnet" class="headerlink" title="Subnet"></a>Subnet</h3><p>在同一子网中的设备的 IP 地址具有相同的前缀。</p>
<p>子网掩码（subnet mask）是一种用来指明一个 IP 地址的哪些位标识的是主机所在的网络地址以及哪些位标识的是主机地址的位掩码。</p>
<h3 id="CIDR"><a href="#CIDR" class="headerlink" title="CIDR"></a>CIDR</h3><p>无类别域间路由（Classless Inter-Domain Routing）使得 IP 地址的子网标识部分可以为任意长度，即子网掩码长度可变。</p>
<p>地址格式：a.b.c.d/x，其中 x 表示子网标识部分的位数。</p>
<p><img src="5.png"></p>
<h3 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h3><p>动态主机设置协议（Dynamic Host Configuration Protocol）使得设备能够动态地获得 IP 地址。</p>
<p><img src="6.png"></p>
<h3 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h3><p>网络地址转换（Network Address Translation）是用于解决子网下所有设备仅有一个公网 IP 这一情况的技术。</p>
<p><img src="7.jpg"></p>
<p>NAT 设备需要：</p>
<ul>
<li><p>对于传出的数据：将（源 IP 地址，port #）替换为（NAT IP 地址，新 port #）</p>
</li>
<li><p>记录：所有（源 IP 地址，port #）至（NAT IP 地址，新 port #）的转换对</p>
</li>
<li><p>对于传入的数据：将（NAT IP 地址，新 port #）替换为（源 IP 地址，port #）</p>
</li>
</ul>
<h2 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h2><p>前文主要叙述的是 IPv4。相对于 IPv4，IPv6 有更大的地址空间，更快更安全。</p>
<p><img src="4.png"></p>
<h1 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h1><p>互联网控制消息协议（Internet Control Message Protocol）被用于在网际协议中发送控制消息，提供可能发生在通信环境中的各种问题反馈。</p>
<p>可以在 cmd 中尝试下列命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping wu-haitao.github.io</span><br><span class="line">tracert wu-haitao.github.io</span><br></pre></td></tr></table></figure>

<h1 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h1><h2 id="路由算法"><a href="#路由算法" class="headerlink" title="路由算法"></a>路由算法</h2><p>路由算法是用于寻找最小花费路径的算法。</p>
<h3 id="Link-State-Algorithm"><a href="#Link-State-Algorithm" class="headerlink" title="Link State Algorithm"></a>Link State Algorithm</h3><p><a href="https://algorithms.discrete.ma.tum.de/graph-algorithms/spp-dijkstra/index_en.html">Dijkstra’s algorithm</a></p>
<p>路由器需要有完全的拓扑和链路费用信息。</p>
<h3 id="Distance-Vector-Algorithm"><a href="#Distance-Vector-Algorithm" class="headerlink" title="Distance Vector Algorithm"></a>Distance Vector Algorithm</h3><p><a href="https://algorithms.discrete.ma.tum.de/graph-algorithms/spp-bellman-ford/index_en.html">The Bellman-Ford Algorithm</a></p>
<p>Distance Vector 算法是基于 Bellman-Ford Equation 的：</p>
<ul>
<li><p>Define distances at each node <em>x</em></p>
<ul>
<li>d<sub>x</sub>(y) = cost of least-cost path from <em>x</em> to <em>y</em></li>
</ul>
</li>
<li><p>Update distances based on neighbors</p>
<ul>
<li>d<sub>x</sub>(y) = min{c(x, v) + d<sub>v</sub>(y)} over all neighbors</li>
</ul>
</li>
</ul>
<p>具体做法为：</p>
<ul>
<li><p>每一节点</p>
<ul>
<li><p>知道自己与邻居节点之间的路径花费</p>
</li>
<li><p>维护自身的距离向量（包含自身到所有其它节点的路径费用估计值）</p>
</li>
<li><p>维护邻居节点的距离向量</p>
</li>
</ul>
</li>
<li><p>节点会定期向邻居发送自己的距离向量</p>
</li>
<li><p>当一个节点收到来自邻居的新的距离向量时，将其保存并通过 Bellman-Ford Equation 更新自己的距离向量，更新完毕后发送给每一个邻居</p>
</li>
<li><p>最终距离向量会收敛至最小路径</p>
</li>
</ul>
<p>DV 算法是迭代（iterative）、异步（asynchronous）且分布式（distributed）的。</p>
<p>路由器仅需邻居以及与邻居的链路费用的信息。</p>
<h2 id="路由协议"><a href="#路由协议" class="headerlink" title="路由协议"></a>路由协议</h2><h3 id="Intra-AS-Routing"><a href="#Intra-AS-Routing" class="headerlink" title="Intra-AS Routing"></a>Intra-AS Routing</h3><p><strong>Interior Gateway Protocols (IGP)</strong></p>
<ul>
<li><p>RIP: Routing Information Protocol (Distance Vector)</p>
</li>
<li><p>OSPF: Open Shortest Path First (Link State)</p>
</li>
</ul>
<h3 id="Inter-AS-Routing"><a href="#Inter-AS-Routing" class="headerlink" title="Inter-AS Routing"></a>Inter-AS Routing</h3><p><strong>Border Gateway Protocol (BGP)</strong></p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>反馈控制系统学习笔记#6</title>
    <url>/posts/2022-04-17-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<h1 id="Frequency-Response"><a href="#Frequency-Response" class="headerlink" title="Frequency Response"></a>Frequency Response</h1><p>频率响应指的是线性系统对于 sinusoidal inputs 的响应。</p>
<p>考虑以下系统：</p>
<p>$$<br>G(s) = \frac{Y(s)}{U(s)}<br>$$</p>
<p>其中输入 \(u(t)\) 是一个正弦波且振幅为 \(A\)：</p>
<p>$$<br>u(t) = A\sin (\omega_0 t)<br>$$</p>
<p>它的拉普拉斯变换为：</p>
<p>$$<br>U(s) = \frac{A\omega_0}{s^2 + \omega_0^2}<br>$$</p>
<p>那么：</p>
<p>$$<br>Y(s) = G(s)\frac{A\omega_0}{s^2+\omega_0^2}<br>$$</p>
<p>通过一些证明可以得出结论，对于一个稳定的 LTI 系统 \(G(s)\)，在输入为 \(u(t) = A\sin (\omega_0 t)\) 的情况下，steady-state 的输出为：</p>
<p>$$<br>y(t) = B\sin (\omega_0 t + \phi)<br>$$</p>
<p>即输出同样是 sinsoidal，与输入有着相同的频率，在振幅与相位上有变化：</p>
<p>$$<br>\frac{B}{A} = |G(s)|_{s=j\omega_0}\ \mbox{and}\ \phi = \angle G(s)|_{s=j\omega_0}<br>$$</p>
<p><img src="1.png"></p>
<h1 id="伯德图（Bode-plot）"><a href="#伯德图（Bode-plot）" class="headerlink" title="伯德图（Bode plot）"></a>伯德图（Bode plot）</h1><p>The Bode plot shows the real and imaginary parts of the logarithm of \(G(j\omega)\) since</p>
<p>$$<br>\log Me^{j\phi} = \log M + j\phi \log e<br>$$</p>
<ul>
<li>Magnitude plot: the logarithm of magnitude \(\log |G(j\omega)|\) versus \(\log \omega\) or \(20 \log|G(j\omega)|\mbox{db}\) versus \(\log \omega\) where decibels (db) is defined as \(\mbox{db} = 20 \log |G(j\omega)|\).</li>
<li>Phase plot: the phase versus \(\log \omega\).</li>
</ul>
<p><img src="2.png"></p>
<h1 id="极坐标图（Polar-plot）"><a href="#极坐标图（Polar-plot）" class="headerlink" title="极坐标图（Polar plot）"></a>极坐标图（Polar plot）</h1><p>系统 \(G(s)\) 的极坐标图表示了复数 \(G(j\omega) = x+jy\) 在 \(\omega\) 从 \(0\) 向 \(\infty\) 变化时的轨迹。</p>
<p>其中：</p>
<p>$$<br>\begin{align}<br>|G(j\omega)| &amp;= \sqrt{x^2 + y^2}<br>\newline<br>\angle G(j\omega) &amp;= \tan^{-1}(\frac{y}{x})<br>\newline<br>\mathcal{R}[G(j\omega)] &amp;= |G(j\omega)|\cos [\angle G(j\omega)]<br>\newline<br>\mathcal{I}[G(j\omega)] &amp;= |G(j\omega)|\sin [\angle G(j\omega)]<br>\end{align}<br>$$</p>
<p><img src="3.png"></p>
<p>极坐标图可直接从伯德图中得出。</p>
<h1 id="Transfer-Function-Terms"><a href="#Transfer-Function-Terms" class="headerlink" title="Transfer Function Terms"></a>Transfer Function Terms</h1><p>对于各种系统的传递函数，可将其分解为三类组成部分：</p>
<ol>
<li><p>poles/zeros at origin: \(K(j\omega)^n\)</p>
</li>
<li><p>poles/zeros on real-axis: \((j\omega \tau + 1)^{\pm 1}\)</p>
</li>
<li><p>complex conjugate poles/zeros: \([(\frac{j\omega}{\omega_n})^2+2\zeta (\frac{j\omega}{\omega_n})+1]^{\pm 1}\)</p>
</li>
</ol>
<h2 id="K-j-omega-n"><a href="#K-j-omega-n" class="headerlink" title="\(K(j\omega)^n\)"></a>\(K(j\omega)^n\)</h2><h3 id="伯德图"><a href="#伯德图" class="headerlink" title="伯德图"></a>伯德图</h3><p>用 decibel 表示：</p>
<p>$$<br>20\log K |(j\omega)^n| = 20\log K + n\times 20\log |j\omega|<br>$$</p>
<p>对于 gain \(K\) 来说它的 magnitude plot 是一条水平线，phase plot 在 \(K &gt; 0\) 时为 \(0^{\circ}\) ，在 \(K &lt; 0\) 时为 \(180^{\circ}\)。</p>
<p>对于 \(n \neq 0\) 时的 \((j\omega)^n\)：</p>
<ul>
<li><p>magnitude plot 为一条直线且斜率为 \(n\times 20\ \mbox{db/decade}\)</p>
</li>
<li><p>当 \(\omega = 1\mbox{rad/s}\) 时 magnitude plot 等于 \(1\ \mbox{(0 db)}\)</p>
</li>
<li><p>phase plot 是一条水平线且 \(\phi = n \times 90^{\circ}\)</p>
</li>
</ul>
<p>因此绘制 \(K(j\omega)^n\) 的 magnitude plot 最简单的方法就是在频率 \(\omega = 1\mbox{rad/s}\) 上取值 \(\log K\)，并作一条经过该点的斜率为 \(n\) 的直线。</p>
<h3 id="极坐标图"><a href="#极坐标图" class="headerlink" title="极坐标图"></a>极坐标图</h3><p>当 \(n = 0\) 时，即常量 \(K\)，在极坐标图上对应为复平面上的一个点且 magnitude 为 \(|K|\)，phase 为 \(0^{\circ}\)。</p>
<p>当 \(n &gt; 0\) 时，在极坐标图上对应为一条从原点出发，到 \(\infty\) 结束的直线，并且它与 real-axis 的角度为 \(n \times 90^{\circ}\)。</p>
<p>当 \(n &lt; 0\) 时，在极坐标图上对应为一条从 \(\infty\) 出发，到原点结束的直线，并且它与 real-axis 的角度为 \(n \times 90^{\circ}\)。</p>
<p><img src="4.png"></p>
<h2 id="First-Order-Zero-j-omega-tau-1"><a href="#First-Order-Zero-j-omega-tau-1" class="headerlink" title="First-Order Zero \((j\omega \tau + 1)\)"></a>First-Order Zero \((j\omega \tau + 1)\)</h2><h3 id="伯德图-1"><a href="#伯德图-1" class="headerlink" title="伯德图"></a>伯德图</h3><p>The magnitude is given by \(\sqrt{(\omega \tau)^2 + 1}\) or \(20\log \sqrt{(\omega \tau)^2 + 1}\ \mbox{db}\) and follows low- and high- frequency asymptotes.</p>
<ul>
<li>For \(\omega \tau \ll 1\), \(j\omega \tau + 1 \approx 1 \equiv 0\ \mbox{db}\).</li>
<li>For \(\omega \tau \gg 1\), \(j\omega \tau + 1 \approx j\omega \tau \equiv 20\log |j\omega \tau|\ \mbox{db}\).</li>
<li>\(\omega_c = \frac{1}{\tau}\) is called the break point and is equal to the magnitude of the system pole, maximum error between actual curve and asymptotes is \(3\ \mbox{db}\).</li>
</ul>
<p><img src="6.png"></p>
<p>The phase is given by \(\phi = \tan^{-1}(\omega \tau)\) and follows low- and high- frequency asymptotes.</p>
<ul>
<li>For \(\omega \tau \ll 1\), \(\angle 1 = 0^{\circ}\).</li>
<li>For \(\omega \tau \gg 1\), \(\angle j\omega \tau = 90^{\circ}\).</li>
<li>For \(\omega \tau \cong 1\), \(\angle (j\omega \tau + 1)|_{\omega = 1/\tau} \cong 45^{\circ}\).</li>
<li>The phase plot is approximated by 3 asymptotes: two horizontal lines at \(0^{\circ}\) and \(90^{\circ}\); and a straight line with slope of \(45^{\circ}/\mbox{decade}\) passing through \((1/\tau, 45^{\circ})\), \((0.1/\tau, 0^{\circ})\) and \((10/\tau, 90^{\circ})\).</li>
</ul>
<p><img src="7.png"></p>
<h3 id="极坐标图-1"><a href="#极坐标图-1" class="headerlink" title="极坐标图"></a>极坐标图</h3><p><img src="11.png"></p>
<h3 id="RHP-Zero"><a href="#RHP-Zero" class="headerlink" title="RHP Zero"></a>RHP Zero</h3><p>有 zero 在  RHP 上，那么系统为 nonminimum phase system。</p>
<p>例如这两个传递函数：</p>
<p>$$<br>G_1(s)=10\frac{s+1}{s+10}\ \mbox{and}\ G_2(s)=10\frac{s-1}{s+10}<br>$$</p>
<p>它们的伯德图为：</p>
<p><img src="19.png"></p>
<h2 id="First-Order-Pole-frac-1-j-omega-tau-1"><a href="#First-Order-Pole-frac-1-j-omega-tau-1" class="headerlink" title="First-Order Pole \(\frac{1}{j\omega \tau + 1}\)"></a>First-Order Pole \(\frac{1}{j\omega \tau + 1}\)</h2><h3 id="伯德图-2"><a href="#伯德图-2" class="headerlink" title="伯德图"></a>伯德图</h3><p>Magnitude:</p>
<p>$$<br>\left|\frac{1}{j\omega \tau + 1}\right| = \frac{1}{\sqrt{(\omega \tau)^2 + 1}}\equiv -20\log \sqrt{(\omega \tau)^2 + 1}\ \mbox{db}<br>$$</p>
<p><img src="8.png"></p>
<p>Phase:</p>
<p>$$<br>\phi = \angle \left(\frac{1}{j\omega \tau + 1}\right) = -\tan^{-1}\omega \tau<br>$$</p>
<p><img src="9.png"></p>
<h3 id="极坐标图-2"><a href="#极坐标图-2" class="headerlink" title="极坐标图"></a>极坐标图</h3><p>$$<br>G(j\omega) = \frac{1}{j\omega \tau + 1} = \frac{1}{\sqrt{(\omega \tau)^2 + 1}}\angle (-\tan^{-1}\omega\tau)<br>$$</p>
<p>First-order pole 的极坐标图位于第四象限中：</p>
<p><img src="10.png"></p>
<h3 id="RHP-Pole"><a href="#RHP-Pole" class="headerlink" title="RHP Pole"></a>RHP Pole</h3><p>与 RHP zero 类似，RHP pole 也会对 phase plot 造成影响。不同于 RHP zero 的 low frequency phase 为 \(+180^{\circ}\)，RHP pole 的 low frequency phase 为 \(-180^{\circ}\)。</p>
<h2 id="Complex-Conjugate-Poles"><a href="#Complex-Conjugate-Poles" class="headerlink" title="Complex Conjugate Poles"></a>Complex Conjugate Poles</h2><h3 id="伯德图-3"><a href="#伯德图-3" class="headerlink" title="伯德图"></a>伯德图</h3><p>Consider the complex conjugate poles:</p>
<p>$$<br>G(j\omega) = \left[\left(\frac{j\omega}{\omega_n}\right)^2 + 2\zeta\left(\frac{j\omega}{\omega_n}\right) + 1\right]^{-1}<br>$$</p>
<p>The magnitude is given by</p>
<p>$$<br>\left|\frac{1}{\left[\left(\frac{j\omega}{\omega_n}\right)^2+2\zeta\left(\frac{j\omega}{\omega_n}\right)+1\right]}\right|=\frac{1}{\sqrt{\left(1-\frac{\omega^2}{\omega_n^2}\right)^2+\left(2\zeta\frac{\omega}{\omega_n}\right)^2}}\equiv-20\log\sqrt{\left(1-\frac{\omega^2}{\omega_n^2}\right)^2+\left(2\zeta\frac{\omega}{\omega_n}\right)^2}<br>$$</p>
<p>The phase is given by</p>
<p>$$<br>\phi = \angle \left(\frac{1}{\left[\left(\frac{j\omega}{\omega_n}\right)^2+2\zeta\left(\frac{j\omega}{\omega_n}\right)+1\right]}\right)=-\tan^{-1}\left[\frac{2\zeta (\omega/\omega_n)}{1-(\omega / \omega_n)^2}\right]<br>$$</p>
<p>At low frequencies, \(\omega \ll \omega_n\), the magnitude is</p>
<p>$$<br>\frac{1}{\sqrt{\left(1-\frac{\omega^2}{\omega_n^2}\right)^2+\left(2\zeta\frac{\omega}{\omega_n}\right)^2}}\approx 1 \equiv 0\ \mbox{db}<br>$$</p>
<p>and the phase is</p>
<p>$$<br>-\tan^{-1}\left[\frac{2\zeta (\omega/\omega_n)}{1-(\omega / \omega_n)^2}\right]=0^{\circ}<br>$$</p>
<p>At high frequencies, \(\omega \gg \omega_n\), the magnitude is</p>
<p>$$<br>\frac{1}{\sqrt{\left(1-\frac{\omega^2}{\omega_n^2}\right)^2+\left(2\zeta\frac{\omega}{\omega_n}\right)^2}}\approx \frac{1}{\left(\frac{\omega^2}{\omega_n^2}\right)} \equiv -40\log\left(\frac{\omega}{\omega_n}\right)\ \mbox{db}<br>$$</p>
<p>and the phase is</p>
<p>$$<br>-\tan^{-1}\left[\frac{2\zeta (\omega/\omega_n)}{1-(\omega / \omega_n)^2}\right]=-180^{\circ}<br>$$</p>
<p><img src="12.png"></p>
<p><img src="13.png"></p>
<h3 id="Bandwidth-Resonant-Peak-and-Frequency-的定义"><a href="#Bandwidth-Resonant-Peak-and-Frequency-的定义" class="headerlink" title="Bandwidth, Resonant Peak and Frequency 的定义"></a>Bandwidth, Resonant Peak and Frequency 的定义</h3><ul>
<li><p>Bandwidth, \(\omega_{BW}\)</p>
<p>(output attenuated by a factor of 0.707 times the input)</p>
</li>
<li><p>Resonant frequency, \(\omega_r\)</p>
<p>\(\omega_r = \omega_n \sqrt{1-2\zeta^2}\)</p>
</li>
<li><p>Resonant peak, \(M_r\)</p>
<p>\(M_r = |G(j\omega_r)| = \frac{1}{2\zeta \sqrt{1-\zeta^2}}\)</p>
</li>
</ul>
<p>如图：</p>
<p><img src="14.png"></p>
<h3 id="极坐标图-3"><a href="#极坐标图-3" class="headerlink" title="极坐标图"></a>极坐标图</h3><p><img src="15.png"></p>
<h2 id="Transport-Lag-e-j-omega-t-d"><a href="#Transport-Lag-e-j-omega-t-d" class="headerlink" title="Transport Lag \(e^{-j\omega t_d}\)"></a>Transport Lag \(e^{-j\omega t_d}\)</h2><p>$$<br>|e^{-j\omega t_d}| = |\cos \omega t_d - j \sin \omega t_d| = 1<br>$$</p>
<p>$$<br>\angle (e^{-j\omega t_d}) = -\omega t_d \ \mbox{rad} = -\omega t_d \times \frac{180^{\circ}}{\pi}<br>$$</p>
<h1 id="Characteristics-of-General-Bode-and-Polar-Plots"><a href="#Characteristics-of-General-Bode-and-Polar-Plots" class="headerlink" title="Characteristics of General Bode and Polar Plots"></a>Characteristics of General Bode and Polar Plots</h1><h2 id="Bode-Plot"><a href="#Bode-Plot" class="headerlink" title="Bode Plot"></a>Bode Plot</h2><h3 id="Low-Frequency"><a href="#Low-Frequency" class="headerlink" title="Low Frequency"></a>Low Frequency</h3><p>Consider the following transfer function (with no RHP zeros):</p>
<p>$$<br>G(j\omega) = \frac{K(j\omega\tau_1 + 1)(j\omega\tau_2 + 1)\dots}{(j\omega)^{N}(j\omega\tau_a+1)(j\omega\tau_b+1)\dots}e^{-j\omega t_d}<br>$$</p>
<p>At low frequencies, the transfer function reduces to:</p>
<p>$$<br>G(j\omega)|_{\omega \rightarrow 0} \approx \frac{K}{(j\omega)^N}<br>$$</p>
<p>The magnitude is</p>
<p>$$<br>|G(j\omega)|_{\omega \rightarrow 0} = K\omega^{-N} \equiv 20\log K - 20 N \log \omega\ \mbox{db}<br>$$</p>
<ul>
<li><p>斜率为 \(N\times -20\ \mbox{db/decade}\)</p>
</li>
<li><p>\(K\) 可在 \(\omega = 1\ \mbox{rad/s}\) 处取得</p>
</li>
<li><p>Transport lag term 对 magnitude plot 没有影响</p>
</li>
</ul>
<p>The phase is</p>
<p>$$<br>\angle G(j\omega)|_{\omega \rightarrow 0} = -N\times 90^{\circ}<br>$$</p>
<h3 id="High-Frequency"><a href="#High-Frequency" class="headerlink" title="High Frequency"></a>High Frequency</h3><p>Consider the following transfer function (with no RHP zeros):</p>
<p>$$<br>G(j\omega) = \frac{K(j\omega\tau_1 + 1)(j\omega\tau_2 + 1)\dots (j\omega\tau_m + 1)}{(j\omega)^{N}(j\omega\tau_a+1)(j\omega\tau_b+1)\dots (j\omega\tau_n+1)}e^{-j\omega t_d}<br>$$</p>
<p>At high frequencies, the transfer function reduces to:</p>
<p>$$<br>G(j\omega)|_{\omega \rightarrow \infty} \approx \frac{K\tau_1\tau_2\dots\tau_m}{\tau_a\tau_b\dots\tau_n(j\omega)^{N-m+n}}e^{-j\omega t_d}<br>$$</p>
<p>The magnitude is</p>
<p>$$<br>|G(j\omega)|_{\omega \rightarrow \infty} = \left|\frac{K\tau_1\tau_2\dots\tau_m}{\tau_a\tau_b\dots\tau_n(\omega)^{N-m+n}}\right|\equiv 20\log \frac{K\tau_1\tau_2\dots\tau_m}{\tau_a\tau_b\dots\tau_n}-20(N-m+n)\log \omega\ \mbox{db}<br>$$</p>
<ul>
<li>斜率为 \(-20(N+n-m)\ \mbox{db/decade}\) 即 pole excess = number of poles - number of zeros</li>
</ul>
<p>对于 phase plot（minimum phase system, no RHP poles and zeros）</p>
<ul>
<li><p>如果 \(t_d = 0\)，那么 \(\angle = -90\times (N+n-m)\ \mbox{deg}\)</p>
</li>
<li><p>如果 \(t_d \neq 0\)，那么 \(\angle = -90\times (N+n-m) - \omega t_d \frac{180}{\pi}\ \mbox{deg}\)</p>
</li>
</ul>
<h2 id="Polar-Plot"><a href="#Polar-Plot" class="headerlink" title="Polar Plot"></a>Polar Plot</h2><p>Consider:</p>
<p>$$<br>G(j\omega) = \frac{K(j\omega\tau_1 + 1)(j\omega\tau_2 + 1)\dots (j\omega\tau_m + 1)}{(j\omega)^{N}(j\omega\tau_a+1)(j\omega\tau_b+1)\dots (j\omega\tau_n+1)}e^{-j\omega t_d}<br>$$</p>
<h3 id="Low-Frequency-1"><a href="#Low-Frequency-1" class="headerlink" title="Low Frequency"></a>Low Frequency</h3><p>$$<br>G(j\omega)\approx \frac{K}{(j\omega)^N}<br>$$</p>
<p><img src="16.png"></p>
<h3 id="High-Frequency-1"><a href="#High-Frequency-1" class="headerlink" title="High Frequency"></a>High Frequency</h3><p>At high frequencies, the transfer function reduces to:</p>
<p>$$<br>G(j\omega)\approx \frac{K\tau_1\tau_2\dots\tau_m}{\tau_a\tau_b\dots\tau_n(j\omega)^{N-m+n}}e^{-j\omega t_d} = 0\angle\left[-90(N+n-m)-\omega t_d \frac{180}{\pi}\right]<br>$$</p>
<p><img src="17.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="18.png"></p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>反馈控制系统</tag>
      </tags>
  </entry>
  <entry>
    <title>反馈控制系统学习笔记#7</title>
    <url>/posts/2022-04-19-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<h1 id="D-contour"><a href="#D-contour" class="headerlink" title="D-contour"></a>D-contour</h1><p><img src="1.png"></p>
<ul>
<li><p>At \(a\): \(s = 0\)</p>
</li>
<li><p>At \(b\): \(s = j\infty\) (imaginary)</p>
</li>
<li><p>At \(c\): \(s = \infty\) (real)</p>
</li>
<li><p>At \(d\): \(s = -j\infty\) (imaginary)</p>
</li>
<li><p>From \(a–b\): \(s = j\omega\)</p>
</li>
<li><p>From \(b–c–d\): \(s = re^{j\theta},\ r=\infty,\ -\pi / 2 &lt; \theta &lt; \pi / 2\)</p>
</li>
<li><p>From \(d–a\): \(s = -j\omega\)</p>
</li>
</ul>
<p>The <strong>polar plot</strong> is a plot of \(G(s)K(s)\) for \(s\) from \(a\) to \(b\).</p>
<p>The <strong>Nyquist plot</strong> is a plot of \(G(s)K(s)\) for \(s\) on the D-contour.</p>
<h1 id="Nyquist-Stability-Criterion"><a href="#Nyquist-Stability-Criterion" class="headerlink" title="Nyquist Stability Criterion"></a>Nyquist Stability Criterion</h1><p>The Nyquist Stability Criterion (NSC) states that if the open-loop system has \(P\) number of unstable poles, then for the closed-loop system to be stable, the image of \(G(s)K(s)\) must encircle the point \((−1 + j0)\) \(P\) times anticlockwise.</p>
<p><img src="2.png"></p>
<h1 id="Procedure"><a href="#Procedure" class="headerlink" title="Procedure"></a>Procedure</h1><ol>
<li><p>Plot \(F(s) = G(s)K(s)\) for all values of \(s\) around the D-contour. The Nyquist plot will always be symmetric with respect to the real-axis.</p>
</li>
<li><p>Count the number of clockwise encirclements around the \((−1 + j0)\) point, \(N\).</p>
</li>
<li><p>Determine the number of unstable (RHP) poles of \(G(s)K(s)\), \(P\).</p>
</li>
<li><p>Calculate the number of unstable closed-loop poles, \(Z\): \(Z = N + P\).</p>
</li>
</ol>
<h1 id="Poles-on-j-omega-axis"><a href="#Poles-on-j-omega-axis" class="headerlink" title="Poles on \(j\omega\)-axis"></a>Poles on \(j\omega\)-axis</h1><p>For systems with integrators or poles on the imaginary axis, the D-contour has to be modified to exclude the pole on the contour. This is because at these poles, \(G(s)K(s) = \infty\).</p>
<p><img src="3.png"></p>
<ul>
<li><p>From \(a–b\): \(s = j\omega\) except at pole locations, \(e–f\)</p>
</li>
<li><p>From \(b–c–d\): \(s = re^{j\theta},\ r=\infty,\ -\pi / 2 &lt; \theta &lt; \pi / 2\)</p>
</li>
<li><p>From \(d–a\): \(s = -j\omega\) except at pole locations, \(g–h\)</p>
</li>
<li><p>At \(i–a\): \(s = \epsilon e^{j\theta},\ \epsilon \ll 1,\ -\pi /2 &lt; \theta &lt; \pi / 2\)</p>
</li>
<li><p>At \(e–f\) and \(g–h\): \(s = \epsilon e^{j\theta}\pm j\omega_{1, 2}\)</p>
</li>
</ul>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>反馈控制系统</tag>
      </tags>
  </entry>
  <entry>
    <title>反馈控制系统学习笔记#8</title>
    <url>/posts/2022-04-20-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<h1 id="增益裕度"><a href="#增益裕度" class="headerlink" title="增益裕度"></a>增益裕度</h1><p><strong>Gain Margin (GM)</strong></p>
<p>定义为：</p>
<p>$$<br>\mbox{GM}=k=\frac{1}{|L(j\omega)|}<br>$$</p>
<p>which occurs at the <strong>phase crossover frequency</strong>, \(\omega_{cp}\) where</p>
<p>$$<br>\angle L(j\omega_{cp}) = -180^{\circ}<br>$$</p>
<h1 id="相位裕度"><a href="#相位裕度" class="headerlink" title="相位裕度"></a>相位裕度</h1><p><strong>Phase Margin (PM)</strong></p>
<p>定义为：</p>
<p>$$<br>\mbox{PM} =180^{\circ} + \angle L(j\omega)<br>$$</p>
<p>which occurs at the <strong>unity gain crossover frequency</strong>, \(\omega_{cg}\) where</p>
<p>$$<br>|L(j\omega_{cg})| = 1<br>$$</p>
<h1 id="裕度的计算"><a href="#裕度的计算" class="headerlink" title="裕度的计算"></a>裕度的计算</h1><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><p>GM 和 PM 可从 bode plot 和 Nyquist plot 中得到。</p>
<p>Bode plot:</p>
<p><img src="1.png"></p>
<p>Nyquist plot:</p>
<p><img src="2.png"></p>
<h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><p>For <strong>Gain Margin (GM)</strong></p>
<ol>
<li><p>Find the phase crossover frequency, \(\omega_{cp}\), using \(\angle G(j\omega_{cp}) = −180^{\circ}\).</p>
</li>
<li><p>Next find the magnitude \(|G(j\omega_{cp})|\).</p>
</li>
<li><p>If \(|G(j\omega_{cp})| = −a\), then \(\mbox{GM} = \frac{1}{a}\ \mbox{or}\ −20 \log_{10}a\).</p>
</li>
</ol>
<p>For <strong>Phase Margin (PM)</strong></p>
<ol>
<li><p>Find the unity gain crossover frequency, \(\omega_{cg}\), using \(|G(j\omega_{cg})| = 1\).</p>
</li>
<li><p>Next find the phase of \(G(j\omega_{cg})\).</p>
</li>
<li><p>If \(G(j\omega_{cg}) = 1\angle \psi\), then \(\mbox{PM} = 180^{\circ} + \psi\).</p>
</li>
</ol>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>反馈控制系统</tag>
      </tags>
  </entry>
  <entry>
    <title>反馈控制系统学习笔记#9</title>
    <url>/posts/2022-04-20-02/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<h1 id="Lead-Compensation"><a href="#Lead-Compensation" class="headerlink" title="Lead Compensation"></a>Lead Compensation</h1><p>$$<br>D_c(s)=\frac{T_Ds+1}{\alpha T_Ds+1},\ \alpha &lt; 1<br>$$</p>
<p><img src="1.png"></p>
<p>The phase contributed by the lead compensator is given by</p>
<p>$$<br>\phi = \tan^{-1}(T_D \omega) - \tan^{-1}(\alpha T_D \omega)<br>$$</p>
<p>Maximum phase occurs when the frequency is</p>
<p>$$<br>\omega_{\mbox{max}} = \frac{1}{T_D\sqrt{\alpha}}<br>$$</p>
<p>and</p>
<p>$$<br>\sin \phi_{\mbox{max}}=\frac{1-\alpha}{1+\alpha}\ \mbox{or}\ \alpha = \frac{1-\sin \phi_{\mbox{max}}}{1+\sin \phi_{\mbox{max}}}<br>$$</p>
<h2 id="Design-Procedure"><a href="#Design-Procedure" class="headerlink" title="Design Procedure"></a>Design Procedure</h2><ol>
<li><p>Determine the gain \(K\) to satisfy error requirement.</p>
</li>
<li><p>Evaluate the PM of the uncompensated system using the value of \(K\) obtained from step 1.</p>
</li>
<li><p>Allow for \(5^{\circ}\) to \(10^{\circ}\) more margin, and determine the needed phase lead \(\phi_{\mbox{max}}\).</p>
</li>
<li><p>Determine \(\alpha\) from \(\alpha = \frac{1 − \sin \phi_{\mbox{max}}}{1 + \sin \phi_{\mbox{max}}}\).</p>
</li>
<li><p>Find \(\omega\) such that \(|KD_c(s)G(s)| = 1\), i.e. \(|K G(s)|=\sqrt{\alpha}\). The zero is then at \(1/T_D = \omega\sqrt{\alpha}\) and the pole is at \(1/(\alpha T_D) = \omega /\sqrt{\alpha}\).</p>
</li>
<li><p>Check the resulting PM.</p>
</li>
<li><p>Iterate design by adjusting compensator parameters until all specifications are met. Add additional lead compensator (double-lead compensator) if necessary.</p>
</li>
</ol>
<h1 id="Lag-Compensation"><a href="#Lag-Compensation" class="headerlink" title="Lag Compensation"></a>Lag Compensation</h1><p>$$<br>D_c(s) = \frac{T_Is+1}{\alpha T_Is+1},\ \alpha &gt; 1<br>$$</p>
<p><img src="2.png"></p>
<h2 id="Procedure"><a href="#Procedure" class="headerlink" title="Procedure"></a>Procedure</h2><ol>
<li><p>Determine the gain \(K\) to satisfy error requirement.</p>
</li>
<li><p>Determine the frequency where the PM requirement would be satisfied if the magnitude curve crossed the 0-dB line at this frequency (allow for additional \(5^{\circ}\)in PM).</p>
</li>
<li><p>Find how much gain reduction is required at that frequency, i.e. compute the gain of the uncompensated system, \(|KG(jω)|\), at this frequency, the magnitude of the lag compensator, \(|Dc(jω)|\), is the inverse of this gain (\(\frac{1}{|KG(j\omega)|}\)) such that \(|KD_c(j\omega)G(j\omega)| = 1\).</p>
</li>
<li><p>We also know that at high frequencies, \(|D_c(j\omega)| \approx \frac{1}{\alpha}\). Find \(\alpha\).</p>
</li>
<li><p>Next, place the lag compensator zero, \(\frac{1}{T}\) at least \(1\) decade below the frequency computed from step 2, i.e. \(T = 10/\omega\).</p>
</li>
<li><p>Check the resulting PM.</p>
</li>
<li><p>Iterate design by adjusting compensator parameters until all specifications are met.</p>
</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="3.png"></p>
<p><img src="4.png"></p>
<p>Lead compensation, \(D_c(s) = \frac{Ts + 1}{\alpha Ts + 1},\ \alpha &lt; 1\), adds phase lead at a frequency band between the two break-points. Lead compensation will increase both the crossover frequency and the speed of the response.</p>
<p>Lag compensation, \(D_c(s) = \frac{Ts + 1}{\alpha Ts+1},\ \alpha &lt; 1\), can be used to decrease the frequency response magnitude at frequencies above the two break-points so that \(\omega_c\) yields acceptable phase margin. Typically it provides a slower response compare to lead compensation.</p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>反馈控制系统</tag>
      </tags>
  </entry>
  <entry>
    <title>获取 ListBoxItem 时返回 null 的解决方法</title>
    <url>/posts/2022-05-09-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这两天在做一个 WPF 项目的时候，遇到了一个小问题。我需要更改 <code>Listbox </code>中的某几行的背景颜色，那么首先我得获取到对应的 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.controls.listboxitem"><code>ListBoxItem</code></a>，之后修改它们的 <code>Background</code> 属性，以实现改变背景颜色的要求。</p>
<p>根据官方文档中的<a href="https://docs.microsoft.com/zh-cn/dotnet/desktop/wpf/controls/how-to-get-a-listboxitem">提示</a>，可以通过这样的方法来获取：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">ListBoxItem lbi = (ListBoxItem)(lb.ItemContainerGenerator.ContainerFromIndex(<span class="built_in">int</span> index));</span><br></pre></td></tr></table></figure>

<p>然而在我的实际使用中，返回的 <code>lbi</code> 有时会是 <code>null</code>，这样的情况造成程序无法正确执行。该如何解决呢？</p>
<p>要想解决问题，必须先找到问题发生的原因：我发现在我的项目中，<code>lb</code> 显示出的行数是 10 行，而 <code>lbi</code> 为 <code>null</code> 的情况恰恰发生在 <code>index</code> 为 11 的时候。那么是否说明不可见的 <code>ListBoxItem</code> 是无法被获取到的？</p>
<p>没错，这里涉及到了 <a href="https://docs.microsoft.com/zh-cn/dotnet/desktop/wpf/advanced/optimizing-performance-controls">UI 虚拟化</a>。为了性能方面的考虑，不可见的项是不被生成的，所以当我获取超出可使范围的项时，返回的结果是 <code>null</code>。</p>
<p>那么要怎样实现我预想的功能？</p>
<p>上代码：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">lb.ItemContainerGenerator.StatusChanged += ItemContainerGenerator_StatusChanged;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ItemContainerGenerator_StatusChanged</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (lb.ItemContainerGenerator.Status == System.Windows.Controls.Primitives.GeneratorStatus.ContainersGenerated)</span><br><span class="line">    &#123;</span><br><span class="line">        MarkResult();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MarkResult</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> index = <span class="number">0</span>; index &lt; range; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        ListBoxItem lbi = (ListBoxItem)lb.ItemContainerGenerator.ContainerFromIndex(index);</span><br><span class="line">        <span class="keyword">if</span> (lbi != <span class="literal">null</span>) lbi.Background = <span class="keyword">new</span> SolidColorBrush(Colors.DarkGray);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每当有 <code>ListBoxItem</code> 生成时，修改背景颜色的函数 <code>MarkResult</code> 会被执行，并会跳过<code>lbi</code> 为 <code>null</code> 的情况（即 <code>lbi</code> 处于不可视的状态）。</p>
<p>实际运行下来一切顺利。</p>
]]></content>
      <tags>
        <tag>WPF</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>一些 Unity Asset 分享</title>
    <url>/posts/2022-06-08-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>仅供学习使用！</p>
<p>下载地址：<a href="https://1drv.ms/u/s!AgjVpisoP25CpCsZgDsYwJbTaskh?e=6u0E0R">OneDrive</a></p>
<p>来源：<a href="https://unityassetcollection.com/">unityassetcollection.com</a> 和 <a href="https://unityassets4free.com/">unityassets4free.com</a></p>
<ul>
<li><p><a href="https://assetstore.unity.com/packages/templates/systems/topdown-engine-89636"><strong>TopDown Engine</strong></a></p>
</li>
<li><p><a href="https://assetstore.unity.com/packages/tools/visual-scripting/playmaker-368"><strong>Playmaker</strong></a></p>
</li>
<li><p><a href="https://assetstore.unity.com/packages/tools/utilities/easy-save-the-complete-save-data-serialization-system-768"><strong>Easy Save - The Complete Save Data Serialization System</strong></a></p>
</li>
<li><p><a href="https://assetstore.unity.com/packages/tools/ai/dialogue-system-for-unity-11672"><strong>Dialog System for Unity</strong></a></p>
</li>
<li><p><a href="https://assetstore.unity.com/packages/tools/ai/a-pathfinding-project-pro-87744"><strong>A* Pathfinding Project Pro</strong></a></p>
</li>
<li><p><a href="https://assetstore.unity.com/packages/templates/systems/easy-build-system-45394"><strong>Easy Build System</strong></a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Unity 学习</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Unity 中使用鼠标选择游戏对象</title>
    <url>/posts/2022-07-09-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用 <a href="https://docs.unity3d.com/ScriptReference/Camera.ScreenPointToRay.html">Camera.ScreenPointToRay</a> 这一函数，从相机发射一条与鼠标位置对应的射线并与游戏对象进行碰撞检测。</p>
<p>游戏对象需要具有 collider。</p>
<p>代码如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ObejctMouseSelector</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetMouseButtonDown(<span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);</span><br><span class="line">            RaycastHit hit;</span><br><span class="line">            <span class="keyword">if</span> (Physics.Raycast(ray, <span class="keyword">out</span> hit))</span><br><span class="line">            &#123;</span><br><span class="line">                PrintTargetInfo(hit);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrintTargetInfo</span>(<span class="params">RaycastHit hit</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        print(<span class="string">&quot;Target: &quot;</span> + hit.collider.gameObject.name);</span><br><span class="line">        print(<span class="string">&quot;Position: &quot;</span> + hit.point);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>稍加更改后可实现以下效果：</p>
<p><img src="1.gif"></p>
]]></content>
      <categories>
        <category>Unity 学习</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>常用数据结构简单梳理及 C# 实现</title>
    <url>/posts/2022-07-28-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="链表-Linked-List"><a href="#链表-Linked-List" class="headerlink" title="链表 Linked List"></a>链表 Linked List</h2><p>链表分为单向链表和双向链表。以单向链表为例，链表由一系列节点组成，链表中的每一节点（Node）包含该节点的值以及它的下一个节点的指向。</p>
<p>单向链表：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ListNode</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> T Data &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> ListNode&lt;T&gt;? Next &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span>(<span class="params">T data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Data = data;</span><br><span class="line">        Next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _count;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Count &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> _count; &#125; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ListNode&lt;T&gt;? _head, _tail;</span><br><span class="line">    <span class="keyword">public</span> ListNode&lt;T&gt;? Head &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> _head; &#125; &#125;</span><br><span class="line">    <span class="keyword">public</span> ListNode&lt;T&gt;? Tail &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> _tail; &#125; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _count = <span class="number">0</span>;</span><br><span class="line">        _head = <span class="literal">null</span>;</span><br><span class="line">        _tail = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsEmpty</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (_count == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode&lt;T&gt; <span class="title">GetAt</span>(<span class="params"><span class="built_in">int</span> index</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((index &gt;= <span class="number">0</span>) &amp;&amp; (index &lt;= _count - <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (index == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> _head;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (index == _count - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> _tail;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ListNode&lt;T&gt; currentNode = _head;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                currentNode = currentNode.Next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> currentNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfRangeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Append</span>(<span class="params">T data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ListNode&lt;T&gt; newNode = <span class="keyword">new</span> ListNode&lt;T&gt;(data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (IsEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            _head = newNode;</span><br><span class="line">            _tail = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            _tail.Next = newNode;</span><br><span class="line">            _tail = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        _count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Prepend</span>(<span class="params">T data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ListNode&lt;T&gt; newNode = <span class="keyword">new</span> ListNode&lt;T&gt;(data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (IsEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            _head = newNode;</span><br><span class="line">            _tail = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            newNode.Next = _head;</span><br><span class="line">            _head = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        _count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InsertAt</span>(<span class="params">T data, <span class="built_in">int</span> index</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((index &gt;= <span class="number">0</span>) &amp;&amp; (index &lt;= _count))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (index == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Prepend(data);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (index == _count)</span><br><span class="line">            &#123;</span><br><span class="line">                Append(data);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ListNode&lt;T&gt; newNode = <span class="keyword">new</span> ListNode&lt;T&gt;(data);</span><br><span class="line">                ListNode&lt;T&gt; currentNode = GetAt(index - <span class="number">1</span>);</span><br><span class="line">                newNode.Next = currentNode.Next;</span><br><span class="line">                currentNode.Next = newNode;</span><br><span class="line">                _count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfRangeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveAt</span>(<span class="params"><span class="built_in">int</span> index</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((index &gt;= <span class="number">0</span>) &amp;&amp; (index &lt;= _count - <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (index == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _head = _head.Next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (index == _count - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ListNode&lt;T&gt; newTail = GetAt(_count - <span class="number">2</span>);</span><br><span class="line">                newTail.Next = <span class="literal">null</span>;</span><br><span class="line">                _tail = newTail;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ListNode&lt;T&gt; currentNode = GetAt(index - <span class="number">1</span>);</span><br><span class="line">                currentNode.Next = currentNode.Next.Next;</span><br><span class="line">            &#125;</span><br><span class="line">            _count--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfRangeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Clear</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _head = <span class="literal">null</span>;</span><br><span class="line">        _tail = <span class="literal">null</span>;</span><br><span class="line">        _count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://visualgo.net/zh/ll">可视化</a></p>
</blockquote>
<h2 id="栈-Stack-和队列-Queue"><a href="#栈-Stack-和队列-Queue" class="headerlink" title="栈 Stack 和队列 Queue"></a>栈 Stack 和队列 Queue</h2><p>这是两种限定性的线性表结构。栈，先进后出。队列，先进先出。</p>
<p>栈：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] _collection;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _index;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Count &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> _index + <span class="number">1</span>; &#125; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span>(<span class="params"><span class="built_in">int</span> size</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException();</span><br><span class="line">        &#125;</span><br><span class="line">        _collection = <span class="keyword">new</span> T[size];</span><br><span class="line">        _index = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsEmpty</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (_index == <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T? Peek()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_index == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _collection[_index];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Push</span>(<span class="params">T item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _index++;</span><br><span class="line">        _collection[_index] = item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T? Pop()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_index == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            _index--;</span><br><span class="line">            <span class="keyword">return</span> _collection[_index + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://visualgo.net/zh/stack">可视化</a></p>
</blockquote>
<p>队列：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Queue</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] _collection;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _head, _tail, _count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Count &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> _count; &#125; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Queue</span>(<span class="params"><span class="built_in">int</span> size</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException();</span><br><span class="line">        &#125;</span><br><span class="line">        _collection = <span class="keyword">new</span> T[size];</span><br><span class="line">        _head = <span class="number">0</span>;</span><br><span class="line">        _tail = <span class="number">0</span>;</span><br><span class="line">        _count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsEmpty</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (_count == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T? Peek()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_count == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _collection[_head];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Enqueue</span>(<span class="params">T item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_tail == _collection.Length)</span><br><span class="line">        &#123;</span><br><span class="line">            _resize(_collection.Length * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _collection[_tail] = item;</span><br><span class="line">        _tail++;</span><br><span class="line">        _count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T? Dequeue()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_count == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            T item = _collection[_head];</span><br><span class="line">            _collection[_head] = <span class="literal">default</span>(T);</span><br><span class="line">            _head++;</span><br><span class="line">            _count--;</span><br><span class="line">            <span class="keyword">if</span> (_count &lt; _collection.Length / <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _resize(_collection.Length / <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> _resize(<span class="built_in">int</span> newSize)</span><br><span class="line">    &#123;</span><br><span class="line">        T[] tempCollection = <span class="keyword">new</span> T[newSize];</span><br><span class="line">        Array.Copy(_collection, _head, tempCollection, <span class="number">0</span>, _count);</span><br><span class="line">        _collection = tempCollection;</span><br><span class="line">        _head = <span class="number">0</span>;</span><br><span class="line">        _tail = _count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://visualgo.net/zh/queue">可视化</a></p>
</blockquote>
<h2 id="树-Tree"><a href="#树-Tree" class="headerlink" title="树 Tree"></a>树 Tree</h2><p>二叉搜索树（BST）是满足了下列条件的二叉树：</p>
<ul>
<li><p>左子树上所有结点的值均小于它的根结点的值</p>
</li>
<li><p>右子树上所有结点的值均大于它的根结点的值</p>
</li>
</ul>
<p>自平衡二叉查找树（AVL 树）是带了自平衡功能的二叉搜索树。当结点数量为 N 时，它能够使高度平衡为 O(log N)。不平衡的情况被树旋转（Tree Rotation）所解决。</p>
<p>AVL 树：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AVLTreeNode</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="title">IComparable</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Height &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> AVLTreeNode&lt;T&gt;? LeftChild &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> AVLTreeNode&lt;T&gt;? RightChild &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> T Value &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AVLTreeNode</span>(<span class="params">T <span class="keyword">value</span></span>) : <span class="title">this</span>(<span class="params"><span class="keyword">value</span>, <span class="number">0</span>, <span class="literal">null</span>, <span class="literal">null</span></span>)</span> &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AVLTreeNode</span>(<span class="params">T <span class="keyword">value</span>, <span class="built_in">int</span> height, AVLTreeNode&lt;T&gt;? leftChild, AVLTreeNode&lt;T&gt;? rightChild</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Value = <span class="keyword">value</span>;</span><br><span class="line">        Height = height;</span><br><span class="line">        LeftChild = leftChild;</span><br><span class="line">        RightChild = rightChild;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CalcHeight</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> leftHight = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">int</span> rightHight = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (LeftChild != <span class="literal">null</span>) leftHight = LeftChild.Height;</span><br><span class="line">        <span class="keyword">if</span> (RightChild != <span class="literal">null</span>) rightHight = RightChild.Height;</span><br><span class="line">        Height = Math.Max(leftHight, rightHight) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">GetBalanceFactor</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> leftHight = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">int</span> rightHight = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (LeftChild != <span class="literal">null</span>) leftHight = LeftChild.Height;</span><br><span class="line">        <span class="keyword">if</span> (RightChild != <span class="literal">null</span>) rightHight = RightChild.Height;</span><br><span class="line">        <span class="keyword">return</span> leftHight - rightHight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AVLTree</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="title">IComparable</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> AVLTreeNode&lt;T&gt;? _root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _count;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Count &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> _count; &#125; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AVLTree</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _root = <span class="literal">null</span>;</span><br><span class="line">        _count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AVLTreeNode&lt;T&gt; _insert(AVLTreeNode&lt;T&gt; currentNode, T <span class="keyword">value</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (currentNode.Value.CompareTo(<span class="keyword">value</span>) &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Insert to left</span></span><br><span class="line">            <span class="keyword">if</span> (currentNode.LeftChild != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                currentNode.LeftChild = _insert(currentNode.LeftChild, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                currentNode.LeftChild = <span class="keyword">new</span> AVLTreeNode&lt;T&gt;(<span class="keyword">value</span>);</span><br><span class="line">                _count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (currentNode.Value.CompareTo(<span class="keyword">value</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Insert to right</span></span><br><span class="line">            <span class="keyword">if</span> (currentNode.RightChild != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                currentNode.RightChild = _insert(currentNode.RightChild, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                currentNode.RightChild = <span class="keyword">new</span> AVLTreeNode&lt;T&gt;(<span class="keyword">value</span>);</span><br><span class="line">                _count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//No insertion</span></span><br><span class="line">            <span class="keyword">return</span> currentNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _rebalance(<span class="keyword">ref</span> currentNode);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> currentNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> _rebalance(<span class="keyword">ref</span> AVLTreeNode&lt;T&gt; currentNode)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (currentNode.GetBalanceFactor() &gt;= <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (currentNode.LeftChild != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (currentNode.LeftChild.GetBalanceFactor() &lt;= <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    currentNode.LeftChild = _leftRotation(currentNode.LeftChild);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            currentNode = _rightRotation(currentNode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (currentNode.GetBalanceFactor() &lt;= <span class="number">-2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (currentNode.RightChild != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (currentNode.RightChild.GetBalanceFactor() &gt;= <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    currentNode.RightChild = _rightRotation(currentNode.RightChild);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            currentNode = _leftRotation(currentNode);</span><br><span class="line">        &#125;</span><br><span class="line">        currentNode.CalcHeight();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AVLTreeNode&lt;T&gt; _leftRotation(AVLTreeNode&lt;T&gt; currentNode)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (currentNode.RightChild != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            AVLTreeNode&lt;T&gt; newNode = currentNode.RightChild;</span><br><span class="line">            currentNode.RightChild = newNode.LeftChild;</span><br><span class="line">            newNode.LeftChild = currentNode;</span><br><span class="line"></span><br><span class="line">            currentNode.CalcHeight();</span><br><span class="line">            newNode.CalcHeight();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> currentNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AVLTreeNode&lt;T&gt; _rightRotation(AVLTreeNode&lt;T&gt; currentNode)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (currentNode.LeftChild != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            AVLTreeNode&lt;T&gt; newNode = currentNode.LeftChild;</span><br><span class="line">            currentNode.LeftChild = newNode.RightChild;</span><br><span class="line">            newNode.RightChild = currentNode;</span><br><span class="line"></span><br><span class="line">            currentNode.CalcHeight();</span><br><span class="line">            newNode.CalcHeight();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> currentNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span>(<span class="params">T <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_root == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _root = <span class="keyword">new</span> AVLTreeNode&lt;T&gt;(<span class="keyword">value</span>);</span><br><span class="line">            _count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            _root = _insert(_root, <span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Contains</span>(<span class="params">T <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        AVLTreeNode&lt;T&gt;? currentNode = _root;</span><br><span class="line">        <span class="keyword">while</span> (currentNode != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (currentNode.Value.CompareTo(<span class="keyword">value</span>) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (currentNode.Value.CompareTo(<span class="keyword">value</span>) &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                currentNode = currentNode.LeftChild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                currentNode = currentNode.RightChild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>删除好麻烦不写了😭</p>
<blockquote>
<p><a href="https://visualgo.net/zh/avl">可视化</a></p>
</blockquote>
<h2 id="堆-Heap"><a href="#堆-Heap" class="headerlink" title="堆 Heap"></a>堆 Heap</h2><p>二叉堆，是完全二叉树。</p>
<ul>
<li><p>当父节点的键值总是大于或等于任何一个子节点的键值时为“最大堆”</p>
</li>
<li><p>当父节点的键值总是小于或等于任何一个子节点的键值时为“最小堆”</p>
</li>
</ul>
<p>二叉最大堆：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Heap</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="title">IComparable</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] _collection;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _count;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Count &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> _count; &#125; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Heap</span>(<span class="params"><span class="built_in">int</span> size</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _collection = <span class="keyword">new</span> T[size];</span><br><span class="line">        _count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsEmpty</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> _swap(<span class="built_in">int</span> index1, <span class="built_in">int</span> index2)</span><br><span class="line">    &#123;</span><br><span class="line">        T tempItem = _collection[index1];</span><br><span class="line">        _collection[index1] = _collection[index2];</span><br><span class="line">        _collection[index2] = tempItem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> _bubbleUp(<span class="built_in">int</span> index)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (index &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_collection[index].CompareTo(_collection[(index - <span class="number">1</span>) / <span class="number">2</span>]) &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _swap(index, (index - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            index = (index - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> _bubbleDown(<span class="built_in">int</span> index)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> maxIndex;</span><br><span class="line">        <span class="keyword">while</span> ((index * <span class="number">2</span> + <span class="number">1</span>) &lt; _count)</span><br><span class="line">        &#123;</span><br><span class="line">            maxIndex = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (((index * <span class="number">2</span> + <span class="number">2</span>) &lt; _count) &amp;&amp; (_collection[index * <span class="number">2</span> + <span class="number">2</span>].CompareTo(_collection[index * <span class="number">2</span> + <span class="number">1</span>]) &gt; <span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                maxIndex = index * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_collection[maxIndex].CompareTo(_collection[index]) &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _swap(maxIndex, index);</span><br><span class="line">                index = maxIndex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span>(<span class="params">T item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _collection[_count] = item;</span><br><span class="line">        _bubbleUp(_count);</span><br><span class="line">        _count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T? Peek()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_count == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _collection[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T? ExtractMax()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_count == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            _swap(<span class="number">0</span>, _count - <span class="number">1</span>);</span><br><span class="line">            _count--;</span><br><span class="line">            _bubbleDown(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> _collection[_count];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://visualgo.net/zh/heap">可视化</a></p>
</blockquote>
<hr>
<p>部分代码借鉴自</p>
<p><a href="https://github.com/aalhour/C-Sharp-Algorithms">GitHub - aalhour/C-Sharp-Algorithms: Plug-and-play class-library project of standard Data Structures and Algorithms in C#</a></p>
<p>另见</p>
<p><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic">System.Collections.Generic 命名空间 | Microsoft Docs</a></p>
]]></content>
      <tags>
        <tag>C#</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Computer Architecture - ARM Instruction Format</title>
    <url>/posts/2022-09-04-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Data-processing"><a href="#Data-processing" class="headerlink" title="Data-processing"></a>Data-processing</h1><p><img src="1.png"></p>
<ul>
<li><p>cond</p>
<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>详情</span></div>
    <div class="hide-content"><p><img src="10.png"></p>
</div></div></li>
<li><p><strong>op = 00</strong></p>
</li>
<li><p>funct</p>
<ul>
<li><p>I</p>
<ul>
<li><p>I = 0: Src2 is a register</p>
</li>
<li><p>I = 1: Src2 is an immediate</p>
</li>
</ul>
</li>
<li><p>cmd</p>
<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>详情</span></div>
    <div class="hide-content"><p><img src="2.png"></p>
</div></div></li>
<li><p>S</p>
<ul>
<li>S = 1: instruction sets condition flags</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Immediate-Src2"><a href="#Immediate-Src2" class="headerlink" title="Immediate Src2"></a>Immediate Src2</h2><p><code>&lt;OP Rd, Rn, #Imm8_rot&gt;</code></p>
<ul>
<li><p>Imm8: 8-bit unsigned immediate</p>
</li>
<li><p>rot: 4-bit rotation value</p>
</li>
</ul>
<h2 id="Register-Src2"><a href="#Register-Src2" class="headerlink" title="Register Src2"></a>Register Src2</h2><p><code>&lt;OP Rd, Rn, Rm, ST #shamt5&gt;</code></p>
<ul>
<li><p>Rm: the second source operand</p>
</li>
<li><p>shamt5: the amount Rm is shifted</p>
</li>
<li><p>sh: the type of shift</p>
<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>详情</span></div>
    <div class="hide-content"><p><img src="3.png"></p>
<p><img src="4.png"></p>
</div></div></li>
</ul>
<h2 id="Register-shifted-Register-Src2"><a href="#Register-shifted-Register-Src2" class="headerlink" title="Register-shifted Register Src2"></a>Register-shifted Register Src2</h2><p><code>&lt;OP Rd, Rn, Rm, ST Rs&gt;</code></p>
<p>类似于 Register Src2，其中的 shamt5 被 Rs 代替。</p>
<h1 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h1><p><img src="5.png"></p>
<ul>
<li><p><strong>op = 01</strong></p>
</li>
<li><p>funct</p>
<ul>
<li><p>I: immediate bar</p>
</li>
<li><p>P: preindex</p>
</li>
<li><p>U: add</p>
</li>
<li><p>B: byte</p>
</li>
<li><p>W: writeback</p>
</li>
<li><p>L: load</p>
</li>
</ul>
<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>详情</span></div>
    <div class="hide-content"><p><img src="6.png"></p>
<p><img src="7.png"></p>
<p><img src="8.png"></p>
</div></div></li>
<li><p>Rn: base register</p>
</li>
<li><p>Rd: destination (load), source (store)</p>
</li>
<li><p>Src2: offset</p>
<ul>
<li><p>Immediate <code>&lt;OP Rd, [Rn, #Imm12]&gt;</code></p>
</li>
<li><p>Register <code>&lt;OP Rd, [Rn, Rm, ST #shamt5]&gt;</code></p>
</li>
</ul>
</li>
</ul>
<h1 id="Branch"><a href="#Branch" class="headerlink" title="Branch"></a>Branch</h1><p><img src="9.png"></p>
<ul>
<li><p><strong>op = 10</strong></p>
</li>
<li><p>funct = 1L</p>
<ul>
<li><p>L = 1: BL</p>
</li>
<li><p>L = 0: B</p>
</li>
</ul>
</li>
<li><p>Imm24: 24-bit immediate encoding Branch Target Address (BTA)</p>
</li>
</ul>
<hr>
<p>👉<a href="https://armconverter.com/">Online ARM to HEX Converter</a></p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>Computer Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习 - Confusion Matrix</title>
    <url>/posts/2022-09-08-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><table style="margin-left: auto; margin-right: auto;">
<tbody>
<tr>
<td colspan="2" rowspan="2">    </td>
<th style="text-align: center;" colspan="2">Actual Value</th>
</tr>
<tr>
<td style="text-align: center;">Positive</td>
<td style="text-align: center;">Negative </td>
</tr>
<tr>
<th style="text-align: center;" rowspan="2">Predicted Value</th>
<td style="text-align: center;">Predicted Positive </td>
<td>True positive (TP)</td>
<td>False positive (FP)</td>
</tr>
<tr>
<td style="text-align: center;">Predicted Negative</td>
<td>False negative (FN)</td>
<td>True negative (TN) </td>
</tr>
</tbody>
</table>

<ul>
<li><p>TP: hit</p>
</li>
<li><p>TN: correct rejection</p>
</li>
<li><p>FP: false alarm, Type I error</p>
</li>
<li><p>FN: miss, Type II error</p>
</li>
</ul>
<p>相关计算：</p>
<p><strong>accuracy (ACC)</strong></p>
<p>ACC = (TP + TN) / (TP + TN + FP + FN)</p>
<p><strong>sensitivity, recall, hit rate or true positive rate (TPR)</strong></p>
<p>TPR = TP / (TP + FN)</p>
<p><strong>miss rate or false negative rate (FNR)</strong></p>
<p>FNR = FN / (TP + FN) =  1 - TPR</p>
<p><strong>specificity, selectivity or true negative rate (TNR)</strong></p>
<p>TNR = TN / (TN + FP)</p>
<p><strong>fall-out or false positive rate (FPR)</strong></p>
<p>FPR = FP / (TN + FP) = 1 - TNR</p>
<p><strong>precision or positive prediction value (PPV)</strong></p>
<p>PPV = TP / (TP + FP)</p>
<p><strong>false discovery rate (FDR)</strong></p>
<p>FDR = FP / (TP + FP) = 1 - PPV</p>
<p><strong>negative prediction value (NPV)</strong></p>
<p>NPV = TN / (TN + FN)</p>
<p><strong>false omission rate (FOR)</strong></p>
<p>FOR = FN / (TN + FN) = 1 - NPV</p>
<p><strong>F1 score</strong></p>
<p>harmonic mean of precision and sensitivity</p>
<p>F<sub>1</sub> = 2 * (PPV * TPR) / (PPV + TPR) = 2TP / (2TP + FP + FN)</p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习 - Paradigms 和 Tribes</title>
    <url>/posts/2022-09-17-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Paradigms"><a href="#Paradigms" class="headerlink" title="Paradigms"></a>Paradigms</h1><p><strong>Supervised Learning 监督学习</strong></p>
<ul>
<li><p>Labeled data</p>
</li>
<li><p>Direct feedback</p>
</li>
<li><p>Predict outcome/future</p>
</li>
</ul>
<p><strong>Unsupervised Learning 无监督学习</strong></p>
<ul>
<li><p>No labels</p>
</li>
<li><p>No feedback</p>
</li>
<li><p>“Find hidden structure”</p>
</li>
</ul>
<p><strong>Reinforcement Learning 强化学习</strong></p>
<ul>
<li><p>Decision process</p>
</li>
<li><p>Reward system</p>
</li>
<li><p>Learn series of actions</p>
</li>
</ul>
<h1 id="Tribes"><a href="#Tribes" class="headerlink" title="Tribes"></a>Tribes</h1><p><strong>Symbolists 符号学派</strong></p>
<ul>
<li><p>逻辑学、哲学</p>
</li>
<li><p>Decision Tree</p>
</li>
</ul>
<p><strong>Connectionists 联结学派</strong></p>
<ul>
<li><p>神经科学</p>
</li>
<li><p>CNN</p>
</li>
</ul>
<p><strong>Evolutionaries 进化学派</strong></p>
<ul>
<li><p>进化生物学</p>
</li>
<li><p>Genetic Programming</p>
</li>
</ul>
<p><strong>Bayesians 贝叶斯学派</strong></p>
<ul>
<li><p>统计学</p>
</li>
<li><p>Bayesian Network</p>
</li>
</ul>
<p><strong>Analogizers 类推学派</strong></p>
<ul>
<li><p>心理学</p>
</li>
<li><p>K-Nearest Neighbour</p>
</li>
</ul>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Computer Architecture - Multiprocessor Systems</title>
    <url>/posts/2022-11-03-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="费林分类法"><a href="#费林分类法" class="headerlink" title="费林分类法"></a>费林分类法</h2><p><strong>Flynn’s taxonomy</strong></p>
<ul>
<li><p>单一指令流单一数据流（SISD）</p>
<p>在指令流和数据流中都不存在并行性</p>
<p>传统的单处理器（uniprocessor）计算机</p>
<img src="SISD.jpg" title="SISD" alt="" width="300"></li>
<li><p>单一指令流多数据流（SIMD）</p>
<p>利用多个数据流对单一指令流进行并行操作的计算机</p>
<p>实现数据并行性</p>
<p>例如阵列处理器（array processor）或图形处理单元（GPU）</p>
<img src="SIMD.jpg" title="SIMD" alt="" width="300"></li>
<li><p>多指令流单一数据流（MISD）</p>
<p>多个指令在一个数据流上进行操作</p>
<p>不常见的架构，一般用于容错（fault tolerance）</p>
<img src="MISD.jpg" title="MISD" alt="" width="300"></li>
<li><p>多指令流多数据流（MIMD）</p>
<p>多个处理器同时对不同数据执行不同指令</p>
<img src="MIMD.jpg" title="MIMD" alt="" width="300"></li>
</ul>
<h2 id="松耦合多处理器系统"><a href="#松耦合多处理器系统" class="headerlink" title="松耦合多处理器系统"></a>松耦合多处理器系统</h2><p><strong>Loosely coupled (distributed) multiprocessor systems</strong> - each node runs different OS instances and communicate by passing messages rather than through a shared memory</p>
<h2 id="紧耦合多处理器系统"><a href="#紧耦合多处理器系统" class="headerlink" title="紧耦合多处理器系统"></a>紧耦合多处理器系统</h2><p><strong>Tightly coupled (parallel) multiprocessor systems</strong> - usually mounted on the same mother board or within the same silicon die, communicates via shared memory and (usually) controlled by a single OS</p>
<h2 id="对称多处理系统"><a href="#对称多处理系统" class="headerlink" title="对称多处理系统"></a>对称多处理系统</h2><p><strong>Symmetric multiprocessing (SMP) system</strong></p>
<p>Systems with two or more identical cores</p>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li><p>二进制兼容性</p>
</li>
<li><p>简单的系统设计、任务调度和性能评估</p>
</li>
<li><p>容错（fault tolerance），如果一个 core 损坏了，系统仍然能够以较低的性能继续工作，而非彻底崩溃，即优雅降级（graceful degradation）</p>
</li>
<li><p>相较于 HMP，在相同性能下功耗和花费更多</p>
</li>
</ul>
<h2 id="异构多处理系统"><a href="#异构多处理系统" class="headerlink" title="异构多处理系统"></a>异构多处理系统</h2><p><strong>Heterogeneous multiprocessing (HMP) system</strong></p>
<p>Systems that use more than one kind of processor or cores</p>
<h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li><p>在同样的花费下性能更高</p>
</li>
<li><p>所需功耗更低</p>
</li>
<li><p>在设计、调试、性能评估、任务调度上造成困难</p>
</li>
<li><p>不同的 core 需要不同的二进制（如果 ISA 不同）</p>
</li>
<li><p>受限的或不存在的容错</p>
</li>
<li><p>数据格式、字节序的问题</p>
</li>
</ul>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>Computer Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习 - Evaluation</title>
    <url>/posts/2022-11-10-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<h2 id="Classification-Metrics"><a href="#Classification-Metrics" class="headerlink" title="Classification Metrics"></a>Classification Metrics</h2><p>Confusion Matrix 的相关内容在 <a href="../2022-09-08-01/">机器学习 - Confusion Matrix</a> 中。</p>
<h3 id="Accuracy"><a href="#Accuracy" class="headerlink" title="Accuracy"></a>Accuracy</h3><p>在有 \(m\) 个实例的测试数据集中的“平均正确率”：</p>
<p>\[<br>A = \frac{1}{m}\sum_{j = 1}^{m}[\hat{y}_{j} = y_{j}]<br>\]</p>
<p>其中</p>
<ul>
<li><p>\(\hat{y}_{j} = M(x_{j})\) 是模型 \(M\) 对于第 \(j\) 个实例 \(x_{j}\) 的预测值</p>
</li>
<li><p>\(y_{j}\) 是第 \(j\) 个实例的实际值</p>
</li>
<li><p>\([P] = \left\{\begin{array}{}1\ \mbox{if P is true}\\0\ \mbox{otherwise}\end{array}\right.\) （Iverson bracket）</p>
</li>
</ul>
<h3 id="Precision-Recall-F1"><a href="#Precision-Recall-F1" class="headerlink" title="Precision, Recall, F1"></a>Precision, Recall, F<sub>1</sub></h3><img src="1.png" title="" alt="" width="80%">

<p><img src="2.png"></p>
<p>Recall：当 false negative (FN) 代价大时，增加该值。如癌症预测。</p>
<p><img src="3.png"></p>
<p>Precision：当 false positive (FP) 代价大时，增加该值。如垃圾邮件预测、卫星发射时间预测。</p>
<p>F<sub>1</sub> Score：\(f_1 = \frac{2}{1/P+1/R}\) 其中 \(P\) 和 \(R\) 分别为 Precision 和 Recall</p>
<h3 id="ROC-AUC"><a href="#ROC-AUC" class="headerlink" title="ROC, AUC"></a>ROC, AUC</h3><p><img src="4.png"></p>
<p>Receiver Operator Characteristic (ROC) Curve</p>
<ul>
<li><p>对角线表示随机，即 50% 的正确率</p>
</li>
<li><p>如果 ROC 曲线在随机线的上方，那么该模型比随机更准确</p>
</li>
<li><p>完美的曲线满足 TPR = 1 且 FPR = 0</p>
</li>
</ul>
<p><img src="5.png"></p>
<p>Area Under Curve (AUC) of ROC</p>
<ul>
<li><p>AUC 是一个精确的数值衡量标准，可用于更清晰的比较</p>
</li>
<li><p>当 AUC &gt; 0.5 时，模型比随机更准确</p>
</li>
<li><p>AUC ≈ 1 表示模型非常准确</p>
</li>
</ul>
<h3 id="Micro-and-Macro-Averaging"><a href="#Micro-and-Macro-Averaging" class="headerlink" title="Micro- and Macro-Averaging"></a>Micro- and Macro-Averaging</h3><p>Multiclass evaluation metrics</p>
<p>Micro-Average:</p>
<img src="6.png" title="" alt="" width="80%">

<p>Macro-Average:</p>
<img src="7.png" title="" alt="" width="80%">

<h2 id="Regression-Metrics"><a href="#Regression-Metrics" class="headerlink" title="Regression Metrics"></a>Regression Metrics</h2><h3 id="1D-regression"><a href="#1D-regression" class="headerlink" title="1D regression"></a>1D regression</h3><p>Mean Absolute Error (MAE):</p>
<p>\[<br>\mathrm{MAE} = \frac{1}{m}\sum_{j = 1}^{m}|\hat{y}_{j} - y_{j}|<br>\]</p>
<p>Mean Squared Error (MSE):</p>
<p>\[<br>\mathrm{MSE} = \frac{1}{m}\sum_{j = 1}^{m}(\hat{y}_{j} - y_{j})^2<br>\]</p>
<p>Root Mean Squared Error (RMSE):</p>
<p>\[<br>\mathrm{RMSE} = \sqrt{\frac{1}{m}\sum_{j = 1}^{m}(\hat{y}_{j} - y_{j})^2}<br>\]</p>
<h3 id="Vector-Regression"><a href="#Vector-Regression" class="headerlink" title="Vector Regression"></a>Vector Regression</h3><p>Euclidean Distance:</p>
<p>\[<br>d = \sqrt{(\hat{y} - y)^{T}(\hat{y} - y)}<br>\]</p>
<p>Cosine Similarity:</p>
<p>\[<br>s = \cos(\theta) = \frac{\hat{y}}{\Vert\hat{y}\Vert_2}\cdot\frac{y}{\Vert y\Vert_2}<br>\]</p>
<p>Angular Distance:</p>
<p>\[<br>\theta = \cos^{-1}(s)<br>\]</p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习 - Data Processing</title>
    <url>/posts/2022-11-12-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<h2 id="Line-Separability"><a href="#Line-Separability" class="headerlink" title="Line Separability"></a>Line Separability</h2><p><img src="1.png"></p>
<p>许多的模型假设了数据特征是线性可分的，但是实际上数据不一定符合该假设。这种情况在非结构化数据中尤为常见，如图像、时间、文本数据。</p>
<p>假如特征非线性可分，那么就不能得到好的线性模型的学习结果，需要更加复杂的模型。</p>
<p>如何判断线性可分性：</p>
<ul>
<li><p>图像化，但是只适用于低维度数据集</p>
</li>
<li><p>Computational metrics</p>
<ul>
<li><p>Linear Soft-Margin SVM</p>
</li>
<li><p>Reduce dimensions (LDA, PCA), then visualize separability</p>
</li>
</ul>
</li>
</ul>
<p>如何缓解：</p>
<ul>
<li><p>找到真正有用的特征</p>
<ul>
<li>Feature Extraction (collect new features of the data)</li>
<li>Feature Selection (keep fewer, more useful features)</li>
</ul>
</li>
<li><p>特征变换</p>
<ul>
<li><p>Feature Engineering (e.g., x → x<sup>2</sup>)</p>
</li>
<li><p>Change Basis Vectors (e.g., PCA, LDA)</p>
</li>
<li><p>Kernel (e.g., Kernel SVM)</p>
</li>
<li><p>Feature Learning (e.g., Neural Networks)</p>
</li>
</ul>
</li>
</ul>
<h3 id="Principal-Component-Analysis-PCA"><a href="#Principal-Component-Analysis-PCA" class="headerlink" title="Principal Component Analysis (PCA)"></a>Principal Component Analysis (PCA)</h3><p><img src="2.png"></p>
<p>\[<br>\begin{pmatrix}<br>x_{1} \\<br>x_{2} \\<br>\end{pmatrix}<br>\overset{\begin{matrix}{\mbox{PCA}}\\{\mbox{Projection}}\\ \end{matrix}}{\rightarrow}<br>\begin{pmatrix}<br>{PC}_{1} \\<br>{PC}_{2} \\<br>\end{pmatrix}<br>\]</p>
<p>\[<br>S_1 &gt; S_2<br>\]</p>
<br>

<p>\[<br>\begin{pmatrix}<br>{PC}_{1} \\<br>{PC}_{2} \\<br>\end{pmatrix}<br>\overset{\begin{matrix}{\mbox{Reduce}}\\{\mbox{Dimensions}}\\ \end{matrix}}{\rightarrow}<br>\begin{pmatrix}<br>{PC}_{1} \\<br>\end{pmatrix}<br>\]</p>
<p><strong>Maximize Data Variance</strong></p>
<p>Good for supervised learning and unsupervised learning</p>
<h3 id="Linear-Discriminant-Analysis-LDA"><a href="#Linear-Discriminant-Analysis-LDA" class="headerlink" title="Linear Discriminant Analysis (LDA)"></a>Linear Discriminant Analysis (LDA)</h3><p><img src="3.png"></p>
<p>\[<br>F = \frac{|\mu_r - \mu_b|^2}{s_r^2 + s_b^2}<br>\]</p>
<br>

<p>\[<br>\begin{pmatrix}<br>x_{1} \\<br>x_{2} \\<br>\end{pmatrix}<br>\overset{\begin{matrix}{\mbox{LDA}}\\{\mbox{Projection}}\\ \end{matrix}}{\rightarrow}<br>\begin{pmatrix}<br>{LD}_{1} \\<br>{LD}_{2} \\<br>\end{pmatrix}<br>\]</p>
<p>\[<br>F_1 &gt; F_2<br>\]</p>
<br>

<p>\[<br>\begin{pmatrix}<br>{LD}_{1} \\<br>{LD}_{2} \\<br>\end{pmatrix}<br>\overset{\begin{matrix}{\mbox{Reduce}}\\{\mbox{Dimensions}}\\ \end{matrix}}{\rightarrow}<br>\begin{pmatrix}<br>{LD}_{1} \\<br>\end{pmatrix}<br>\]</p>
<p><strong>Maximize Class Separation</strong></p>
<p>Better for supervised learning but not for unsupervised learning</p>
<h2 id="Curse-of-Dimensionality"><a href="#Curse-of-Dimensionality" class="headerlink" title="Curse of Dimensionality"></a>Curse of Dimensionality</h2><p>特征的数量太大时：</p>
<p>数据过于稀疏，无法获得真正的决策边界（对于分类来说），也很容易造成过拟合。</p>
<p>数据间距离过于接近，影响 kNN，clustering 等的表现。</p>
<p>如何判断维度过多：</p>
<p>Visualize histogram of distances (check for variance σ<sup>2</sup>) 但是一般来说分析这个会很繁琐</p>
<p>如何缓解：</p>
<ul>
<li><p>Feature Selection</p>
</li>
<li><p>Dimensionality Reduction</p>
<ul>
<li><p>Linear Matrix Factorization (e.g., PCA, LDA)</p>
</li>
<li><p>Deep Auto-Encoders</p>
</li>
</ul>
</li>
</ul>
<h2 id="Imbalanced-Data"><a href="#Imbalanced-Data" class="headerlink" title="Imbalanced Data"></a>Imbalanced Data</h2><p>数据值在特征中不是均匀分布的，在这种情况下，评价指标会产生误导，模型会过拟合至多数类。</p>
<p>事件发生不均匀（比如罕见的疾病），或者数据收集不均匀，都有可能造成这个问题。</p>
<p>如何判断数据不平衡：</p>
<p>Visualize histogram or bar chart of feature values</p>
<p>如何缓解：</p>
<ul>
<li><p>Collect more data instances</p>
</li>
<li><p>Resample instances (e.g., Undersampling, Oversampling, SMOTE)</p>
</li>
</ul>
<p><img src="4.png"></p>
<p><strong>Synthetic Minority Oversampling Technique (SMOTE)</strong></p>
<p><img src="5.png"></p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划 - 背包问题</title>
    <url>/posts/2022-11-13-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="01-背包"><a href="#01-背包" class="headerlink" title="01 背包"></a>01 背包</h2><p>问题描述：</p>
<p>N 件物品，第 i 件物品的价值和占用体积分别为 W<sub>i</sub> 和 C<sub>i</sub>，背包容量为 V。求解把哪些物品放入背包能够获得最大价值且物品体积不超过背包容量。</p>
<p>思路：</p>
<p>每一件物品只有两种可能，放或者不放入背包。</p>
<p>转移方程：</p>
<p><code>dp[i, v]</code> 表示前 i 件物品放入容量为 v 的背包所能得到的最大价值。</p>
<p><code>dp[i, v] = max(dp[i - 1, v], dp[i - 1, v - C[i]] + W[i])</code></p>
<p>代码：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> v = C[i]; v &lt;= V; v++) &#123;</span><br><span class="line">        dp[i, v] = max(dp[i - <span class="number">1</span>, v], dp[i - <span class="number">1</span>, v - C[i]] + W[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[N, V];</span><br></pre></td></tr></table></figure>

<p>优化：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> v = V; v &gt;= C[i]; v--) &#123;</span><br><span class="line">        dp[v] = max(dp[v], dp[v - C[i]] + W[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[V]</span><br></pre></td></tr></table></figure>

<h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><p>问题描述：</p>
<p>N 种数量无限的物品，第 i 种物品的价值和占用体积分别为 W<sub>i</sub> 和 C<sub>i</sub>，背包容量为 V。求解把哪些物品放入背包能够获得最大价值且物品体积不超过背包容量。</p>
<p>思路：</p>
<p>和 01 背包问题类似，只不过该问题中每种物品可放入多次。即对于一个物品来说，不是考虑放或不放入，而是考虑放入 0 件、1 件、2 件……V / C<sub>i</sub> 件</p>
<p>转移方程：</p>
<p><code>dp[i, v]</code> 表示前 i 件物品放入容量为 v 的背包所能得到的最大价值。</p>
<p><code>dp[i, v] = max(dp[i - 1, v - k * C[i]] + k * W[i]) (0 ≤ k ≤ v / C[i])</code></p>
<p>代码：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> v = <span class="number">0</span>; v &lt;= V; v++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">0</span>; k &lt;= v / C[i]; k++) &#123;</span><br><span class="line">            dp[i, v] = max(dp[i, v], dp[i - <span class="number">1</span>, v - k * C[i]] + k * W[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[N, V];</span><br></pre></td></tr></table></figure>

<p>优化：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> v = C[i]; v &lt;= V; v++) &#123;</span><br><span class="line">        dp[v] = max(dp[v], dp[v - C[i]] + W[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[V]</span><br></pre></td></tr></table></figure>

<h2 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h2><p>问题描述：</p>
<p>N 种数量有限的物品，第 i 种物品的价值，占用体积和数量分别为 W<sub>i</sub>，C<sub>i</sub> 和 M<sub>i</sub>，背包容量为 V。求解把哪些物品放入背包能够获得最大价值且物品体积不超过背包容量。</p>
<p>思路：</p>
<p>和完全背包问题类似，只不过该问题中每种物品并不是无限的而是有一个最大数量。</p>
<p>转移方程：</p>
<p><code>dp[i, v]</code> 表示前 i 件物品放入容量为 v 的背包所能得到的最大价值。</p>
<p><code>dp[i, v] = max(dp[i - 1, v - k * C[i]] + k * W[i]) (0 ≤ k ≤ min(M[i], v / C[i]))</code></p>
<p>代码：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> v = <span class="number">0</span>; v &lt;= V; v++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">0</span>; k &lt;= min(v / C[i], M[i]); k++) &#123;</span><br><span class="line">            dp[i, v] = max(dp[i, v], dp[i - <span class="number">1</span>, v - k * C[i]] + k * W[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[N, V];</span><br></pre></td></tr></table></figure>

<p>优化：</p>
<p>二进制！</p>
<p>将第 i 种物品拆分为 1，2，2<sup>2</sup>…2<sup>k - 1</sup>，M<sub>i</sub> - 2<sup>k</sup> + 1 个物品的组合，然后使用 01 背包求解。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拆分</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">1</span>; k &lt;= M[i]; k *= <span class="number">2</span>) &#123;</span><br><span class="line">        new_C[new_N] = k * C[i];</span><br><span class="line">        new_W[new_N] = k * W[i];</span><br><span class="line">        M[i] -= k;</span><br><span class="line">        new_N++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (M[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        new_C[new_N] = M[i] * C[i];</span><br><span class="line">        new_W[new_N] = M[i] * W[i];</span><br><span class="line">        new_N++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 01 背包</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; new_N; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> v = V; v &gt;= new_C[i]; v--) &#123;</span><br><span class="line">        dp[v] = max(dp[v], dp[v - new_C[i]] + new_W[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[V];</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习 - Perceptron 和 Neural Networks</title>
    <url>/posts/2022-11-15-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<h2 id="Perceptron"><a href="#Perceptron" class="headerlink" title="Perceptron"></a>Perceptron</h2><p><img src="1.png"></p>
<p>感知器，是一个线性分类器（Linear Classifier）。</p>
<p>其中 \(x_r\) 为输入，\(w_r\) 为权重（weights），\(w_0\) 为偏置项（bias term）。</p>
<p>\(g\) 为激活函数（activation function），在感知器中 \(g = \mbox{ unit step function }\)。</p>
<p>\(\hat{y}\) 为输出，\(\hat{y} = u(\sum_{r = 0}^n w_r x_r)\)。</p>
<p>使用向量表示：</p>
<p><img src="2.png"></p>
<p>\(\hat{y} = u(w^\mathrm{T} x)\)。</p>
<h2 id="PLA"><a href="#PLA" class="headerlink" title="PLA"></a>PLA</h2><p><strong>Perceptron Learning Algorithm</strong></p>
<p>步骤：</p>
<ol>
<li><p>初始化权重 \(w\)，可以是全 0，或者随机数值</p>
</li>
<li><p>对于任意一个特征为 \(x^{(i)}\) 的实例 \(i\)，进行分类计算：\(\hat{y}^{(i)} = u(w^\mathrm{T} x^{(i)})\)</p>
</li>
<li><p>选择一个<strong>分类错误</strong>的的实例，进行权重的更新：\(w \leftarrow w + \triangle w\)</p>
</li>
<li><p>重复步骤 2 和 3 直到误差减小至阈值或者迭代次数到达最大值</p>
</li>
</ol>
<p>权重更新：</p>
<p><img src="3.png"></p>
<hr>
<p>感知器是线性分类器，也就是说它无法对非线性可分数据进行分类。</p>
<p>要实现非线性分类，需要</p>
<ul>
<li><p>其他激活函数</p>
</li>
<li><p>多个感知器：Multi-Layer Perceptron (MLP)</p>
</li>
</ul>
<h2 id="Activation-Functions"><a href="#Activation-Functions" class="headerlink" title="Activation Functions"></a>Activation Functions</h2><h3 id="Unit-Step"><a href="#Unit-Step" class="headerlink" title="Unit Step"></a>Unit Step</h3><p>\[<br>u(x) = \begin{cases}+1\ x &gt; 0 \\ 0\ x \leq 0\end{cases}<br>\]</p>
<h3 id="Sign"><a href="#Sign" class="headerlink" title="Sign"></a>Sign</h3><p>\[<br>\mathrm{sgn}(x) = \begin{cases}+1\ x &gt; 0 \\ -1\ x \leq 0\end{cases}<br>\]</p>
<h3 id="Sigmoid"><a href="#Sigmoid" class="headerlink" title="Sigmoid"></a>Sigmoid</h3><p><img src="4.png"></p>
<p>\[<br>\sigma (x) = \frac{1}{1 + e^{-x}}<br>\]</p>
<h3 id="tanh"><a href="#tanh" class="headerlink" title="tanh"></a>tanh</h3><p><img src="5.png"></p>
<p>\[<br>\tanh (x)<br>\]</p>
<h3 id="ReLU"><a href="#ReLU" class="headerlink" title="ReLU"></a>ReLU</h3><p><img src="6.png"></p>
<p>\[<br>\max (0, x)<br>\]</p>
<hr>
<p>如果 \(g\) 是可导的，那么可以用梯度下降法来快速找到 \(\varepsilon = y - \hat{y}\) 的最小值。</p>
<p>Sigmoid，tanh 和 ReLU 是非线性激活函数，且是可导的。</p>
<h2 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h2><p><strong>梯度下降法</strong></p>
<p>权重更新（single neuron）：</p>
<p><img src="7.png"></p>
<p>\[<br>\triangledown \varepsilon = \frac{\mathrm{d}\varepsilon}{\mathrm{d}w} = \begin{pmatrix}{\partial\varepsilon / \partial w_1}\\ \vdots \\{\partial\varepsilon / \partial w_r}\\ \vdots \\{\partial\varepsilon / \partial w_n}\\\end{pmatrix} = \frac{\mathrm{d}\varepsilon}{\mathrm{d}g} \frac{\mathrm{d}g}{\mathrm{d}f} x<br>\]</p>
<p>Binary Cross-Entropy (for classification)</p>
<p>\[<br>\varepsilon = -y \log \hat{y}<br>\]</p>
<p>Square Error (for regression)</p>
<p>\[<br>\varepsilon = \frac{1}{2}(y - \hat{y})^2<br>\]</p>
<table>
<thead>
<tr>
<th>Error \(\varepsilon\)</th>
<th>\(\mathrm{d}\varepsilon / \mathrm{d}\hat{y}\)</th>
<th>Activation Function \(\hat{y} = g(f)\)</th>
<th>\(\mathrm{d}g / \mathrm{d}f\)</th>
</tr>
</thead>
<tbody><tr>
<td>Square Error</td>
<td>\(-(y - \hat{y})\)</td>
<td>Sigmoid</td>
<td>\((1 - g)g\)</td>
</tr>
<tr>
<td>Binary Cross Entropy</td>
<td>\(-\frac{y}{\hat{y}}\)</td>
<td>tanh</td>
<td>\(1 - g^2\)</td>
</tr>
<tr>
<td></td>
<td></td>
<td>ReLU</td>
<td>\([f &gt; 0]\)</td>
</tr>
</tbody></table>
<h2 id="Neural-Networks"><a href="#Neural-Networks" class="headerlink" title="Neural Networks"></a>Neural Networks</h2><p><img src="8.png"></p>
<p><img src="9.png"></p>
<p><img src="10.png"></p>
<p>使用向量表示：</p>
<p><img src="11.png"></p>
<p>Layer Activation:</p>
<p><img src="12.png"></p>
<h2 id="Backpropagation"><a href="#Backpropagation" class="headerlink" title="Backpropagation"></a>Backpropagation</h2><p>权重更新（neural network）：</p>
<p><img src="14.png"></p>
<p>\[<br>\triangledown \varepsilon = \frac{\mathrm{d}\varepsilon}{\mathrm{d}W} = \begin{pmatrix}{\partial\varepsilon / \partial W^{[1]}}\\ \vdots \\{\partial\varepsilon / \partial W^{[l]}}\\ \vdots \\{\partial\varepsilon / \partial W^{[L]}}\\\end{pmatrix}<br>\]</p>
<p>\[<br>\frac{\mathrm{d}\varepsilon}{\mathrm{d}W^{[l]}} = \frac{\mathrm{d}\varepsilon}{\mathrm{d}\hat{y}} \frac{\mathrm{d}\hat{y}}{\mathrm{d}W^{[l]}}<br>\]</p>
<p>计算 \(\mathrm{d}\hat{y} / \mathrm{d}W^{[l]}\)：</p>
<p><img src="13.png"></p>
<p>We calculate the gradient \(\mathrm{d}\hat{y} / \mathrm{d}W^{[l]}\) of the current layer \(l\) as the multiplication of:</p>
<ol>
<li><p>Previous layer’s activation \(a^{[l -1]}\)</p>
</li>
<li><p>Current layer’s gradient of the activation function \(\mathrm{d}g^{[l]} / \mathrm{d}f^{[l]}\)</p>
</li>
<li><p>Next layer’s weights \(W^{[l + 1]}\)</p>
</li>
<li><p>Backpropagated partial gradient from later layers \(\delta^{[l + 1]}\)</p>
</li>
</ol>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习 - CNN</title>
    <url>/posts/2022-11-17-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Convolutional-Neural-Networks"><a href="#Convolutional-Neural-Networks" class="headerlink" title="Convolutional Neural Networks"></a>Convolutional Neural Networks</h2><p><img src="1.png"></p>
<ol>
<li><p>Learn Spatial Feature</p>
<ul>
<li><p>一系列卷积层和池化层</p>
</li>
<li><p>逐步学习更多样化的和更高层次的特征</p>
</li>
</ul>
</li>
<li><p>Flattening</p>
<ul>
<li>转换为固定长度的一维向量</li>
</ul>
</li>
<li><p>Learn Nonlinear Features</p>
<ul>
<li><p>完全连接层（普通的 neurons）</p>
</li>
<li><p>使用多层来学习非线性关系</p>
</li>
</ul>
</li>
<li><p>Classification</p>
<ul>
<li><p>Softmax - 多类逻辑回归</p>
</li>
<li><p>输入向量为图像嵌入向量（image embedding vector）</p>
</li>
</ul>
</li>
</ol>
<h3 id="Convolutional-Layer"><a href="#Convolutional-Layer" class="headerlink" title="Convolutional Layer"></a>Convolutional Layer</h3><p>卷积核（Kernel），或称过滤器（Filter），用于提取特征。</p>
<p><img src="2.png"></p>
<p>Hyperparameters:</p>
<ul>
<li>Kernel size k = {3 × 2}<ul>
<li>卷积核大小</li>
</ul>
</li>
<li>Padding p = {(2 + 2) × 0}<ul>
<li>边界填充</li>
</ul>
</li>
<li>Stride s = {1 × 2}<ul>
<li>步幅</li>
</ul>
</li>
</ul>
<p>通道（Channel）数：灰度图像通道数是 1，RGB 图像则有红蓝绿共 3 个通道。</p>
<p>加上通道数这个维度，一个卷积核用一个三维向量来进行表示。</p>
<p><img src="3.png"></p>
<p><img src="4.png"></p>
<h3 id="Pooling-Layer"><a href="#Pooling-Layer" class="headerlink" title="Pooling Layer"></a>Pooling Layer</h3><ul>
<li><p>对 feature maps 进行降样（Downsample）处理</p>
</li>
<li><p>帮助训练之后的卷积核检测更高层次的特征</p>
</li>
<li><p>降低维度</p>
</li>
<li><p>聚合方法：</p>
<ul>
<li><p>Max-Pool（最常用）</p>
</li>
<li><p>Average-Pool</p>
</li>
<li><p>Sum-Pool</p>
</li>
</ul>
</li>
</ul>
<p><img src="5.png"></p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>常用图论算法整理</title>
    <url>/posts/2022-12-07-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Dijkstra-算法"><a href="#Dijkstra-算法" class="headerlink" title="Dijkstra 算法"></a>Dijkstra 算法</h2><p>解决单源最短路径问题，注意图中不能有负权边。</p>
<p>定义两个节点的集合 S 和 U，S 表示已经求出最短路径的节点的集合，U 表示还未求出最短路径的集合。</p>
<p>源点到本身的距离为 0，其他节点初始时距源点的距离为无穷大。</p>
<p>从 U 中选出一个距源点距离最短的节点， 把它从 U 移动至 S 中，并且更新该节点的相邻节点的距源点的距离（松弛）。</p>
<p>重复上述步骤，直到 S 包含所有的节点。</p>
<p><img src="Dijkstra_Animation.gif" alt="Dijkstra_Animation.gif"></p>
<blockquote>
<p><a href="https://visualgo.net/en/sssp?slide=7">可视化</a></p>
</blockquote>
<h2 id="Prim-算法"><a href="#Prim-算法" class="headerlink" title="Prim 算法"></a>Prim 算法</h2><p>解决最小生成树问题。</p>
<p>和 Dijkstra 有一点类似（贪心），但是 Prim 算法中更新的不是距源点距离，而是距已标记集合（S）的距离。</p>
<p><img src="PrimDemo.gif" alt="PrimDemo.gif"></p>
<blockquote>
<p><a href="https://visualgo.net/en/mst?slide=5">可视化</a></p>
</blockquote>
<h2 id="Kruskal-算法"><a href="#Kruskal-算法" class="headerlink" title="Kruskal 算法"></a>Kruskal 算法</h2><p>同样是解决最小生成树的问题。</p>
<p>思路很简单，重复从图中选择未标记的且与已标记边不构成回路且权重最小的边进行标记，直到遍历完所有节点。</p>
<p><img src="KruskalDemo.gif" alt="KruskalDemo.gif"></p>
<blockquote>
<p><a href="https://visualgo.net/en/mst?slide=4">可视化</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>FFmpeg 常用命令</title>
    <url>/posts/2022-12-12-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>ffmpeg [global_options] &#123;[input_file_options] -i input_url&#125; ... &#123;[output_file_options] output_url&#125; ...</code></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="获取版本"><a href="#获取版本" class="headerlink" title="获取版本"></a>获取版本</h3><p><code>ffmpeg -version</code></p>
<h3 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h3><p><code>ffmpeg -help</code></p>
<h3 id="获取媒体信息"><a href="#获取媒体信息" class="headerlink" title="获取媒体信息"></a>获取媒体信息</h3><p><code>ffmpeg -i input.mp4 -hide_banner</code></p>
<h3 id="转换格式"><a href="#转换格式" class="headerlink" title="转换格式"></a>转换格式</h3><p><code>ffmpeg -i input.mp4 output.flv</code></p>
<p><code>ffmpeg -i input.mp4 -vcodec copy -acodec copy output.flv</code></p>
<p><code>-vcodec copy</code> 和 <code>-acodec copy</code> 表示音视频直接拷贝，无编解码。或者可以写为 <code>-c copy</code>。</p>
<h3 id="抽取视频"><a href="#抽取视频" class="headerlink" title="抽取视频"></a>抽取视频</h3><p><code>ffmpeg -i input.mp4 -vcodec copy -an output.h264</code></p>
<p><code>-an</code> 表示无音频。</p>
<h3 id="抽取音频"><a href="#抽取音频" class="headerlink" title="抽取音频"></a>抽取音频</h3><p><code>ffmpeg -i input.mp4 -acodec copy -vn output.aac</code></p>
<p><code>-vn</code> 表示无视频。</p>
<h3 id="音视频合并"><a href="#音视频合并" class="headerlink" title="音视频合并"></a>音视频合并</h3><p><code>ffmpeg -i input.h264 -i input.aac -vcodec copy -acodec copy output.mp4</code></p>
<h3 id="改变音频音量"><a href="#改变音频音量" class="headerlink" title="改变音频音量"></a>改变音频音量</h3><p><code>ffmpeg -i input.mp3 -af volume=0.5 output.mp3</code></p>
<p>上面的例子会将音量调整为原来的一半。</p>
<h3 id="改变视频分辨率"><a href="#改变视频分辨率" class="headerlink" title="改变视频分辨率"></a>改变视频分辨率</h3><p><code>ffmpeg -i input.mp4 -vf scale=1280:720 -acodec copy output.mp4</code></p>
<p><code>ffmpeg -i input.mp4 -vf scale=1280:-1 -acodec copy output.mp4</code></p>
<p>使用 <code>-1</code> 以保持视频原始宽高比。</p>
<h3 id="视频翻转"><a href="#视频翻转" class="headerlink" title="视频翻转"></a>视频翻转</h3><p><code>ffmpeg -i input.mp4 -vf hflip -acodec copy output.mp4</code></p>
<p><code>ffmpeg -i input.mp4 -vf vflip -acodec copy output.mp4</code></p>
<h3 id="视频旋转"><a href="#视频旋转" class="headerlink" title="视频旋转"></a>视频旋转</h3><p><code>ffmpeg -i input.mp4 -vf transpose=1 -acodec copy output.mp4</code></p>
<p>上面的例子会将视频顺时针旋转 90°。</p>
<h3 id="视频裁剪"><a href="#视频裁剪" class="headerlink" title="视频裁剪"></a>视频裁剪</h3><p><code>ffmpeg -ss 00:00:10 -i input.mp4 -t 30 -c copy output.mp4</code></p>
<p><code>-ss</code> 指定起始时间，<code>-t</code> 指定时长。</p>
<p>值得注意的是，当使用 <code>-c copy</code> 时会出现裁剪不精确的情况。</p>
<h3 id="视频分割为多份"><a href="#视频分割为多份" class="headerlink" title="视频分割为多份"></a>视频分割为多份</h3><p><code>ffmpeg -i input.mp4 -t 10 1.mp4 -ss 00:00:10 -t 10 2.mp4 -ss 00:00:20 -t 10 3.mp4</code></p>
<h3 id="提取视频图像"><a href="#提取视频图像" class="headerlink" title="提取视频图像"></a>提取视频图像</h3><p><code>ffmpeg -ss 00:00:30 -i input.mp4 -vframes 1 output.jpg</code></p>
]]></content>
  </entry>
  <entry>
    <title>强化学习复习笔记#1</title>
    <url>/posts/2024-04-29-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li><p>Agent（智能体）: 学习者和决策者</p>
</li>
<li><p>Reward（奖励）: 智能体尝试最大化的一个数值</p>
</li>
<li><p>Environment （环境）: 智能体之外与奖励有关的一切</p>
</li>
</ul>
<p>智能体和环境不断地进行交互：</p>
<p><img src="1.png"></p>
<p>要对于这种决策过程进行建模，我们使用马尔可夫决策过程（Markov Decision Process, MDP）。</p>
<h2 id="马尔可夫决策过程"><a href="#马尔可夫决策过程" class="headerlink" title="马尔可夫决策过程"></a>马尔可夫决策过程</h2><p>用元组 \((\mathcal{S}, \mathcal{A}, \mathcal{R}, \mathcal{P}, \gamma)\) 来描述，其中按顺序分别是状态（states），动作（actions），奖励（rewards），转移概率（transition probabilities）和折现率（discount rate）。</p>
<p>转移概率 \(p \in \mathcal{P}\)：</p>
<p>\[<br>p(s’, r | s, a) \doteq \mathrm{Pr} \{ S_t = s’, R_t = r | S_{t - 1} = s, A_{t - 1} = a \}<br>\]</p>
<p>也就是说呢，这个转移概率的定义即是在状态 \(s\) 下，进行动作 \(a\)，能够进入状态 \(s’\) 并且获得奖励 \(r\) 的概率。不难发现，这个概率只是依赖于紧接着的之前的状态和动作，更早的不在考量中。</p>
<p>The marginal probablity of the reward \(r\):</p>
<p>\[<br>p(r | s, a) = \sum_{s’ \in \mathcal{S}}p(s’, r | s, a)<br>\]</p>
<p>The marginal probablity of the next state \(s’\):</p>
<p>\[<br>p(s’ | s, a) = \sum_{r \in \mathcal{R}}p(s’, r | s, a)<br>\]</p>
<p>状态-行动对的预期回报：</p>
<p>\[<br>r(s, a) \doteq \mathbb{E}[R_t | S_{t-1} = s, A_{t-1} = a] = \sum_{r \in \mathcal{R}}r \sum_{s’ \in \mathcal{S}}p(s’, r | s, a)<br>\]</p>
<p>MDP 的返回：</p>
<p>\[<br>G_t \doteq R_{t+1} + \gamma R_{t+2} + \gamma^2 R_{t+3} + \dots = \sum_{k=0}^{\infty} \gamma^k R_{t+k+1}<br>\]</p>
<p>为啥会有一个折现率 \(\gamma\) 呢？这玩意儿表达的意思是，未来奖励对我们来说没有现在眼前奖励重要，所以我们用这么一个因子来削弱未来奖励的影响。假如 \(\gamma = 0\)，那么我们的智能体非常短视，只能看到眼前一步的奖励。类似的，假如 \(\gamma \rightarrow 1\)，那么我们的智能体是比较远视的。</p>
<p>递推形式：</p>
<p>\[<br>G_t \doteq R_{t+1} + \gamma G_{t+1}<br>\]</p>
<p>对于持续任务（continuing task），即智能体和环境的交互持续不断的任务来说，如上所述，我们有 \( G_t \doteq R_{t+1} + \gamma R_{t+2} + \gamma^2 R_{t+3} + \dots = \sum_{k=0}^{\infty} \gamma^k R_{t+k+1} \)。</p>
<p>而对于非持续任务（episodic task），即存在一个明确的结束的任务来说，我们有 \( G_t \doteq R_{t+1} + R_{t+2} + R_{t+3} + \dots + R_T \)。</p>
<p>策略：</p>
<ul>
<li><p>Stochastic policy: \(\pi (a | s):\mathcal{S} \mapsto [0, 1]\)，即 \(\pi (\cdot | s)\) 是一个在 \(\mathcal{A}\) 上的概率分配，可用于探索和数据收集</p>
</li>
<li><p>Determinictic policy: \(\pi : \mathcal{S} \mapsto \mathcal{A}\)，即 \(a = \pi (s)\)</p>
</li>
</ul>
<p>价值函数：</p>
<ul>
<li><p>State-value function: 从状态 \(s\) 开始，并在之后按照策略 \(\pi\) 进行行动的预期返回值</p>
<p>\[<br>v_{\pi} (s) \doteq \mathbb{E}_{\pi}[G_t | S_t = s] = \mathbb{E}_{\pi}\left[\sum_{k=0}^{\infty} \gamma^k R_{t+k+1} \bigg| S_t = s\right]<br>\]</p>
</li>
<li><p>Action-value function: 从状态 \(s\) 开始，进行动作 \(a\)，并在之后按照策略 \(\pi\) 进行行动的预期返回值</p>
<p>\[<br>q_{\pi} (s, a) \doteq \mathbb{E}_{\pi}[G_t | S_t = s, A_t = a] = \mathbb{E}_{\pi}\left[\sum_{k=0}^{\infty} \gamma^k R_{t+k+1} \bigg| S_t = s, A_t = a\right]<br>\]</p>
</li>
</ul>
<p>价值函数能让我们衡量一个策略 \(\pi\) 的好坏，并且可用于策略表现的提升。</p>
<p>贝尔曼方程：</p>
<p>\[<br>\begin{equation}<br>\begin{split}<br>v_{\pi} (s) &amp; \doteq \mathbb{E}_{\pi}[G_t | S_t = s] \\<br>&amp; = \mathbb{E}_{\pi}[R_{t+1} + \gamma G_{t+1} | S_t = s] \\<br>&amp; = \sum_a \pi (a | s) \sum_{s’} \sum_r p(s’, r | s, a) \left[r + \gamma \mathbb{E}_{\pi}[G_{t+1} | S_{t+1} = s’]\right] \\<br>&amp; = \sum_a \pi (a | s) \sum_{s’, r} p(s’, r | s, a) \left[r + \gamma v_\pi (s’)\right],\mbox{ for all } s \in \mathcal{S}<br>\end{split}<br>\end{equation}<br>\]</p>
<p>current state value = one step (immediate) reward + discounted value of the next state</p>
<h2 id="贝尔曼最优方程"><a href="#贝尔曼最优方程" class="headerlink" title="贝尔曼最优方程"></a>贝尔曼最优方程</h2><p>Optimal state-value function:</p>
<p>\[<br>v_* (s) \doteq \underset{\pi}{\mathrm{max}} \ v_\pi (s) \mbox{ for all } s \in \mathcal{S}<br>\]</p>
<p>Optimal action-value function:</p>
<p>\[<br>q_* (s, a) \doteq \underset{\pi}{\mathrm{max}} \ q_\pi (s, a) \mbox{ for all } s \in \mathcal{S} \mbox{ and } a \in \mathcal{A}<br>\]</p>
<p><img src="2.png"></p>
<p>\[<br>v_* (s) = \underset{a \in \mathcal{A}(s)}{\mathrm{max}} \ q_{\pi_*} (s, a) \mbox{ for all } s \in \mathcal{S}<br>\]</p>
<p>\[<br>v_* (s) = \underset{a}{\mathrm{max}} \ \sum_{s’, r} p(s’, r | s, a)[r + \gamma v_* (s’)]<br>\]</p>
<p>\[<br>q_* (s, a) = \sum_{s’, r} p(s’, r | s, a)[r + \gamma \underset{a’}{\mathrm{max}} \ q_* (s’, a’)]<br>\]</p>
<p>我们可以使用 \( v_{*} \) 和 \( q_{*} \) 来计算最优策略：</p>
<p>对于 state-value function：</p>
<p>\[<br>\begin{split}<br>a^* &amp; = \underset{a}{\mathrm{argmax}} \ \mathbb{E} [R + \gamma v_* (S’)] \\<br>&amp; = \underset{a}{\mathrm{argmax}} \ \sum_{s’, r} p(s’, r | s, a)[r + \gamma v_* (s’)]<br>\end{split}<br>\]</p>
<p>对于 action-value function，更简单，无需 transition probabilities：</p>
<p>\[<br>a^* = \underset{a}{\mathrm{argmax}} \ q_* (s, a)<br>\]</p>
<p>最终我们把问题的关键放在解决贝尔曼最优方程上面，只要解决了它，自然能得出最优的决策过程。</p>
<h2 id="策略迭代"><a href="#策略迭代" class="headerlink" title="策略迭代"></a>策略迭代</h2><p><img src="3.png"></p>
<p>迭代进行 policy evaluation (E) 和 policy improvement (I)。</p>
<p><img src="4.png"></p>
<h2 id="价值迭代"><a href="#价值迭代" class="headerlink" title="价值迭代"></a>价值迭代</h2><p><img src="5.png"></p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>强化学习复习笔记#2</title>
    <url>/posts/2024-05-01-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<h2 id="蒙特卡罗方法（Monte-Carlo-Methods）"><a href="#蒙特卡罗方法（Monte-Carlo-Methods）" class="headerlink" title="蒙特卡罗方法（Monte Carlo Methods）"></a>蒙特卡罗方法（Monte Carlo Methods）</h2><p><img src="1.png"></p>
<p>Policy evaluation:</p>
<p>我们知道：</p>
<p>\[<br>v_{\pi} (s) \doteq \mathbb{E}_{\pi}[G_t | S_t = s] = \mathbb{E}_{\pi}\left[\sum_{k=0}^{\infty} \gamma^k R_{t+k+1} \bigg| S_t = s\right],\mbox{ for all } s \in \mathcal{S}<br>\]</p>
<p>根据大数定律，我们可以通过对状态 \(s\) 之后观测到的回报求均值，来估计值函数。随着观测到的回报越来越多，它的均值会收敛到期望值，也就是我们需要的 \(v_{\pi} (s)\)。</p>
<p><strong>First-visit MC method</strong>：用第一次出现状态 \(s\) 后产生的回报的均值来估计 \(v_{\pi} (s)\)</p>
<p><strong>Every-visit MC method</strong>：用所有出现状态 \(s\) 后的回报的均值来进行估计 \(v_{\pi} (s)\)</p>
<p>Policy improvement:</p>
<p>我们使用贪婪策略：</p>
<p>\[<br>\pi_{k+1}(s) := \underset{a}{\mathrm{argmax}} \ q_{\pi_k}(s, a)<br>\]</p>
<p><strong>Incremental Implementation</strong></p>
<p>直接计算平均值比较麻烦，所以我们使用递增式的方法：</p>
<p>\[<br>\begin{equation}<br>\begin{split}<br>Q_{n+1} &amp;= \frac{1}{n+1} \sum_{i=1}^{n+1}g_i \\<br>&amp;= Q_n + \frac{1}{n+1} (g_n - Q_n)<br>\end{split}<br>\end{equation}<br>\]</p>
<p>其中 \(g_i\) 表示的是第 \(i\) 次迭代的样本回报。</p>
<h2 id="时序差分学习（Temporal-Difference-Learning）"><a href="#时序差分学习（Temporal-Difference-Learning）" class="headerlink" title="时序差分学习（Temporal Difference Learning）"></a>时序差分学习（Temporal Difference Learning）</h2><p>\[<br>V_{n+1}(s) \approx V_n(s) + \alpha [r(s, a) + \gamma V_n(s’) - V_n(s)]<br>\]</p>
<p>\[<br>Q_{n+1}(s, a) = Q_n(s, a) + \alpha [r(s, a) + \gamma Q_n(s’, a’) - Q_n(s, a)]<br>\]</p>
<p>其中，\(r(s, a) + \gamma Q_n(s’, a’) - Q_n(s, a)\) 是 <strong>TD error</strong>，\(r(s, a) + \gamma Q_n(s’, a’)\) 是 <strong>TD target</strong>。\(\alpha\) 是学习率，学习率高的时候学习更快，但是会增加更新的权重，有可能造成估计值（\(Q\)）的震荡。</p>
<p>使用 TD error 进行估计的过程即是 policy evalution 部分。至于 policy improvement 则和前面的一样。</p>
<p><strong>TD VS MC</strong></p>
<ul>
<li>TD can learn from <strong>incomplete</strong> sequences</li>
<li>MC needs <strong>complete</strong> sequences</li>
<li>TD works in <strong>continuing</strong> environments</li>
<li>MC only works for <strong>episodic</strong> environments</li>
</ul>
<h3 id="Sarsa"><a href="#Sarsa" class="headerlink" title="Sarsa"></a>Sarsa</h3><p>给定一个元组 \((S_t, A_t, R_{t+1}, S_{t+1}, A_{t+1})\)，我们根据 \(Q(S_t, A_t) \leftarrow Q(S_t, A_t) + \alpha (R_{t+1} + \gamma Q(S_{t+1}, A_{t+1}) - Q(S_t, A_t))\) 来进行更新。</p>
<p><img src="2.png"></p>
<p><strong>𝜀 - greedy policy</strong>:</p>
<ul>
<li>With probability 1 - 𝜀  : A = \(a^* \in \underset{a}{\mathrm{argmax}}\ Q(s, a)\)</li>
<li>With probability 𝜀      : A = an action uniformly randomly selected from all other actions available at state s</li>
</ul>
<p>为了让 Sarsa 最终收敛到最优值，我们可以使 𝜀 逐渐接近 0。</p>
<h3 id="Q-learning"><a href="#Q-learning" class="headerlink" title="Q-learning"></a>Q-learning</h3><p>与 Sarsa 不同的是，更新 \(Q\) 时比较贪婪，直接对已经学习到的 \(Q\) 选取最大值，而非遵循策略。</p>
<p>\(Q(S_t, A_t) \leftarrow Q(S_t, A_t) + \alpha (R_{t+1} + \gamma\ \underset{a}{\mathrm{max}}\ Q(S_{t+1}, a) - Q(S_t, A_t))\)</p>
<p><img src="3.png"></p>
<p><strong>Double Q-learning</strong></p>
<p>解决 Q-learning 的 positive bias 问题。</p>
<p><img src="4.png"></p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成-知识点整理（上）</title>
    <url>/posts/2021-04-08-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Introduction-amp-Microprocessor-Concepts"><a href="#Introduction-amp-Microprocessor-Concepts" class="headerlink" title="Introduction &amp; Microprocessor Concepts"></a>Introduction &amp; Microprocessor Concepts</h1><h2 id="Functional-Units"><a href="#Functional-Units" class="headerlink" title="Functional Units"></a>Functional Units</h2><p><img src="1.png"></p>
<h2 id="Processor-Components"><a href="#Processor-Components" class="headerlink" title="Processor Components"></a>Processor Components</h2><p><strong>Arithmetic &amp; Logic Unit (ALU)</strong> for performing arithmetic &amp; logical operations, usually on word<sup>*</sup>-size data operands.</p>
<p><strong>Timing &amp; Control Unit (CU)</strong> for fetching program instructions &amp; data from memory, executing them one after another, &amp; transferring the results back to memory.</p>
<p><strong>Registers</strong> (typically 16 or 32), small amounts of fast storage each of which holds one word<sup>*</sup> of data. Usually classified into general-purpose &amp; special-purpose:</p>
<ul>
<li><p>Program Counter (PC)</p>
</li>
<li><p>Link Register (LR)</p>
</li>
<li><p>Instruction Register<sup>#</sup> (IR)</p>
</li>
<li><p>Stack Pointer (SP)</p>
</li>
</ul>
<p><em>*architecture-dependent; #read-only</em></p>
<h3 id="The-Registers"><a href="#The-Registers" class="headerlink" title="The Registers"></a>The Registers</h3><p>The <strong>General purpose registers</strong> hold data &amp; addresses.</p>
<p>The <strong>PC</strong> register holds the memory address of the current/next instruction.</p>
<p>The <strong>IR</strong> holds the current instruction.</p>
<p>The <strong>LR</strong> stores the return address when a subroutine/function is called.</p>
<p>The <strong>SP</strong> holds the memory address of the last (most recent) data in the stack memory.</p>
<h2 id="Memory-Organization"><a href="#Memory-Organization" class="headerlink" title="Memory Organization"></a>Memory Organization</h2><p>Memory consists of many millions of cells. Each cell holds a bit of information, 0 or 1.</p>
<p>Information usually handled in larger units: words/bytes.</p>
<p>A word is a group of n consecutive bits. A word length is usually between 16 and 64 bits. The memory is thus a collection of consecutive words of the size specified by the word length.</p>
<p>In our 32-bit ARM context:</p>
<ul>
<li>word = 32 bits</li>
<li>byte = 8 bits</li>
</ul>
<h2 id="Instructions-amp-Sequencing"><a href="#Instructions-amp-Sequencing" class="headerlink" title="Instructions &amp; Sequencing"></a>Instructions &amp; Sequencing</h2><p>Basic types of instruction a computer must support:</p>
<ul>
<li>Data transfers to &amp; from the memory, e.g. load, store</li>
<li>Arithmetic &amp; logical operations on data, e.g. add, or</li>
<li>Program sequencing &amp; control, e.g. branch</li>
</ul>
<h3 id="RISC-amp-CISC"><a href="#RISC-amp-CISC" class="headerlink" title="RISC &amp; CISC"></a>RISC &amp; CISC</h3><p>RISC: Reduced Instruction Set Computers</p>
<p>CISC: Complex Instruction Set Computers</p>
<table>
<thead>
<tr>
<th>RISC</th>
<th>CISC</th>
</tr>
</thead>
<tbody><tr>
<td>Simple Instruction Type; Reduced Set</td>
<td>Complex; Extended Set</td>
</tr>
<tr>
<td>Fixed Instruction Length: One Word</td>
<td>Variable Instruction Length: Multi-Word</td>
</tr>
<tr>
<td>One Cycle/Instruction (Except Load &amp; Store)</td>
<td>Multiple Cycles/Instruction</td>
</tr>
<tr>
<td>Instructions Accessing Memory: Load &amp; Store</td>
<td>Almost All Instructions From The Set</td>
</tr>
<tr>
<td>Arithmetic/Logic Operands Must Be In Registers</td>
<td>Allow Direct Memory Operations</td>
</tr>
<tr>
<td>Limited Addressing Mode</td>
<td>Compound Addressing Mode</td>
</tr>
</tbody></table>
<h3 id="RISC-Instruction-Set"><a href="#RISC-Instruction-Set" class="headerlink" title="RISC Instruction Set"></a>RISC Instruction Set</h3><p>Almost all RISC instructions occupy a single word each.</p>
<p>An instruction specifies an operation &amp; the locations of its data operands.</p>
<p>A load/store architecture means:</p>
<ul>
<li>Only Load &amp; Store instructions are used to access memory operands</li>
<li>Operands for arithmetic/logical instructions must be in Registers, or one of them may be given explicitly</li>
</ul>
<p>Instructions &amp; data are stored in the memory. Contents of processor Registers are initially invalid.</p>
<p>Because RISC operates on Register operands, data must be transferred into Register before ALU ops. The Load instruction is used for this purpose. Conversely, the Store instruction is used to transfer data from Register to memory.</p>
<h3 id="Instruction-Execution-Sequencing"><a href="#Instruction-Execution-Sequencing" class="headerlink" title="Instruction Execution/Sequencing"></a>Instruction Execution/Sequencing</h3><p>How is the RISC program executed?</p>
<p>Every instruction is executed with the following steps:</p>
<ol>
<li><strong>Fetch Instruction</strong> – Read instruction from memory</li>
<li><strong>Decode Instruction</strong> – Determine action required</li>
<li><strong>Fetch Data</strong> – Read data from memory</li>
<li><strong>Process Data</strong> – Perform arithmetic/logical operations</li>
<li><strong>Write Data</strong> – Write result to memory</li>
</ol>
<p>Address for first instruction is placed in PC. CU <strong>fetches &amp; executes</strong> instructions, one after another. During the execution of each instruction, PC register is always incremented by 4 by default, unless told otherwise (e.g. in branching &amp; looping).</p>
<ul>
<li><p><strong>Fetch</strong>-phase:</p>
<ul>
<li>CU reads value in PC for the address of current instruction</li>
<li>CU transfers and places the machine instruction into IR</li>
</ul>
</li>
<li><p><strong>Execute</strong>-phase:</p>
<ul>
<li>CU decodes machine instruction in IR</li>
<li>The specified operation is performed in steps, e.g. CU transfers operands, ALU performs arithmetic/logical ops</li>
<li>Also, PC is incremented, pointing at the next instruction, ready for the next fetch</li>
</ul>
</li>
</ul>
<h3 id="Branching-amp-Looping"><a href="#Branching-amp-Looping" class="headerlink" title="Branching &amp; Looping"></a>Branching &amp; Looping</h3><p>A branch instruction works by:</p>
<ul>
<li>Placing the address containing the required instruction into PC</li>
<li>Then fetching &amp; executing that instruction (&amp; all subsequent ones) until the end of program/another branching occurs</li>
</ul>
<p>A loop can be implemented by:</p>
<ul>
<li>Branching repeatedly to the start of a section of a program until some terminating condition is satisfied</li>
</ul>
<p>Processor maintains the information on arithmetic or logical operation results to affect subsequent conditional branches, thus altering the program flow.</p>
<h1 id="ARM-Cortex-M3-NXP-LPC1769"><a href="#ARM-Cortex-M3-NXP-LPC1769" class="headerlink" title="ARM Cortex-M3 NXP LPC1769"></a>ARM Cortex-M3 NXP LPC1769</h1><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p><img src="2.png"></p>
<ul>
<li>Operates at 120 MHz</li>
<li>100 pin packaging</li>
<li>Cortex-M3 processor (32-bit)</li>
<li>Uses a modified Harvard architecture</li>
<li>Incorporates a 3-stage pipeline</li>
<li>512 KB of Flash Memory</li>
<li>64 KB on-chip SRAM</li>
</ul>
<p>……</p>
<h3 id="Registers"><a href="#Registers" class="headerlink" title="Registers"></a>Registers</h3><p>Cortex-M3 processor has sixteen 32-bits registers (R0–R15).</p>
<p>R0–R12: General-Purpose Registers for data operations</p>
<ul>
<li><p>R0-R7: low registers</p>
</li>
<li><p>R8-R12: high registers</p>
<p>This differentiation is only meaningful to interrupts.</p>
</li>
</ul>
<p>R13: Special-Purpose Register, Contains two Stack Pointers</p>
<ul>
<li>Main Stack Pointer (MSP): default stack pointer, used by the operating system (OS) kernel &amp; exception handlers</li>
<li>Process Stack Pointer (PSP): used by user application code</li>
</ul>
<p>R14: Link Register (LR)</p>
<ul>
<li>Stores the return address when a subroutine/function is called</li>
</ul>
<p>R15: Program Counter (PC)</p>
<ul>
<li>Holds the memory address of the current/next instruction</li>
<li>Can be written to control the program flow, e.g. branching</li>
</ul>
<p>Instruction Register (IR)</p>
<ul>
<li>Not shown/accessible</li>
<li>Read-only by CU</li>
</ul>
<p><img src="3.png"></p>
<h1 id="ARM-Instruction-Set-amp-Assembly-Language-ASM"><a href="#ARM-Instruction-Set-amp-Assembly-Language-ASM" class="headerlink" title="ARM Instruction Set &amp; Assembly Language (ASM)"></a>ARM Instruction Set &amp; Assembly Language (ASM)</h1><h2 id="Introduction-to-ARMv7-M"><a href="#Introduction-to-ARMv7-M" class="headerlink" title="Introduction to ARMv7-M"></a>Introduction to ARMv7-M</h2><p>Assembly programs are quicker, smaller &amp; have larger capabilities than those created with high-level languages.</p>
<p>However, developing applications with assembly is tedious &amp; error-prone.</p>
<p>Combination of C and asm is a powerful method.</p>
<h3 id="Calling-an-Assembler-Function-from-a-C-Program"><a href="#Calling-an-Assembler-Function-from-a-C-Program" class="headerlink" title="Calling an Assembler Function from a C Program"></a>Calling an Assembler Function from a C Program</h3><p>Call assembler function from C program (.c)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">my_asm_func</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Input parameters: R0, R1, R2, R3 (maximum of 4)</p>
</li>
<li><p>Output (return) parameter: R0</p>
</li>
</ul>
<p>Define assembler function in asm program (.s)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_asm_func: ...</span><br></pre></td></tr></table></figure>

<ul>
<li><p>It will be treated as just another subroutine by C program</p>
</li>
<li><p><code>my_asm_func</code> usually ends with <code>BX LR</code> to return to the calling C program</p>
</li>
</ul>
<h3 id="Some-Basics"><a href="#Some-Basics" class="headerlink" title="Some Basics"></a>Some Basics</h3><h4 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h4><p>A label is a symbol that represents the memory address of an instruction or data.</p>
<ol>
<li>Convenient way for accessing an instruction in memory, especially when doing branching &amp; looping</li>
<li>Accessing a data item in memory (label as a variable)</li>
<li>Used to represent a defined constant value</li>
</ol>
<h4 id="Op2"><a href="#Op2" class="headerlink" title="Op2"></a>Op2</h4><p>Operand2 – a flexible 2<sup>nd</sup> operand. Available to some Arithmetic/Logical &amp; Move instructions.</p>
<ol>
<li>Constant (aka Immediate)</li>
<li>Register (with optional shift)</li>
</ol>
<h4 id="Pre-amp-Suffix"><a href="#Pre-amp-Suffix" class="headerlink" title="Pre- &amp; Suffix"></a>Pre- &amp; Suffix</h4><p>An Arithmetic or Logical instruction can have:</p>
<ol>
<li><p>Prefix S- or U-</p>
<p>S: perform signed operation of the instruction</p>
<p>U: perform unsigned operation of the instruction</p>
</li>
<li><p>Suffix -S (optional)</p>
<p>op{S}: updates condition code flags according to the result of Arithmetic/Logical or Move operation, op</p>
</li>
</ol>
<h4 id="Condition-Flags"><a href="#Condition-Flags" class="headerlink" title="Condition Flags"></a>Condition Flags</h4><ul>
<li><strong>N</strong>: Set to 1 when the result of the operation is negative, cleared to 0 otherwise</li>
<li><strong>Z</strong>: Set to 1 when the result of the operation is zero, cleared to 0 otherwise</li>
<li><strong>C</strong>: Set to 1 when the operation results in a carry, or when a subtraction results in no borrow, cleared to 0 otherwise</li>
<li><strong>V</strong>: Set to 1 when the operation causes overflow, cleared to 0 otherwise</li>
</ul>
<p><strong>C</strong> is set in one of the following ways:</p>
<ul>
<li>For an addition, including the comparison instruction <code>CMN</code>, <strong>C</strong> is set to 1 if the addition produced a carry (that is, an unsigned overflow), and to 0 otherwise.</li>
<li>For a subtraction, including the comparison instruction <code>CMP</code>, <strong>C</strong> is set to 0 if the subtraction produced a borrow (that is, an unsigned underflow), and to 1 otherwise.</li>
<li>For non-addition/subtractions that incorporate a shift operation, <strong>C</strong> is set to the last bit shifted out of the value by the shifter.</li>
<li>For other non-addition/subtractions, <strong>C</strong> is normally left unchanged, but see the individual instruction descriptions for any special cases.</li>
</ul>
<p>Overflow occurs if the result of a signed add, subtract, or compare is greater than or equal to 2<sup>31</sup>, or less than -2<sup>31</sup>.</p>
<h2 id="Memory-Addressing"><a href="#Memory-Addressing" class="headerlink" title="Memory Addressing"></a>Memory Addressing</h2><h3 id="Memory-Allocation-for-Data"><a href="#Memory-Allocation-for-Data" class="headerlink" title="Memory Allocation for Data"></a>Memory Allocation for Data</h3><p>Data declarations, by using assembler directive(s) at the end of an asm program/function:</p>
<ul>
<li><p>Constants (using .word)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NUM1: .word 123, 456</span><br><span class="line">POINTER: .word NUM1+4</span><br></pre></td></tr></table></figure></li>
<li><p>Static Variables (using .lcomm)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.lcomm ANSWER 4 @ reserves 4 bytes (1 word)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="4.png"></p>
<p>Static variables retain their values even when the function exits. NUM1, POINTER and ANSWER are all labels.</p>
<h3 id="Offset-Addressing"><a href="#Offset-Addressing" class="headerlink" title="Offset Addressing"></a>Offset Addressing</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LDR/STR Rt, [Rn &#123;, #offset&#125;]</span><br></pre></td></tr></table></figure>

<p><code>LDR</code>: loads register Rt with value from stated memory</p>
<p><code>STR</code>: stores value in register Rt to stated memory</p>
<p>Rn: the base register, contains the address of the memory location</p>
<p>If an offset is present, its value is added to (or subtracted from) the address obtained from the base register Rn. The result (aka the effective address, EA) is used as the address for the memory access.</p>
<p>The value in base register Rn is unaltered.</p>
<h3 id="Offset-Addressing-with-Pre-Post-Index"><a href="#Offset-Addressing-with-Pre-Post-Index" class="headerlink" title="Offset Addressing with Pre/Post Index"></a>Offset Addressing with Pre/Post Index</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LDR/STR Rt, [Rn, #offset]! @ pre-indexed addressing</span><br><span class="line">LDR/STR Rt, [Rn], #offset @ post-indexed addressing</span><br></pre></td></tr></table></figure>

<ul>
<li>Pre-indexed addressing<ol>
<li>The offset value is added to (or subtracted from, if offset is negative) the address obtained from the base register Rn.</li>
<li>The result is used as the Effective Address (EA) for the memory access and it is written back into the Rn.</li>
</ol>
</li>
<li>Post-indexed addressing<ol>
<li>The address obtained from the base register Rn is used as the EA.</li>
<li>The offset value is added to (or subtracted from) the address, and it is written back into the register Rn after the memory access.</li>
</ol>
</li>
</ul>
<h3 id="PC-Relative-Addressing-Load-only"><a href="#PC-Relative-Addressing-Load-only" class="headerlink" title="PC-Relative Addressing (Load only)"></a>PC-Relative Addressing (Load only)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LDR Rd, ITEM</span><br></pre></td></tr></table></figure>

<p><code>LDR</code> loads a register with the value from a PC-relative memory address that is specified by a label.</p>
<p>The base register is always the PC. Location of data is always relative to that of the instruction. The offset is calculated by the assembler.</p>
<h3 id="Pseudo-Instruction-Load-only"><a href="#Pseudo-Instruction-Load-only" class="headerlink" title="Pseudo-Instruction (Load only)"></a>Pseudo-Instruction (Load only)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LDR R1, =0xA123B456 @ loading a 32-bit value</span><br></pre></td></tr></table></figure>

<p>↓</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LDR R1, MEMLOC</span><br><span class="line">MEMLOC: .word 0xA123B456</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LDR R3, =NUM1 @ loading an address (represented by a label)</span><br></pre></td></tr></table></figure>

<p>↓</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LDR R3, POINTER</span><br><span class="line">NUM1: .word 123</span><br><span class="line">POINTER: .word NUM1</span><br></pre></td></tr></table></figure>

<p>The assembler will convert it into PC-relative <code>LDR</code>. Useful for direct loading of long values/memory addresses.</p>
<h2 id="ARMv7-M-Ctrl-amp-Arithmetic-Instructions"><a href="#ARMv7-M-Ctrl-amp-Arithmetic-Instructions" class="headerlink" title="ARMv7-M Ctrl &amp; Arithmetic Instructions"></a>ARMv7-M Ctrl &amp; Arithmetic Instructions</h2><h3 id="Move-Instructions"><a href="#Move-Instructions" class="headerlink" title="Move Instructions"></a>Move Instructions</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV Rd, Op2</span><br><span class="line">MOVW Rd, #imm16</span><br></pre></td></tr></table></figure>

<p>Transfer to a register (Rd) an immediate constant value or from another register.</p>
<h3 id="Arithmetic-Instructions-ADD-SUB"><a href="#Arithmetic-Instructions-ADD-SUB" class="headerlink" title="Arithmetic Instructions: ADD, SUB"></a>Arithmetic Instructions: ADD, SUB</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADD/SUB &#123;Rd,&#125; Rn, Op2</span><br><span class="line">ADD/SUB &#123;Rd,&#125; Rn, #imm12</span><br></pre></td></tr></table></figure>

<p>Add &amp; Subtract.</p>
<p>If Rd is omitted, destination register is Rn.</p>
<h3 id="Arithmetic-Instructions-MUL-MLA"><a href="#Arithmetic-Instructions-MUL-MLA" class="headerlink" title="Arithmetic Instructions: MUL, MLA"></a>Arithmetic Instructions: MUL, MLA</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MUL &#123;Rd,&#125; Rn, Rm</span><br><span class="line">MLA Rd, Rn, Rm, Ra</span><br></pre></td></tr></table></figure>

<p>Multiply &amp; Multiply with Accumulate.</p>
<p>The results of these instructions do not depend on whether the operands are signed or unsigned. Only the least significant 32 bits of the 64-bit results are written to the destination registers.</p>
<p>To get 64-bit results, use the long versions that come with suffix L, in either unsigned (U) or signed (S) variants, see <code>UMULL</code>, <code>UMLAL</code>, <code>SMULL</code>, &amp; <code>SMLAL</code>.</p>
<h3 id="Compare-Instructions"><a href="#Compare-Instructions" class="headerlink" title="Compare Instructions"></a>Compare Instructions</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CMP Rn, Op2</span><br><span class="line">CMN Rn, Op2</span><br></pre></td></tr></table></figure>

<p>Compare &amp; Compare Negative.</p>
<p><code>CMP</code> performs Rn - Op2 while <code>CMN</code> performs Rn + Op2. And then they update condition flags N, Z, C &amp; V based on the result.</p>
<p>If S suffix option is not available to the instruction before a conditional branch, it is very useful to <code>CMP</code>/<code>CMN</code>. </p>
<h3 id="Branch-Instructions-B"><a href="#Branch-Instructions-B" class="headerlink" title="Branch Instructions: B"></a>Branch Instructions: B</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">B&#123;cond&#125; label</span><br></pre></td></tr></table></figure>

<p>Branch to location indicated by label if the condition flags satisfy {cond}.</p>
<h3 id="Branch-Instructions-BL-BX"><a href="#Branch-Instructions-BL-BX" class="headerlink" title="Branch Instructions: BL, BX"></a>Branch Instructions: BL, BX</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BL&#123;cond&#125; label @ Branch with Link</span><br></pre></td></tr></table></figure>

<p>Branch to location indicated by label &amp; write the address of the next instruction to LR, usually when calling a subroutine/function.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BX&#123;cond&#125; Rm @ Branch Indirect</span><br></pre></td></tr></table></figure>

<p>Branch to location indicated by Rm.</p>
<h3 id="Branch-Instructions-BLX"><a href="#Branch-Instructions-BLX" class="headerlink" title="Branch Instructions: BLX"></a>Branch Instructions: BLX</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BLX&#123;cond&#125; Rm @ Branch Indirect with Link</span><br></pre></td></tr></table></figure>

<p>Branch to location indicated by Rm &amp; write the address of the next instruction to LR.</p>
<p>When to use what? Usually, in situations similar to:</p>
<ul>
<li>For/While loop; If-Then-Else/Switch-Case: <code>B</code></li>
<li>To jump to a Subroutine/Function: <code>BL</code> or <code>BLX</code></li>
<li>To go back to calling function: <code>BX</code></li>
</ul>
<h2 id="Condition-Code-Suffixes"><a href="#Condition-Code-Suffixes" class="headerlink" title="Condition Code Suffixes"></a>Condition Code Suffixes</h2><table>
<thead>
<tr>
<th>Suffix</th>
<th>Flags</th>
<th>Meaning</th>
</tr>
</thead>
<tbody><tr>
<td><code>EQ</code></td>
<td><code>Z</code> set</td>
<td>Equal</td>
</tr>
<tr>
<td><code>NE</code></td>
<td><code>Z</code> clear</td>
<td>Not equal</td>
</tr>
<tr>
<td><code>CS or HS</code></td>
<td><code>C</code> set</td>
<td>Higher or same (unsigned &gt;= )</td>
</tr>
<tr>
<td><code>CC or LO</code></td>
<td><code>C</code> clear</td>
<td>Lower (unsigned &lt; )</td>
</tr>
<tr>
<td><code>MI</code></td>
<td><code>N</code> set</td>
<td>Negative</td>
</tr>
<tr>
<td><code>PL</code></td>
<td><code>N</code> clear</td>
<td>Positive or zero</td>
</tr>
<tr>
<td><code>VS</code></td>
<td><code>V</code> set</td>
<td>Overflow</td>
</tr>
<tr>
<td><code>VC</code></td>
<td><code>V</code> clear</td>
<td>No overflow</td>
</tr>
<tr>
<td><code>HI</code></td>
<td><code>C</code> set and <code>Z</code> clear</td>
<td>Higher (unsigned &gt;)</td>
</tr>
<tr>
<td><code>LS</code></td>
<td><code>C</code> clear or <code>Z</code> set</td>
<td>Lower or same (unsigned &lt;=)</td>
</tr>
<tr>
<td><code>GE</code></td>
<td><code>N</code> and <code>V</code> the same</td>
<td>Signed &gt;=</td>
</tr>
<tr>
<td><code>LT</code></td>
<td><code>N</code> and <code>V</code> differ</td>
<td>Signed &lt;</td>
</tr>
<tr>
<td><code>GT</code></td>
<td><code>Z</code> clear, <code>N</code> and <code>V</code> the same</td>
<td>Signed &gt;</td>
</tr>
<tr>
<td><code>LE</code></td>
<td><code>Z</code> set, <code>N</code> and <code>V</code> differ</td>
<td>Signed &lt;=</td>
</tr>
<tr>
<td><code>AL</code></td>
<td>Any</td>
<td>Always. This suffix is normally omitted.</td>
</tr>
</tbody></table>
<h2 id="ARMv7-M-Logical-Instructions"><a href="#ARMv7-M-Logical-Instructions" class="headerlink" title="ARMv7-M Logical Instructions"></a>ARMv7-M Logical Instructions</h2><h3 id="Logical-Instructions-AND-ORR-EOR"><a href="#Logical-Instructions-AND-ORR-EOR" class="headerlink" title="Logical Instructions: AND, ORR, EOR"></a>Logical Instructions: AND, ORR, EOR</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">op&#123;S&#125; &#123;Rd,&#125; Rn, Op2</span><br></pre></td></tr></table></figure>

<p>Bit-wise logical AND, OR &amp; Exclusive-OR.</p>
<h3 id="Logical-Instructions-MVN-NOT"><a href="#Logical-Instructions-MVN-NOT" class="headerlink" title="Logical Instructions: MVN (NOT)"></a>Logical Instructions: MVN (NOT)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MVN&#123;S&#125; Rd, Op2</span><br></pre></td></tr></table></figure>

<p>Bit-wise logical NOT.</p>
<h3 id="Logical-Instructions-BIC-ORN"><a href="#Logical-Instructions-BIC-ORN" class="headerlink" title="Logical Instructions: BIC, ORN"></a>Logical Instructions: BIC, ORN</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">op&#123;S&#125; &#123;Rd,&#125; Rn, Op2</span><br></pre></td></tr></table></figure>

<p>Bit Clear &amp; OR NOT.</p>
<p><code>BIC</code> performs an bit-wise AND on the bits in Rn with the complements of the corresponding bits in the value of Op2.</p>
<p><code>ORN</code> performs an bit-wise OR on the bits in Rn with the complements of the corresponding bits in the value of Op2.</p>
<h3 id="Shift-amp-Rotate-Instructions"><a href="#Shift-amp-Rotate-Instructions" class="headerlink" title="Shift &amp; Rotate Instructions"></a>Shift &amp; Rotate Instructions</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">op&#123;S&#125; Rd, Rm, Rs</span><br><span class="line">op&#123;S&#125; Rd, Rm, #n</span><br></pre></td></tr></table></figure>

<p><code>LSL</code>: Logical Shift Left<br><code>LSR</code>: Logical Shift Right<br><code>ASR</code>: Arithmetic Shift Right<br><code>ROR</code>: Rotate Right</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RRX&#123;S&#125; Rd, Rm</span><br></pre></td></tr></table></figure>

<p><code>RRX</code>: Rotate Right with Extend</p>
<p><img src="5.png"></p>
<h3 id="Test-Instructions"><a href="#Test-Instructions" class="headerlink" title="Test Instructions"></a>Test Instructions</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TST Rn, Op2</span><br><span class="line">TEQ Rn, Op2</span><br></pre></td></tr></table></figure>

<p>Test &amp; Test Equivalence.</p>
<p><code>TST</code> performs bit-wise logical AND of the two operands.</p>
<p><code>TEQ</code> performs bit-wise logical Exclusive OR of the two operands.</p>
<p>Both update condition flags. They are similar to <code>ANDS</code> &amp; <code>EORS</code> respectively, but they discard results.</p>
<h3 id="Stack-Instructions"><a href="#Stack-Instructions" class="headerlink" title="Stack Instructions"></a>Stack Instructions</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUSH reglist</span><br><span class="line">POP reglist</span><br><span class="line">@ reglist is a non-empty list of registers, enclosed in braces.</span><br></pre></td></tr></table></figure>

<p>Common use: to save Register contents before some data processing &amp; then restore those contents from the stack after the processing task is done.</p>
<p>SP (R13) is auto-decremented/incremented respectively.</p>
<hr>
<p>整理自 NUS CG2028 课件，难免有<strong>错漏</strong>并存在<strong>简化</strong>的地方，仅作参考。</p>
]]></content>
      <categories>
        <category>课程学习笔记</category>
      </categories>
      <tags>
        <tag>Computer Architecture</tag>
      </tags>
  </entry>
</search>
